Bitmap.Galaxy = [7, 123229502148636]
Bitmap.App = [2, 7]
Bitmap.Mul = [4, 21855]
Bitmap.Pow2 = [7, 560803991675135]
Bitmap.TotalEnergy = [5, 33554431]
Bitmap.TwoSquares = [5, 30309607]
Bitmap.Define = [3, 463]
Bitmap.Sum = [4, 48063]
Bitmap.FourDots = [7, 10880]
Bitmap.Bomb = [5, 15265326]
Bitmap.Thruster = [5, 18472561]
Bitmap.VarX0 = [4, 64959]
Bitmap.VarX1 = [4, 63935]
SparseBitmap.SymbolHuman = [8398848, 8407040, 8398849, 8407041, 8398850, 8402946, 8407042, 8398851, 8402947, 8407043, 8398852, 8402948, 8407044, 8390661, 8394757, 8398853, 8402949, 8407045, 8411141, 8415237, 8402950]
SparseBitmap.SymbolEndo = [8398848, 8407040, 8398849, 8402945, 8407041, 8390658, 8394754, 8398850, 8402946, 8407042, 8411138, 8415234, 8398851, 8402947, 8407043, 8402948, 8398853, 8407045, 8398854, 8407046]
SparseBitmap.SymbolAlien1 = [8398849, 8407041, 8390658, 8394754, 8398850, 8407042, 8411138, 8415234, 8394755, 8398851, 8407043, 8411139, 8394756, 8407044, 8415236, 8398853]
SparseBitmap.SymbolAlien2 = [8398848, 8402944, 8407040, 8390657, 8394753, 8398849, 8402945, 8407041, 8390658, 8394754, 8398850, 8402946, 8390659, 8394755, 8402947, 8394756, 8402948, 8411140, 8415236, 8394757, 8402949, 8407045, 8411141, 8415237, 8411142, 8415238]
SparseBitmap.SymbolAlien3 = [8407041, 8411137, 8415233, 8398850, 8402946, 8411138, 8390659, 8394755, 8398851, 8402947, 8411139, 8398852, 8402948, 8411140, 8407045, 8411141, 8415237]
SparseBitmap.SymbolAlien4 = [8394753, 8398849, 8407041, 8411137, 8390658, 8394754, 8398850, 8407042, 8411138, 8415234, 8394755, 8398851, 8407043, 8411139, 8398852, 8402948, 8407044, 8394757, 8402949, 8411141]
SparseBitmap.SymbolAlien5 = [8394752, 8398848, 8402944, 8407040, 8411136, 8394753, 8398849, 8407041, 8411137, 8394754, 8398850, 8402946, 8407042, 8411138, 8394755, 8402947, 8411139, 8394756, 8402948, 8411140, 8402949, 8402950]
SparseBitmap.SymbolAlien6 = [8394753, 8398849, 8402945, 8407041, 8411137, 8415233, 8394754, 8398850, 8402946, 8407042, 8411138, 8415234, 8394755, 8398851, 8402947, 8407043, 8411139, 8415235, 8390660, 8411140, 8415236, 8394757, 8398853, 8402949, 8407045, 8411141, 8415237]
SparseBitmap.SymbolAlien7 = [8411136, 8394753, 8398849, 8402945, 8407041, 8390658, 8394754, 8398850, 8402946, 8407042, 8394755, 8398851, 8402947, 8407043, 8411139, 8415235, 8394756, 8402948, 8411140, 8415236, 8394757, 8402949, 8394758, 8407046]
SparseBitmap.SymbolAlien8 = [8402944, 8394753, 8402945, 8411137, 8394754, 8402946, 8411138, 8394755, 8402947, 8411139, 8394756, 8402948, 8411140, 8394757, 8398853, 8402949, 8407045, 8411141, 8398854, 8402950, 8407046]
SparseBitmap.SymbolAlien9 = [8402944, 8394753, 8398849, 8402945, 8407041, 8411137, 8394754, 8411138, 8390659, 8394755, 8411139, 8415235, 8390660, 8394756, 8402948, 8411140, 8415236, 8394757, 8398853, 8402949, 8407045, 8411141, 8390662, 8398854, 8407046, 8415238]
SparseBitmap.PictureHuman = [8390656, 8501248, 8505344, 8390657, 8456193, 8460289, 8464385, 8497153, 8509441, 8390658, 8452098, 8468482, 8493058, 8509442, 8607746, 8390659, 8452099, 8468483, 8493059, 8509443, 8542211, 8603651, 8611843, 8390660, 8456196, 8472580, 8476676, 8488964, 8505348, 8538116, 8546308, 8599556, 8611844, 8390661, 8460293, 8480773, 8488965, 8501253, 8538117, 8550405, 8595461, 8607749, 8390662, 8464390, 8480774, 8493062, 8501254, 8542214, 8554502, 8595462, 8603654, 8390663, 8468487, 8476679, 8493063, 8501255, 8546311, 8558599, 8595463, 8603655, 8468488, 8476680, 8493064, 8505352, 8546312, 8558600, 8591368, 8603656, 8464393, 8476681, 8493065, 8505353, 8550409, 8558601, 8591369, 8599561, 8464394, 8476682, 8493066, 8505354, 8550410, 8558602, 8587274, 8599562, 8464395, 8476683, 8488971, 8505355, 8546315, 8558603, 8587275, 8599563, 8464396, 8476684, 8488972, 8505356, 8546316, 8558604, 8583180, 8599564, 8460301, 8476685, 8488973, 8505357, 8546317, 8558605, 8583181, 8599565, 8460302, 8480782, 8488974, 8505358, 8546318, 8558606, 8579086, 8595470, 8460303, 8480783, 8488975, 8505359, 8542223, 8558607, 8579087, 8595471, 8460304, 8480784, 8488976, 8505360, 8542224, 8558608, 8579088, 8595472, 8460305, 8480785, 8488977, 8505361, 8542225, 8558609, 8579089, 8595473, 8460306, 8480786, 8488978, 8505362, 8542226, 8558610, 8579090, 8591378, 8460307, 8476691, 8488979, 8505363, 8542227, 8550419, 8558611, 8574995, 8591379, 8460308, 8476692, 8488980, 8505364, 8542228, 8558612, 8574996, 8591380, 8460309, 8476693, 8484885, 8505365, 8542229, 8558613, 8570901, 8591381, 8456214, 8476694, 8484886, 8505366, 8542230, 8558614, 8570902, 8587286, 8456215, 8476695, 8484887, 8505367, 8538135, 8542231, 8558615, 8570903, 8587287, 8456216, 8476696, 8484888, 8505368, 8538136, 8558616, 8566808, 8587288, 8456217, 8476697, 8484889, 8505369, 8538137, 8558617, 8566809, 8587289, 8456218, 8476698, 8484890, 8505370, 8538138, 8558618, 8566810, 8587290, 8456219, 8476699, 8484891, 8501275, 8505371, 8509467, 8534043, 8562715, 8587291, 8456220, 8476700, 8480796, 8484892, 8501276, 8513564, 8529948, 8534044, 8562716, 8587292, 8456221, 8476701, 8480797, 8484893, 8497181, 8513565, 8525853, 8529949, 8534045, 8558621, 8587293, 8452126, 8472606, 8476702, 8480798, 8484894, 8497182, 8517662, 8525854, 8534046, 8558622, 8587294, 8452127, 8472607, 8476703, 8480799, 8484895, 8501279, 8517663, 8529951, 8534047, 8558623, 8562719, 8587295, 8452128, 8472608, 8484896, 8505376, 8517664, 8529952, 8534048, 8554528, 8566816, 8587296, 8452129, 8468513, 8488993, 8509473, 8517665, 8529953, 8534049, 8550433, 8587297, 8456226, 8468514, 8493090, 8509474, 8517666, 8529954, 8587298, 8456227, 8509475, 8517667, 8529955, 8579107, 8583203, 8456228, 8509476, 8517668, 8529956, 8575012, 8583204, 8456229, 8501285, 8509477, 8517669, 8529957, 8534053, 8558629, 8575013, 8587301, 8456230, 8480806, 8501286, 8509478, 8521766, 8529958, 8538150, 8579110, 8587302, 8456231, 8501287, 8509479, 8521767, 8529959, 8538151, 8579111, 8591399, 8460328, 8501288, 8509480, 8521768, 8529960, 8538152, 8542248, 8575016, 8583208, 8595496, 8460329, 8472617, 8489001, 8501289, 8505385, 8521769, 8529961, 8542249, 8575017, 8587305, 8595497, 8460330, 8472618, 8489002, 8501290, 8505386, 8521770, 8534058, 8542250, 8546346, 8575018, 8587306, 8599594, 8431659, 8435755, 8439851, 8456235, 8476715, 8484907, 8505387, 8521771, 8534059, 8542251, 8550443, 8570923, 8579115, 8591403, 8603691, 8427564, 8443948, 8448044, 8456236, 8505388, 8521772, 8534060, 8542252, 8554540, 8566828, 8579116, 8591404, 8603692, 8427565, 8452141, 8505389, 8517677, 8534061, 8542253, 8579117, 8587309, 8599597, 8427566, 8517678, 8534062, 8542254, 8579118, 8583214, 8595502, 8427567, 8517679, 8534063, 8542255, 8579119, 8595503, 8427568, 8439856, 8517680, 8534064, 8591408, 8427569, 8439857, 8443953, 8517681, 8538161, 8587313, 8427570, 8439858, 8448050, 8517682, 8542258, 8554546, 8566834, 8587314, 8427571, 8439859, 8452147, 8513587, 8546355, 8550451, 8570931, 8583219, 8427572, 8439860, 8456244, 8460340, 8468532, 8472628, 8489012, 8493108, 8501300, 8505396, 8509492, 8550452, 8575028, 8579124, 8427573, 8439861, 8464437, 8468533, 8497205, 8550453, 8579125, 8427574, 8439862, 8472630, 8476726, 8480822, 8493110, 8542262, 8546358, 8575030, 8427575, 8439863, 8476727, 8489015, 8546359, 8579127, 8427576, 8443960, 8472632, 8489016, 8546360, 8579128, 8423481, 8443961, 8448057, 8468537, 8493113, 8546361, 8579129, 8423482, 8443962, 8468538, 8493114, 8546362, 8575034, 8423483, 8439867, 8468539, 8493115, 8546363, 8575035, 8427580, 8439868, 8464444, 8497212, 8550460, 8570940, 8431677, 8435773, 8464445, 8497213, 8550461, 8566845, 8468542, 8493118, 8554558, 8558654, 8562750, 8472639, 8476735, 8480831, 8484927, 8489023]
SparseBitmap.PictureEndo = [8390656, 8443904, 8448000, 8452096, 8456192, 8460288, 8464384, 8468480, 8472576, 8476672, 8480768, 8484864, 8488960, 8542208, 8546304, 8550400, 8554496, 8558592, 8562688, 8566784, 8570880, 8574976, 8579072, 8390657, 8439809, 8493057, 8538113, 8583169, 8390658, 8439810, 8472578, 8476674, 8480770, 8493058, 8538114, 8546306, 8550402, 8554498, 8558594, 8583170, 8390659, 8443907, 8448003, 8452099, 8456195, 8460291, 8464387, 8468483, 8484867, 8493059, 8497155, 8501251, 8505347, 8509443, 8513539, 8517635, 8521731, 8525827, 8529923, 8534019, 8538115, 8546307, 8562691, 8566787, 8570883, 8574979, 8579075, 8390660, 8476676, 8480772, 8484868, 8488964, 8542212, 8546308, 8550404, 8390661, 8468485, 8472581, 8554501, 8558597, 8562693, 8566789, 8570885, 8574981, 8390662, 8460294, 8464390, 8579078, 8583174, 8390663, 8456199, 8587271, 8390664, 8452104, 8591368, 8390665, 8448009, 8595465, 8443914, 8599562, 8439819, 8603659, 8607755, 8611851, 8615947, 8620043, 8624139, 8431628, 8435724, 8603660, 8624140, 8628236, 8632332, 8423437, 8427533, 8435725, 8607757, 8636429, 8640525, 8644621, 8415246, 8419342, 8435726, 8607758, 8611854, 8615950, 8620046, 8624142, 8648718, 8407055, 8411151, 8431631, 8505359, 8611855, 8628239, 8648719, 8398864, 8402960, 8423440, 8427536, 8509456, 8611856, 8632336, 8636432, 8648720, 8394769, 8419345, 8427537, 8513553, 8546321, 8611857, 8636433, 8648721, 8394770, 8415250, 8427538, 8517650, 8546322, 8570898, 8574994, 8579090, 8583186, 8611858, 8636434, 8644626, 8398867, 8411155, 8427539, 8517651, 8542227, 8562707, 8566803, 8587283, 8611859, 8636435, 8644627, 8402964, 8411156, 8431636, 8472596, 8476692, 8480788, 8484884, 8488980, 8521748, 8538132, 8591380, 8607764, 8636436, 8644628, 8402965, 8411157, 8435733, 8452117, 8456213, 8460309, 8464405, 8468501, 8525845, 8534037, 8595477, 8607765, 8636437, 8644629, 8402966, 8415254, 8439830, 8443926, 8448022, 8525846, 8529942, 8595478, 8599574, 8603670, 8636438, 8644630, 8402967, 8415255, 8448023, 8521751, 8591383, 8632343, 8644631, 8407064, 8415256, 8448024, 8517656, 8591384, 8632344, 8644632, 8407065, 8415257, 8452121, 8505369, 8509465, 8513561, 8587289, 8632345, 8644633, 8407066, 8419354, 8456218, 8497178, 8501274, 8587290, 8632346, 8640538, 8411163, 8419355, 8460315, 8583195, 8632347, 8640539, 8411164, 8419356, 8460316, 8583196, 8628252, 8640540, 8411165, 8419357, 8460317, 8575005, 8579101, 8628253, 8640541, 8411166, 8419358, 8460318, 8566814, 8570910, 8628254, 8640542, 8411167, 8423455, 8460319, 8562719, 8624159, 8636447, 8411168, 8427552, 8460320, 8464416, 8550432, 8554528, 8558624, 8624160, 8636448, 8411169, 8431649, 8456225, 8460321, 8464417, 8468513, 8538145, 8542241, 8546337, 8550433, 8554529, 8611873, 8615969, 8620065, 8636449, 8407074, 8435746, 8439842, 8456226, 8460322, 8468514, 8529954, 8534050, 8546338, 8550434, 8603682, 8607778, 8636450, 8407075, 8443939, 8456227, 8460323, 8472611, 8525859, 8550435, 8599587, 8640547, 8407076, 8448036, 8456228, 8460324, 8472612, 8521764, 8550436, 8554532, 8595492, 8640548, 8402981, 8448037, 8460325, 8464421, 8476709, 8517669, 8554533, 8558629, 8595493, 8640549, 8402982, 8448038, 8464422, 8468518, 8480806, 8509478, 8513574, 8558630, 8562726, 8599590, 8611878, 8640550, 8402983, 8435751, 8439847, 8443943, 8464423, 8468519, 8484903, 8488999, 8493095, 8497191, 8501287, 8505383, 8562727, 8603687, 8607783, 8611879, 8640551, 8402984, 8419368, 8423464, 8435752, 8468520, 8562728, 8566824, 8611880, 8628264, 8636456, 8402985, 8415273, 8427561, 8431657, 8468521, 8472617, 8566825, 8570921, 8615977, 8620073, 8624169, 8632361, 8636457, 8407082, 8411178, 8468522, 8472618, 8570922, 8468523, 8472619, 8570923, 8575019, 8468524, 8472620, 8575020, 8468525, 8575021, 8579117, 8464430, 8468526, 8575022, 8579118, 8460335, 8464431, 8579119, 8456240, 8460336, 8579120, 8452145, 8456241, 8579121, 8443954, 8448050, 8452146, 8456242, 8460338, 8464434, 8579122, 8439859, 8468531, 8472627, 8575027, 8579123, 8583219, 8435764, 8476724, 8570932, 8587316, 8431669, 8476725, 8566837, 8591413, 8431670, 8480822, 8562742, 8595510, 8427575, 8480823, 8558647, 8599607, 8427576, 8456248, 8460344, 8480824, 8558648, 8603704, 8427577, 8456249, 8460345, 8480825, 8554553, 8575033, 8579129, 8603705, 8427578, 8480826, 8554554, 8575034, 8579130, 8603706, 8427579, 8480827, 8554555, 8603707, 8431676, 8480828, 8558652, 8603708, 8431677, 8476733, 8558653, 8595517, 8599613, 8435774, 8439870, 8468542, 8472638, 8562750, 8566846, 8591422, 8443967, 8448063, 8452159, 8456255, 8460351, 8464447, 8570943, 8575039, 8579135, 8583231, 8587327]
SparseBitmap.PictureAlien1 = [8390656, 8542208, 8546304, 8550400, 8390657, 8480769, 8484865, 8488961, 8493057, 8497153, 8538113, 8542209, 8554497, 8390658, 8476674, 8501250, 8538114, 8558594, 8390659, 8472579, 8501251, 8534019, 8562691, 8390660, 8464388, 8468484, 8501252, 8534020, 8566788, 8390661, 8460293, 8501253, 8529925, 8570885, 8390662, 8456198, 8497158, 8529926, 8574982, 8579078, 8390663, 8452103, 8497159, 8529927, 8583175, 8587271, 8591367, 8595463, 8599559, 8603655, 8607751, 8390664, 8448008, 8497160, 8525832, 8611848, 8615944, 8620040, 8624136, 8628232, 8632328, 8390665, 8443913, 8497161, 8525833, 8636425, 8640521, 8390666, 8439818, 8497162, 8525834, 8644618, 8390667, 8439819, 8497163, 8525835, 8566795, 8570891, 8574987, 8648715, 8390668, 8435724, 8497164, 8525836, 8562700, 8579084, 8583180, 8587276, 8648716, 8390669, 8431629, 8497165, 8525837, 8558605, 8591373, 8648717, 8390670, 8419342, 8423438, 8427534, 8497166, 8525838, 8558606, 8595470, 8644622, 8390671, 8407055, 8411151, 8415247, 8497167, 8525839, 8595471, 8640527, 8390672, 8402960, 8452112, 8456208, 8460304, 8464400, 8468496, 8472592, 8501264, 8529936, 8599568, 8636432, 8390673, 8398865, 8443921, 8448017, 8476689, 8480785, 8501265, 8529937, 8599569, 8628241, 8632337, 8390674, 8398866, 8439826, 8501266, 8529938, 8570898, 8574994, 8595474, 8615954, 8620050, 8624146, 8390675, 8402963, 8439827, 8501267, 8534035, 8570899, 8574995, 8595475, 8611859, 8390676, 8407060, 8411156, 8439828, 8501268, 8534036, 8595476, 8611860, 8390677, 8415253, 8443925, 8505365, 8538133, 8595477, 8615957, 8390678, 8419350, 8423446, 8443926, 8464406, 8468502, 8505366, 8538134, 8595478, 8615958, 8390679, 8427543, 8448023, 8464407, 8468503, 8472599, 8509463, 8538135, 8591383, 8615959, 8390680, 8431640, 8448024, 8464408, 8468504, 8472600, 8509464, 8542232, 8558616, 8587288, 8620056, 8390681, 8431641, 8448025, 8513561, 8542233, 8562713, 8583193, 8620057, 8390682, 8431642, 8448026, 8484890, 8513562, 8542234, 8566810, 8570906, 8575002, 8579098, 8624154, 8390683, 8431643, 8448027, 8488987, 8513563, 8542235, 8624155, 8390684, 8431644, 8448028, 8488988, 8513564, 8542236, 8628252, 8390685, 8431645, 8448029, 8488989, 8513565, 8542237, 8628253, 8390686, 8431646, 8452126, 8484894, 8513566, 8538142, 8632350, 8390687, 8431647, 8452127, 8480799, 8509471, 8538143, 8632351, 8390688, 8431648, 8456224, 8460320, 8464416, 8468512, 8472608, 8476704, 8509472, 8534048, 8632352, 8390689, 8431649, 8505377, 8534049, 8636449, 8390690, 8431650, 8501282, 8529954, 8579106, 8583202, 8587298, 8591394, 8636450, 8390691, 8431651, 8497187, 8529955, 8575011, 8595491, 8599587, 8640547, 8390692, 8431652, 8484900, 8488996, 8493092, 8529956, 8570916, 8603684, 8640548, 8390693, 8431653, 8480805, 8529957, 8566821, 8603685, 8644645, 8390694, 8431654, 8480806, 8534054, 8562726, 8607782, 8644646, 8390695, 8431655, 8476711, 8538151, 8558631, 8611879, 8648743, 8390696, 8431656, 8476712, 8542248, 8546344, 8550440, 8554536, 8611880, 8648744, 8390697, 8431657, 8476713, 8615977, 8648745, 8390698, 8431658, 8480810, 8615978, 8648746, 8390699, 8435755, 8480811, 8620075, 8648747, 8390700, 8435756, 8480812, 8620076, 8648748, 8390701, 8435757, 8480813, 8624173, 8648749, 8390702, 8435758, 8484910, 8624174, 8644654, 8390703, 8435759, 8484911, 8628271, 8632367, 8636463, 8640559, 8390704, 8435760, 8489008, 8390705, 8439857, 8493105, 8390706, 8439858, 8497202, 8501298, 8505394, 8390707, 8443955, 8509491, 8513587, 8517683, 8521779, 8390708, 8448052, 8525876, 8390709, 8452149, 8529973, 8390710, 8456246, 8460342, 8464438, 8534070, 8390711, 8468535, 8472631, 8476727, 8480823, 8534071, 8390712, 8484920, 8489016, 8493112, 8497208, 8501304, 8505400, 8509496, 8513592, 8517688, 8521784, 8525880, 8529976, 8390713, 8390714, 8390715]
SparseBitmap.PictureAlien2 = [8390656, 8542208, 8546304, 8550400, 8390657, 8529921, 8534017, 8538113, 8554497, 8558593, 8562689, 8566785, 8570881, 8390658, 8456194, 8460290, 8464386, 8468482, 8472578, 8476674, 8480770, 8525826, 8574978, 8579074, 8583170, 8587266, 8390659, 8448003, 8452099, 8484867, 8488963, 8517635, 8521731, 8579075, 8591363, 8595459, 8599555, 8603651, 8607747, 8611843, 8390660, 8443908, 8493060, 8497156, 8501252, 8505348, 8509444, 8513540, 8574980, 8615940, 8390661, 8435717, 8439813, 8574981, 8620037, 8431622, 8570886, 8624134, 8431623, 8566791, 8624135, 8431624, 8435720, 8566792, 8628232, 8427529, 8435721, 8562697, 8628233, 8427530, 8439818, 8562698, 8628234, 8427531, 8443915, 8558603, 8628235, 8423436, 8448012, 8452108, 8554508, 8628236, 8423437, 8456205, 8624141, 8423438, 8624142, 8423439, 8620047, 8419344, 8620048, 8419345, 8607761, 8611857, 8615953, 8419346, 8591378, 8595474, 8599570, 8603666, 8419347, 8480787, 8484883, 8566803, 8570899, 8574995, 8579091, 8583187, 8587283, 8419348, 8488980, 8558612, 8562708, 8419349, 8493077, 8554517, 8419350, 8497174, 8546326, 8550422, 8419351, 8497175, 8542231, 8419352, 8484888, 8488984, 8493080, 8501272, 8538136, 8419353, 8480793, 8501273, 8534041, 8419354, 8476698, 8505370, 8529946, 8419355, 8472603, 8505371, 8529947, 8419356, 8472604, 8501276, 8525852, 8591388, 8595484, 8599580, 8603676, 8607772, 8611868, 8615964, 8620060, 8419357, 8468509, 8501277, 8525853, 8583197, 8587293, 8624157, 8419358, 8468510, 8501278, 8525854, 8579102, 8628254, 8419359, 8464415, 8501279, 8521759, 8579103, 8632351, 8423456, 8464416, 8501280, 8521760, 8575008, 8636448, 8423457, 8464417, 8501281, 8521761, 8575009, 8636449, 8423458, 8464418, 8501282, 8525858, 8570914, 8640546, 8427555, 8464419, 8501283, 8525859, 8570915, 8640547, 8427556, 8464420, 8501284, 8525860, 8570916, 8640548, 8431653, 8464421, 8505381, 8525861, 8566821, 8644645, 8431654, 8464422, 8505382, 8529958, 8566822, 8644646, 8435751, 8464423, 8505383, 8534055, 8562727, 8611879, 8628263, 8644647, 8435752, 8464424, 8509480, 8534056, 8558632, 8615976, 8620072, 8624168, 8644648, 8439849, 8464425, 8509481, 8538153, 8542249, 8546345, 8550441, 8554537, 8644649, 8439850, 8464426, 8513578, 8550442, 8644650, 8443947, 8468523, 8517675, 8521771, 8546347, 8644651, 8448044, 8468524, 8525868, 8529964, 8542252, 8599596, 8615980, 8648748, 8452141, 8468525, 8534061, 8538157, 8599597, 8611885, 8648749, 8456238, 8460334, 8464430, 8468526, 8534062, 8603694, 8607790, 8648750, 8525871, 8529967, 8648751, 8521776, 8648752, 8517681, 8648753, 8513586, 8648754, 8513587, 8570931, 8583219, 8648755, 8513588, 8570932, 8583220, 8599604, 8624180, 8644660, 8513589, 8575029, 8579125, 8603701, 8615989, 8620085, 8644661, 8513590, 8607798, 8611894, 8640566, 8517687, 8640567, 8517688, 8636472, 8521785, 8525881, 8632377, 8529978, 8620090, 8624186, 8628282, 8534075, 8538171, 8542267, 8546363, 8550459, 8595515, 8599611, 8603707, 8607803, 8611899, 8615995, 8554556, 8558652, 8562748, 8566844, 8570940, 8575036, 8579132, 8583228, 8587324, 8591420]
SparseBitmap.PictureAlien3 = [8390656, 8390657, 8390658, 8390659, 8390660, 8390661, 8390662, 8390663, 8390664, 8390665, 8390666, 8390667, 8390668, 8587276, 8591372, 8595468, 8599564, 8603660, 8607756, 8611852, 8615948, 8620044, 8624140, 8628236, 8390669, 8566797, 8570893, 8574989, 8579085, 8583181, 8632333, 8636429, 8390670, 8546318, 8550414, 8554510, 8558606, 8562702, 8640526, 8644622, 8390671, 8525839, 8529935, 8534031, 8538127, 8542223, 8648719, 8390672, 8509456, 8513552, 8517648, 8521744, 8648720, 8390673, 8468497, 8472593, 8476689, 8480785, 8484881, 8488977, 8493073, 8497169, 8501265, 8505361, 8570897, 8595473, 8599569, 8603665, 8607761, 8611857, 8615953, 8632337, 8636433, 8640529, 8644625, 8390674, 8448018, 8452114, 8456210, 8460306, 8464402, 8570898, 8583186, 8587282, 8591378, 8611858, 8636434, 8390675, 8439827, 8443923, 8574995, 8579091, 8615955, 8636435, 8390676, 8431636, 8435732, 8574996, 8620052, 8632340, 8390677, 8427541, 8464405, 8574997, 8620053, 8632341, 8390678, 8423446, 8468502, 8484886, 8579094, 8620054, 8632342, 8390679, 8419351, 8468503, 8488983, 8505367, 8579095, 8624151, 8632343, 8390680, 8415256, 8472600, 8488984, 8509464, 8583192, 8624152, 8632344, 8411161, 8472601, 8493081, 8509465, 8583193, 8624153, 8632345, 8407066, 8472602, 8493082, 8509466, 8587290, 8624154, 8632346, 8407067, 8472603, 8493083, 8509467, 8587291, 8624155, 8632347, 8402972, 8472604, 8493084, 8509468, 8587292, 8624156, 8632348, 8402973, 8472605, 8493085, 8509469, 8591389, 8620061, 8632349, 8398878, 8472606, 8493086, 8509470, 8513566, 8517662, 8521758, 8525854, 8529950, 8534046, 8538142, 8542238, 8546334, 8550430, 8591390, 8620062, 8628254, 8398879, 8472607, 8493087, 8509471, 8591391, 8620063, 8628255, 8398880, 8472608, 8493088, 8509472, 8587296, 8620064, 8628256, 8402977, 8468513, 8488993, 8509473, 8587297, 8620065, 8628257, 8407074, 8411170, 8464418, 8468514, 8488994, 8505378, 8587298, 8620066, 8628258, 8415267, 8464419, 8488995, 8505379, 8583203, 8615971, 8628259, 8419364, 8460324, 8484900, 8505380, 8579108, 8615972, 8628260, 8423461, 8427557, 8480805, 8501285, 8575013, 8611877, 8628261, 8431654, 8435750, 8575014, 8611878, 8632358, 8439847, 8443943, 8570919, 8579111, 8583207, 8611879, 8632359, 8448040, 8452136, 8566824, 8587304, 8591400, 8595496, 8611880, 8632360, 8636456, 8640552, 8644648, 8456233, 8460329, 8599593, 8603689, 8607785, 8611881, 8628265, 8648745, 8464426, 8468522, 8472618, 8615978, 8648746, 8476715, 8480811, 8484907, 8489003, 8493099, 8497195, 8648747, 8501292, 8505388, 8509484, 8513580, 8517676, 8521772, 8525868, 8529964, 8648748, 8534061, 8538157, 8542253, 8546349, 8550445, 8554541, 8558637, 8562733, 8636461, 8640557, 8644653, 8566830, 8570926, 8575022, 8579118, 8583214, 8587310, 8591406, 8595502, 8599598, 8615982, 8620078, 8624174, 8628270, 8632366, 8603695, 8607791, 8611887]
SparseBitmap.PictureAlien4 = [8390656, 8472576, 8476672, 8480768, 8484864, 8488960, 8493056, 8554496, 8558592, 8562688, 8566784, 8570880, 8574976, 8579072, 8583168, 8587264, 8591360, 8595456, 8390657, 8460289, 8464385, 8468481, 8497153, 8550401, 8599553, 8603649, 8607745, 8611841, 8390658, 8456194, 8497154, 8546306, 8615938, 8390659, 8448003, 8452099, 8497155, 8546307, 8620035, 8390660, 8443908, 8497156, 8542212, 8624132, 8390661, 8443909, 8497157, 8542213, 8628229, 8390662, 8435718, 8439814, 8497158, 8542214, 8628230, 8390663, 8431623, 8493063, 8542215, 8632327, 8390664, 8431624, 8493064, 8542216, 8632328, 8427529, 8460297, 8464393, 8468489, 8493065, 8542217, 8632329, 8423434, 8460298, 8464394, 8468490, 8493066, 8542218, 8632330, 8423435, 8464395, 8493067, 8542219, 8562699, 8566795, 8570891, 8636427, 8419340, 8493068, 8542220, 8558604, 8562700, 8566796, 8570892, 8636428, 8419341, 8493069, 8542221, 8558605, 8562701, 8566797, 8570893, 8636429, 8415246, 8439822, 8443918, 8448014, 8493070, 8542222, 8636430, 8415247, 8439823, 8443919, 8448015, 8452111, 8493071, 8542223, 8603663, 8607759, 8636431, 8411152, 8439824, 8443920, 8448016, 8452112, 8493072, 8542224, 8599568, 8603664, 8607760, 8611856, 8636432, 8411153, 8443921, 8448017, 8497169, 8542225, 8599569, 8603665, 8607761, 8611857, 8636433, 8411154, 8497170, 8542226, 8636434, 8407059, 8497171, 8542227, 8640531, 8407060, 8497172, 8542228, 8640532, 8407061, 8497173, 8542229, 8640533, 8407062, 8501270, 8542230, 8636438, 8407063, 8476695, 8501271, 8538135, 8562711, 8636439, 8411160, 8439832, 8443928, 8468504, 8472600, 8501272, 8538136, 8566808, 8636440, 8411161, 8448025, 8452121, 8456217, 8460313, 8464409, 8505369, 8538137, 8570905, 8575001, 8636441, 8411162, 8509466, 8538138, 8579098, 8583194, 8587290, 8607770, 8611866, 8632346, 8415259, 8513563, 8538139, 8591387, 8595483, 8599579, 8603675, 8632347, 8419356, 8513564, 8534044, 8632348, 8419357, 8517661, 8534045, 8628253, 8423454, 8521758, 8529950, 8628254, 8427551, 8525855, 8628255, 8427552, 8624160, 8431649, 8624161, 8435746, 8620066, 8439843, 8615971, 8443940, 8611876, 8448037, 8603685, 8607781, 8452134, 8599590, 8456231, 8460327, 8591399, 8595495, 8464424, 8468520, 8472616, 8583208, 8587304, 8476713, 8579113, 8476714, 8480810, 8575018, 8472619, 8484907, 8566827, 8570923, 8468524, 8489004, 8558636, 8562732, 8575020, 8464429, 8493101, 8550445, 8554541, 8579117, 8460334, 8489006, 8497198, 8546350, 8558638, 8579118, 8456239, 8484911, 8497199, 8542255, 8562735, 8583215, 8452144, 8480816, 8501296, 8538160, 8566832, 8587312, 8448049, 8476721, 8505393, 8534065, 8570929, 8591409, 8443954, 8472626, 8505394, 8534066, 8575026, 8595506, 8439859, 8468531, 8509491, 8529971, 8579123, 8599603, 8603699, 8615987, 8620083, 8624179, 8439860, 8464436, 8513588, 8529972, 8579124, 8607796, 8611892, 8628276, 8439861, 8460341, 8513589, 8529973, 8583221, 8632373, 8435766, 8460342, 8517686, 8529974, 8587318, 8632374, 8431671, 8460343, 8521783, 8525879, 8591415, 8632375, 8427576, 8443960, 8460344, 8595512, 8620088, 8632376, 8427577, 8448057, 8464441, 8595513, 8615993, 8632377, 8431674, 8435770, 8439866, 8464442, 8595514, 8611898, 8628282, 8443963, 8464443, 8599611, 8624187, 8448060, 8452156, 8456252, 8460348, 8599612, 8615996, 8620092, 8603709, 8607805, 8611901]
SparseBitmap.PictureAlien5 = [8390656, 8501248, 8505344, 8509440, 8513536, 8517632, 8521728, 8525824, 8529920, 8534016, 8538112, 8542208, 8546304, 8550400, 8554496, 8558592, 8562688, 8566784, 8570880, 8390657, 8448001, 8452097, 8456193, 8460289, 8464385, 8468481, 8472577, 8476673, 8480769, 8484865, 8488961, 8493057, 8497153, 8501249, 8570881, 8574977, 8579073, 8583169, 8587265, 8591361, 8390658, 8443906, 8505346, 8509442, 8591362, 8595458, 8599554, 8603650, 8390659, 8435715, 8439811, 8509443, 8513539, 8603651, 8607747, 8390660, 8431620, 8607748, 8611844, 8390661, 8427525, 8611845, 8390662, 8427526, 8615942, 8390663, 8427527, 8615943, 8390664, 8427528, 8493064, 8497160, 8501256, 8505352, 8509448, 8513544, 8517640, 8521736, 8525832, 8615944, 8390665, 8427529, 8476681, 8480777, 8484873, 8488969, 8525833, 8529929, 8534025, 8615945, 8390666, 8427530, 8468490, 8472586, 8476682, 8538122, 8542218, 8546314, 8550410, 8554506, 8558602, 8562698, 8566794, 8570890, 8574986, 8615946, 8423435, 8464395, 8468491, 8472587, 8538123, 8542219, 8546315, 8550411, 8579083, 8583179, 8615947, 8419340, 8423436, 8472588, 8476684, 8480780, 8525836, 8529932, 8534028, 8583180, 8587276, 8615948, 8415245, 8419341, 8480781, 8484877, 8488973, 8517645, 8521741, 8525837, 8615949, 8415246, 8488974, 8493070, 8497166, 8509454, 8513550, 8517646, 8615950, 8411151, 8415247, 8439823, 8497167, 8501263, 8505359, 8509455, 8611855, 8411152, 8435728, 8439824, 8534032, 8611856, 8407057, 8435729, 8534033, 8538129, 8566801, 8570897, 8611857, 8407058, 8435730, 8460306, 8534034, 8538130, 8542226, 8562706, 8566802, 8570898, 8611858, 8407059, 8431635, 8435731, 8456211, 8460307, 8488979, 8534035, 8542227, 8546323, 8550419, 8554515, 8558611, 8562707, 8570899, 8574995, 8611859, 8407060, 8427540, 8431636, 8456212, 8480788, 8484884, 8488980, 8534036, 8574996, 8579092, 8611860, 8407061, 8452117, 8456213, 8476693, 8480789, 8488981, 8534037, 8579093, 8611861, 8407062, 8452118, 8472598, 8476694, 8493078, 8534038, 8538134, 8579094, 8583190, 8611862, 8407063, 8443927, 8448023, 8472599, 8493079, 8538135, 8583191, 8611863, 8615959, 8407064, 8411160, 8468504, 8472600, 8493080, 8538136, 8583192, 8615960, 8415257, 8419353, 8423449, 8427545, 8464409, 8468505, 8493081, 8538137, 8583193, 8615961, 8415258, 8427546, 8431642, 8435738, 8464410, 8493082, 8538138, 8583194, 8615962, 8620058, 8411163, 8435739, 8439835, 8460315, 8493083, 8538139, 8583195, 8620059, 8411164, 8439836, 8443932, 8456220, 8460316, 8493084, 8538140, 8583196, 8620060, 8411165, 8443933, 8448029, 8452125, 8456221, 8493085, 8538141, 8583197, 8620061, 8407070, 8439838, 8443934, 8448030, 8452126, 8493086, 8538142, 8583198, 8587294, 8620062, 8407071, 8439839, 8493087, 8538143, 8587295, 8620063, 8407072, 8439840, 8493088, 8542240, 8587296, 8620064, 8407073, 8439841, 8488993, 8542241, 8587297, 8591393, 8620065, 8407074, 8439842, 8488994, 8542242, 8591394, 8615970, 8620066, 8407075, 8411171, 8439843, 8484899, 8488995, 8542243, 8591395, 8615971, 8411172, 8439844, 8476708, 8480804, 8484900, 8488996, 8542244, 8546340, 8550436, 8591396, 8611876, 8615972, 8411173, 8435749, 8472613, 8476709, 8488997, 8542245, 8554533, 8558629, 8591397, 8611877, 8411174, 8435750, 8472614, 8488998, 8542246, 8558630, 8591398, 8607782, 8611878, 8411175, 8415271, 8431655, 8435751, 8472615, 8488999, 8542247, 8558631, 8591399, 8603687, 8607783, 8415272, 8431656, 8472616, 8489000, 8542248, 8558632, 8587304, 8591400, 8599592, 8603688, 8415273, 8431657, 8472617, 8480809, 8484905, 8489001, 8542249, 8558633, 8587305, 8595497, 8599593, 8415274, 8431658, 8472618, 8476714, 8480810, 8489002, 8542250, 8546346, 8550442, 8554538, 8558634, 8583210, 8587306, 8591402, 8595498, 8415275, 8419371, 8423467, 8427563, 8431659, 8489003, 8542251, 8550443, 8554539, 8583211, 8587307, 8591403, 8427564, 8431660, 8489004, 8542252, 8583212, 8587308, 8493101, 8542253, 8579117, 8583213, 8493102, 8542254, 8493103, 8517679, 8521775, 8525871, 8542255, 8493104, 8509488, 8513584, 8517680, 8542256, 8493105, 8509489, 8542257, 8493106, 8497202, 8542258, 8497203, 8542259, 8497204, 8542260, 8497205, 8542261, 8497206, 8538166, 8497207, 8538167, 8497208, 8538168, 8501305, 8538169, 8501306, 8538170, 8501307, 8505403, 8538171, 8505404, 8538172, 8505405, 8509501, 8538173, 8509502, 8534078, 8538174, 8513599, 8517695, 8521791, 8525887, 8529983, 8534079]
SparseBitmap.PictureAlien6 = [8390656, 8443904, 8448000, 8452096, 8456192, 8460288, 8464384, 8468480, 8472576, 8476672, 8480768, 8484864, 8488960, 8493056, 8497152, 8501248, 8505344, 8509440, 8513536, 8517632, 8521728, 8525824, 8529920, 8534016, 8538112, 8542208, 8546304, 8550400, 8554496, 8558592, 8562688, 8566784, 8570880, 8574976, 8579072, 8583168, 8390657, 8439809, 8587265, 8591361, 8595457, 8599553, 8603649, 8607745, 8611841, 8615937, 8620033, 8390658, 8402946, 8435714, 8624130, 8628226, 8390659, 8407043, 8431619, 8456195, 8460291, 8464387, 8468483, 8472579, 8476675, 8480771, 8484867, 8488963, 8493059, 8632323, 8390660, 8411140, 8415236, 8431620, 8452100, 8456196, 8497156, 8501252, 8505348, 8509444, 8636420, 8390661, 8419333, 8423429, 8427525, 8448005, 8513541, 8517637, 8640517, 8390662, 8427526, 8448006, 8521734, 8640518, 8390663, 8419335, 8423431, 8427527, 8448007, 8521735, 8636423, 8390664, 8402952, 8407048, 8411144, 8415240, 8427528, 8448008, 8521736, 8636424, 8390665, 8427529, 8448009, 8521737, 8636425, 8390666, 8427530, 8448010, 8525834, 8636426, 8390667, 8419339, 8423435, 8427531, 8448011, 8525835, 8636427, 8390668, 8415244, 8427532, 8448012, 8525836, 8636428, 8390669, 8411149, 8427533, 8448013, 8525837, 8636429, 8390670, 8407054, 8427534, 8448014, 8521742, 8636430, 8390671, 8427535, 8443919, 8521743, 8632335, 8390672, 8427536, 8443920, 8509456, 8513552, 8517648, 8632336, 8390673, 8423441, 8427537, 8448017, 8452113, 8456209, 8460305, 8464401, 8468497, 8472593, 8476689, 8480785, 8484881, 8488977, 8493073, 8497169, 8501265, 8505361, 8632337, 8390674, 8419346, 8427538, 8628242, 8390675, 8415251, 8427539, 8624147, 8390676, 8411156, 8427540, 8484884, 8488980, 8493076, 8497172, 8501268, 8505364, 8509460, 8513556, 8517652, 8521748, 8525844, 8529940, 8534036, 8538132, 8542228, 8546324, 8550420, 8554516, 8558612, 8562708, 8566804, 8570900, 8574996, 8579092, 8583188, 8587284, 8591380, 8595476, 8599572, 8603668, 8607764, 8611860, 8615956, 8620052, 8390677, 8427541, 8480789, 8390678, 8427542, 8480790, 8390679, 8419351, 8423447, 8427543, 8484887, 8488983, 8493079, 8497175, 8501271, 8505367, 8509463, 8513559, 8517655, 8521751, 8525847, 8529943, 8534039, 8538135, 8542231, 8546327, 8550423, 8554519, 8558615, 8562711, 8566807, 8570903, 8390680, 8411160, 8415256, 8427544, 8575000, 8390681, 8402969, 8407065, 8427545, 8579097, 8390682, 8431642, 8579098, 8624154, 8628250, 8390683, 8435739, 8509467, 8513563, 8517659, 8521755, 8525851, 8529947, 8534043, 8538139, 8542235, 8546331, 8550427, 8554523, 8558619, 8562715, 8566811, 8570907, 8575003, 8624155, 8628251, 8390684, 8439836, 8443932, 8448028, 8452124, 8456220, 8460316, 8464412, 8468508, 8472604, 8476700, 8480796, 8484892, 8488988, 8493084, 8497180, 8501276, 8505372, 8624156, 8632348, 8620061, 8632349, 8620062, 8632350, 8615967, 8632351, 8497184, 8501280, 8505376, 8509472, 8513568, 8517664, 8521760, 8525856, 8529952, 8534048, 8538144, 8542240, 8546336, 8550432, 8554528, 8558624, 8562720, 8566816, 8570912, 8615968, 8632352, 8431649, 8435745, 8439841, 8443937, 8448033, 8452129, 8456225, 8460321, 8464417, 8468513, 8472609, 8476705, 8480801, 8484897, 8488993, 8493089, 8575009, 8579105, 8583201, 8587297, 8591393, 8595489, 8599585, 8603681, 8607777, 8611873, 8632353, 8423458, 8427554, 8632354, 8419363, 8628259, 8419364, 8628260, 8419365, 8628261, 8419366, 8628262, 8640550, 8644646, 8419367, 8628263, 8632359, 8636455, 8419368, 8628264, 8423465, 8628265, 8423466, 8628266, 8423467, 8628267, 8632363, 8423468, 8628268, 8636460, 8640556, 8427565, 8624173, 8644653, 8427566, 8624174, 8427567, 8534063, 8538159, 8542255, 8546351, 8550447, 8554543, 8558639, 8562735, 8624175, 8431664, 8566832, 8570928, 8624176, 8628272, 8632368, 8636464, 8431665, 8575025, 8624177, 8640561, 8644657, 8431666, 8579122, 8624178, 8431667, 8583219, 8624179, 8435764, 8587316, 8591412, 8624180, 8435765, 8620085, 8640565, 8644661, 8439862, 8443958, 8448054, 8452150, 8456246, 8460342, 8464438, 8468534, 8472630, 8476726, 8480822, 8484918, 8489014, 8493110, 8497206, 8501302, 8505398, 8509494, 8620086, 8624182, 8628278, 8632374, 8636470, 8513591, 8517687, 8521783, 8525879, 8620087, 8529976, 8534072, 8538168, 8542264, 8620088, 8546361, 8550457, 8554553, 8615993, 8624185, 8628281, 8632377, 8636473, 8640569, 8558650, 8615994, 8644666, 8443963, 8448059, 8452155, 8456251, 8460347, 8464443, 8468539, 8472635, 8476731, 8480827, 8484923, 8489019, 8493115, 8497211, 8501307, 8505403, 8509499, 8513595, 8517691, 8521787, 8525883, 8529979, 8534075, 8538171, 8542267, 8546363, 8550459, 8554555, 8615995, 8439868, 8611900, 8615996, 8620092, 8439869, 8611901, 8624189, 8628285, 8443966, 8448062, 8611902, 8632382, 8452159, 8456255, 8460351, 8464447, 8468543, 8472639, 8476735, 8480831, 8484927, 8489023, 8493119, 8497215, 8501311, 8505407, 8509503, 8513599, 8517695, 8521791, 8525887, 8529983, 8534079, 8538175, 8542271, 8546367, 8550463, 8554559, 8558655, 8562751, 8566847, 8570943, 8575039, 8579135, 8583231, 8587327, 8591423, 8595519, 8599615, 8603711, 8607807]
SparseBitmap.PictureAlien7 = [8390656, 8505344, 8517632, 8521728, 8390657, 8505345, 8509441, 8513537, 8390658, 8501250, 8509442, 8513538, 8517634, 8521730, 8390659, 8431619, 8435715, 8439811, 8443907, 8448003, 8452099, 8456195, 8460291, 8464387, 8468483, 8497155, 8513539, 8390660, 8423428, 8427524, 8472580, 8476676, 8497156, 8509444, 8517636, 8521732, 8525828, 8390661, 8419333, 8480773, 8484869, 8488965, 8493061, 8509445, 8390662, 8415238, 8509446, 8390663, 8411143, 8513543, 8517639, 8521735, 8411144, 8525832, 8529928, 8534024, 8538120, 8542216, 8411145, 8546313, 8550409, 8407050, 8554506, 8632330, 8407051, 8558603, 8620043, 8628235, 8640523, 8407052, 8562700, 8620044, 8628236, 8636428, 8407053, 8566797, 8620045, 8624141, 8628237, 8632333, 8407054, 8439822, 8443918, 8448014, 8452110, 8456206, 8570894, 8615950, 8628238, 8632334, 8636430, 8402959, 8435727, 8460303, 8464399, 8574991, 8615951, 8628239, 8640527, 8402960, 8431632, 8464400, 8468496, 8472592, 8476688, 8579088, 8611856, 8624144, 8402961, 8427537, 8464401, 8480785, 8484881, 8488977, 8583185, 8603665, 8607761, 8624145, 8402962, 8423442, 8464402, 8476690, 8493074, 8497170, 8501266, 8505362, 8587282, 8591378, 8595474, 8599570, 8620050, 8402963, 8419347, 8464403, 8476691, 8509459, 8513555, 8611859, 8615955, 8402964, 8419348, 8464404, 8476692, 8517652, 8521748, 8603668, 8607764, 8402965, 8415253, 8464405, 8476693, 8525845, 8595477, 8599573, 8407062, 8415254, 8460310, 8476694, 8529942, 8603670, 8407063, 8411159, 8452119, 8456215, 8460311, 8472599, 8534039, 8538135, 8603671, 8448024, 8460312, 8464408, 8472600, 8534040, 8542232, 8607768, 8611864, 8456217, 8464409, 8468505, 8472601, 8529945, 8546329, 8615961, 8452122, 8464410, 8472602, 8521754, 8525850, 8550426, 8620058, 8460315, 8472603, 8513563, 8517659, 8546331, 8554523, 8558619, 8562715, 8620059, 8472604, 8505372, 8509468, 8538140, 8542236, 8566812, 8624156, 8497181, 8501277, 8505373, 8529949, 8534045, 8570909, 8624157, 8493086, 8505374, 8509470, 8521758, 8525854, 8570910, 8624158, 8501279, 8509471, 8513567, 8517663, 8575007, 8624159, 8497184, 8509472, 8521760, 8575008, 8624160, 8448033, 8452129, 8456225, 8505377, 8521761, 8570913, 8624161, 8431650, 8435746, 8439842, 8443938, 8460322, 8505378, 8570914, 8624162, 8427555, 8464419, 8566819, 8624163, 8423460, 8464420, 8566820, 8579108, 8620068, 8423461, 8443941, 8448037, 8452133, 8456229, 8468517, 8493093, 8505381, 8517669, 8566821, 8579109, 8620069, 8419366, 8439846, 8460326, 8468518, 8497190, 8505382, 8513574, 8566822, 8583206, 8587302, 8607782, 8620070, 8419367, 8435751, 8472615, 8501287, 8505383, 8509479, 8570919, 8591399, 8595495, 8599591, 8603687, 8615975, 8419368, 8431656, 8472616, 8497192, 8501288, 8505384, 8509480, 8570920, 8611880, 8419369, 8431657, 8476713, 8497193, 8509481, 8554537, 8575017, 8611881, 8419370, 8480810, 8493098, 8509482, 8546346, 8558634, 8579114, 8583210, 8607786, 8423467, 8480811, 8493099, 8509483, 8550443, 8554539, 8558635, 8587307, 8591403, 8595499, 8599595, 8603691, 8423468, 8480812, 8484908, 8489004, 8509484, 8542252, 8546348, 8550444, 8554540, 8558636, 8562732, 8648748, 8427565, 8484909, 8509485, 8550445, 8562733, 8644653, 8648749, 8427566, 8509486, 8554542, 8566830, 8640558, 8648750, 8431663, 8435759, 8505391, 8509487, 8554543, 8570927, 8636463, 8648751, 8439856, 8443952, 8513584, 8558640, 8575024, 8632368, 8648752, 8448049, 8452145, 8513585, 8517681, 8562737, 8575025, 8628273, 8648753, 8456242, 8460338, 8464434, 8521778, 8525874, 8529970, 8562738, 8579122, 8620082, 8624178, 8644658, 8468531, 8529971, 8534067, 8538163, 8542259, 8546355, 8550451, 8554547, 8558643, 8583219, 8603699, 8607795, 8611891, 8615987, 8644659, 8464436, 8472628, 8562740, 8587316, 8591412, 8595508, 8599604, 8640564, 8460341, 8476725, 8566837, 8636469, 8452150, 8456246, 8480822, 8632374, 8435767, 8448055, 8476727, 8484919, 8628279, 8439864, 8443960, 8468536, 8472632, 8489016, 8624184, 8443961, 8448057, 8456249, 8460345, 8464441, 8493113, 8497209, 8501305, 8615993, 8620089, 8439866, 8443962, 8448058, 8452154, 8505402, 8509498, 8513594, 8517690, 8521786, 8525882, 8607802, 8611898, 8435771, 8448059, 8525883, 8529979, 8534075, 8575035, 8579131, 8583227, 8587323, 8591419, 8595515, 8599611, 8603707, 8448060, 8538172, 8542268, 8546364, 8550460, 8554556, 8558652, 8562748, 8566844, 8570940, 8591420, 8525885, 8529981, 8534077, 8538173, 8587325, 8534078, 8538174, 8562750, 8566846, 8570942, 8575038, 8579134, 8583230, 8529983, 8534079, 8538175, 8542271, 8546367, 8550463, 8554559, 8558655]
SparseBitmap.PictureAlien8 = [8390656, 8525824, 8390657, 8402945, 8472577, 8521729, 8525825, 8632321, 8636417, 8390658, 8398850, 8407042, 8468482, 8476674, 8517634, 8525826, 8628226, 8640514, 8390659, 8398851, 8411139, 8468483, 8476675, 8517635, 8525827, 8628227, 8636419, 8390660, 8398852, 8415236, 8468484, 8476676, 8513540, 8525828, 8624132, 8636420, 8390661, 8402949, 8415237, 8464389, 8476677, 8509445, 8521733, 8624133, 8636421, 8402950, 8419334, 8464390, 8476678, 8509446, 8521734, 8620038, 8632326, 8407047, 8419335, 8464391, 8476679, 8505351, 8521735, 8620039, 8632327, 8407048, 8423432, 8464392, 8476680, 8505352, 8517640, 8620040, 8632328, 8407049, 8423433, 8464393, 8476681, 8505353, 8517641, 8615945, 8628233, 8407050, 8427530, 8464394, 8476682, 8505354, 8517642, 8615946, 8628234, 8411147, 8427531, 8460299, 8476683, 8505355, 8517643, 8615947, 8628235, 8411148, 8431628, 8460300, 8476684, 8505356, 8517644, 8615948, 8628236, 8411149, 8431629, 8460301, 8476685, 8505357, 8517645, 8615949, 8628237, 8411150, 8431630, 8460302, 8476686, 8505358, 8517646, 8570894, 8574990, 8579086, 8611854, 8628238, 8411151, 8435727, 8460303, 8476687, 8505359, 8517647, 8562703, 8566799, 8583183, 8587279, 8611855, 8624143, 8411152, 8435728, 8460304, 8476688, 8505360, 8517648, 8558608, 8591376, 8611856, 8624144, 8411153, 8435729, 8460305, 8476689, 8505361, 8517649, 8554513, 8595473, 8611857, 8624145, 8411154, 8439826, 8460306, 8476690, 8505362, 8517650, 8550418, 8599570, 8611858, 8624146, 8411155, 8439827, 8460307, 8476691, 8505363, 8517651, 8550419, 8570899, 8574995, 8599571, 8611859, 8624147, 8415252, 8439828, 8464404, 8476692, 8505364, 8517652, 8546324, 8566804, 8579092, 8599572, 8611860, 8624148, 8415253, 8443925, 8464405, 8480789, 8505365, 8517653, 8546325, 8562709, 8583189, 8603669, 8611861, 8624149, 8415254, 8443926, 8464406, 8480790, 8505366, 8517654, 8546326, 8562710, 8587286, 8603670, 8611862, 8624150, 8419351, 8443927, 8464407, 8480791, 8505367, 8517655, 8546327, 8558615, 8587287, 8603671, 8611863, 8624151, 8419352, 8443928, 8464408, 8480792, 8505368, 8517656, 8546328, 8558616, 8587288, 8603672, 8611864, 8624152, 8419353, 8448025, 8464409, 8480793, 8505369, 8521753, 8546329, 8558617, 8587289, 8603673, 8611865, 8624153, 8419354, 8448026, 8464410, 8480794, 8501274, 8521754, 8546330, 8558618, 8587290, 8603674, 8611866, 8624154, 8419355, 8448027, 8464411, 8480795, 8501275, 8521755, 8546331, 8558619, 8587291, 8603675, 8611867, 8624155, 8423452, 8448028, 8464412, 8480796, 8501276, 8521756, 8546332, 8562716, 8587292, 8607772, 8624156, 8423453, 8452125, 8464413, 8480797, 8501277, 8521757, 8546333, 8562717, 8591389, 8607773, 8624157, 8423454, 8452126, 8464414, 8480798, 8497182, 8525854, 8550430, 8562718, 8591390, 8607774, 8624158, 8423455, 8452127, 8464415, 8480799, 8497183, 8525855, 8550431, 8562719, 8591391, 8607775, 8628255, 8423456, 8452128, 8464416, 8480800, 8497184, 8525856, 8554528, 8562720, 8591392, 8628256, 8423457, 8452129, 8464417, 8480801, 8493089, 8525857, 8554529, 8562721, 8591393, 8628257, 8423458, 8452130, 8460322, 8480802, 8493090, 8525858, 8558626, 8591394, 8628258, 8423459, 8452131, 8460323, 8484899, 8493091, 8525859, 8558627, 8591395, 8628259, 8423460, 8452132, 8460324, 8484900, 8493092, 8525860, 8591396, 8628260, 8423461, 8452133, 8460325, 8488997, 8525861, 8587301, 8628261, 8423462, 8452134, 8460326, 8488998, 8525862, 8583206, 8587302, 8632358, 8423463, 8456231, 8488999, 8521767, 8579111, 8591399, 8595495, 8599591, 8632359, 8423464, 8456232, 8489000, 8517672, 8570920, 8575016, 8615976, 8620072, 8632360, 8423465, 8517673, 8566825, 8624169, 8628265, 8632361, 8423466, 8513578, 8562730, 8632362, 8636458, 8427563, 8472619, 8476715, 8480811, 8505387, 8509483, 8513579, 8558635, 8640555, 8431660, 8460332, 8464428, 8468524, 8517676, 8558636, 8640556, 8431661, 8435757, 8439853, 8521773, 8558637, 8640557, 8431662, 8525870, 8558638, 8644654, 8427567, 8529967, 8554543, 8644655, 8427568, 8534064, 8554544, 8644656, 8423473, 8534065, 8554545, 8644657, 8423474, 8538162, 8554546, 8648754, 8419379, 8538163, 8554547, 8648755, 8419380, 8538164, 8558644, 8648756, 8419381, 8538165, 8558645, 8648757, 8419382, 8538166, 8558646, 8595510, 8599606, 8644662, 8419383, 8538167, 8558647, 8591415, 8595511, 8599607, 8603703, 8607799, 8644663, 8419384, 8439864, 8443960, 8448056, 8538168, 8558648, 8591416, 8595512, 8599608, 8603704, 8607800, 8644664, 8419385, 8439865, 8443961, 8448057, 8452153, 8538169, 8562745, 8591417, 8595513, 8599609, 8603705, 8607801, 8644665, 8419386, 8439866, 8443962, 8448058, 8452154, 8538170, 8562746, 8595514, 8599610, 8603706, 8607802, 8640570, 8423483, 8443963, 8448059, 8452155, 8534075, 8566843, 8599611, 8603707, 8640571, 8423484, 8529980, 8566844, 8636476, 8427581, 8431677, 8521789, 8525885, 8570941, 8632381, 8435774, 8439870, 8505406, 8509502, 8513598, 8517694, 8575038, 8624190, 8628286, 8443967, 8448063, 8452159, 8456255, 8460351, 8464447, 8468543, 8472639, 8476735, 8480831, 8484927, 8489023, 8493119, 8497215, 8501311, 8579135, 8583231, 8587327, 8591423, 8595519, 8599615, 8603711, 8607807, 8611903, 8615999, 8620095]
SparseBitmap.PictureAlien9 = [8390656, 8390657, 8521729, 8525825, 8390658, 8517634, 8529922, 8390659, 8513539, 8534019, 8390660, 8509444, 8534020, 8390661, 8468485, 8472581, 8476677, 8480773, 8484869, 8488965, 8493061, 8497157, 8501253, 8505349, 8538117, 8542213, 8546309, 8390662, 8456198, 8460294, 8464390, 8505350, 8538118, 8550406, 8554502, 8558598, 8390663, 8448007, 8452103, 8501255, 8538119, 8562695, 8566791, 8390664, 8443912, 8501256, 8542216, 8570888, 8574984, 8579080, 8583176, 8587272, 8591368, 8390665, 8439817, 8595465, 8599561, 8603657, 8607753, 8611849, 8390666, 8435722, 8615946, 8620042, 8390667, 8431627, 8624139, 8390668, 8431628, 8628236, 8390669, 8427533, 8632333, 8390670, 8423438, 8636430, 8390671, 8419343, 8640527, 8390672, 8419344, 8640528, 8390673, 8415249, 8644625, 8390674, 8415250, 8501266, 8505362, 8509458, 8513554, 8517650, 8521746, 8525842, 8529938, 8534034, 8644626, 8390675, 8411155, 8497171, 8538131, 8542227, 8546323, 8644627, 8390676, 8411156, 8493076, 8550420, 8648724, 8390677, 8407061, 8488981, 8554517, 8648725, 8390678, 8407062, 8484886, 8558614, 8648726, 8390679, 8407063, 8480791, 8558615, 8648727, 8390680, 8407064, 8480792, 8562712, 8648728, 8390681, 8407065, 8480793, 8566809, 8648729, 8390682, 8407066, 8476698, 8566810, 8648730, 8390683, 8407067, 8476699, 8566811, 8648731, 8390684, 8407068, 8476700, 8570908, 8648732, 8390685, 8407069, 8476701, 8570909, 8644637, 8390686, 8407070, 8476702, 8517662, 8521758, 8570910, 8644638, 8390687, 8407071, 8480799, 8513567, 8525855, 8570911, 8644639, 8390688, 8411168, 8480800, 8513568, 8529952, 8566816, 8644640, 8390689, 8411169, 8480801, 8509473, 8534049, 8566817, 8644641, 8390690, 8411170, 8480802, 8509474, 8534050, 8562722, 8644642, 8390691, 8411171, 8484899, 8505379, 8538147, 8554531, 8558627, 8640547, 8390692, 8411172, 8488996, 8493092, 8497188, 8501284, 8542244, 8546340, 8550436, 8640548, 8390693, 8415269, 8640549, 8390694, 8415270, 8448038, 8636454, 8419367, 8476711, 8562727, 8636455, 8419368, 8632360, 8423465, 8628265, 8427562, 8591402, 8628266, 8427563, 8624171, 8431660, 8464428, 8566828, 8620076, 8431661, 8615981, 8435758, 8439854, 8607790, 8611886, 8439855, 8443951, 8603695, 8611887, 8439856, 8448048, 8452144, 8456240, 8591408, 8595504, 8599600, 8615984, 8435761, 8456241, 8460337, 8464433, 8484913, 8517681, 8534065, 8566833, 8579121, 8583217, 8587313, 8591409, 8620081, 8431666, 8464434, 8468530, 8489010, 8513586, 8538162, 8566834, 8570930, 8575026, 8624178, 8427571, 8472627, 8476723, 8480819, 8484915, 8489011, 8513587, 8517683, 8521779, 8525875, 8529971, 8534067, 8538163, 8562739, 8624179, 8427572, 8493108, 8509492, 8542260, 8546356, 8558644, 8628276, 8427573, 8493109, 8505397, 8546357, 8558645, 8628277, 8423478, 8489014, 8505398, 8546358, 8558646, 8628278, 8632374, 8636470, 8411191, 8415287, 8419383, 8427575, 8484919, 8505399, 8546359, 8562743, 8566839, 8624183, 8640567, 8407096, 8431672, 8480824, 8505400, 8542264, 8570936, 8575032, 8620088, 8644664, 8403001, 8431673, 8476729, 8509497, 8542265, 8579129, 8615993, 8644665, 8403002, 8431674, 8472634, 8509498, 8538170, 8579130, 8615994, 8644666, 8403003, 8431675, 8472635, 8513595, 8538171, 8579131, 8620091, 8640571, 8407100, 8411196, 8423484, 8427580, 8472636, 8513596, 8538172, 8579132, 8624188, 8628284, 8632380, 8636476, 8415293, 8419389, 8476733, 8505405, 8509501, 8542269, 8575037, 8480830, 8484926, 8489022, 8493118, 8497214, 8501310, 8546366, 8550462, 8554558, 8558654, 8562750, 8566846, 8570942]
SparseBitmap.LargeTrue = [8255455, 8259551, 8263647, 8267743, 8271839, 8275935, 8280031, 8284127, 8288223, 8292319, 8296415, 8300511, 8304607, 8308703, 8312799, 8316895, 8320991, 8325087, 8329183, 8333279, 8337375, 8341471, 8345567, 8349663, 8353759, 8357855, 8361951, 8366047, 8370143, 8374239, 8378335, 8382431, 8386527, 8390623, 8394719, 8398815, 8402911, 8407007, 8411103, 8415199, 8419295, 8423391, 8427487, 8431583, 8435679, 8439775, 8443871, 8447967, 8452063, 8456159, 8460255, 8464351, 8468447, 8472543, 8476639, 8480735, 8484831, 8488927, 8493023, 8497119, 8501215, 8505311, 8509407, 8513503, 8517599, 8255456, 8517600, 8255457, 8517601, 8255458, 8517602, 8255459, 8517603, 8255460, 8517604, 8255461, 8517605, 8255462, 8517606, 8255463, 8517607, 8255464, 8517608, 8255465, 8517609, 8255466, 8517610, 8255467, 8517611, 8255468, 8517612, 8255469, 8517613, 8255470, 8517614, 8255471, 8517615, 8255472, 8517616, 8255473, 8517617, 8255474, 8517618, 8255475, 8517619, 8255476, 8517620, 8255477, 8517621, 8255478, 8517622, 8255479, 8353783, 8357879, 8361975, 8366071, 8370167, 8374263, 8378359, 8382455, 8386551, 8390647, 8394743, 8398839, 8402935, 8407031, 8411127, 8415223, 8419319, 8517623, 8255480, 8353784, 8419320, 8517624, 8255481, 8353785, 8419321, 8517625, 8255482, 8353786, 8419322, 8517626, 8255483, 8353787, 8419323, 8517627, 8255484, 8353788, 8419324, 8517628, 8255485, 8353789, 8419325, 8517629, 8255486, 8353790, 8419326, 8517630, 8255487, 8353791, 8419327, 8517631, 8255488, 8353792, 8419328, 8517632, 8255489, 8353793, 8419329, 8517633, 8255490, 8353794, 8419330, 8517634, 8255491, 8353795, 8419331, 8517635, 8255492, 8353796, 8419332, 8517636, 8255493, 8353797, 8419333, 8517637, 8255494, 8353798, 8419334, 8517638, 8255495, 8353799, 8419335, 8423431, 8427527, 8431623, 8435719, 8439815, 8443911, 8448007, 8452103, 8456199, 8460295, 8464391, 8468487, 8472583, 8476679, 8480775, 8484871, 8488967, 8493063, 8497159, 8501255, 8505351, 8509447, 8513543, 8517639, 8255496, 8353800, 8255497, 8353801, 8255498, 8353802, 8255499, 8353803, 8255500, 8353804, 8255501, 8353805, 8255502, 8353806, 8255503, 8353807, 8255504, 8353808, 8255505, 8353809, 8255506, 8353810, 8255507, 8353811, 8255508, 8353812, 8255509, 8353813, 8255510, 8353814, 8255511, 8353815, 8255512, 8353816, 8255513, 8353817, 8255514, 8353818, 8255515, 8353819, 8255516, 8353820, 8255517, 8353821, 8255518, 8353822, 8255519, 8259615, 8263711, 8267807, 8271903, 8275999, 8280095, 8284191, 8288287, 8292383, 8296479, 8300575, 8304671, 8308767, 8312863, 8316959, 8321055, 8325151, 8329247, 8333343, 8337439, 8341535, 8345631, 8349727, 8353823]
SparseBitmap.LargeFalse = [8255455, 8259551, 8263647, 8267743, 8271839, 8275935, 8280031, 8284127, 8288223, 8292319, 8296415, 8300511, 8304607, 8308703, 8312799, 8316895, 8320991, 8325087, 8329183, 8333279, 8337375, 8341471, 8345567, 8349663, 8353759, 8357855, 8361951, 8366047, 8370143, 8374239, 8378335, 8382431, 8386527, 8390623, 8394719, 8398815, 8402911, 8407007, 8411103, 8415199, 8419295, 8423391, 8427487, 8431583, 8435679, 8439775, 8443871, 8447967, 8452063, 8456159, 8460255, 8464351, 8468447, 8472543, 8476639, 8480735, 8484831, 8488927, 8493023, 8497119, 8501215, 8505311, 8509407, 8513503, 8517599, 8255456, 8517600, 8255457, 8517601, 8255458, 8517602, 8255459, 8517603, 8255460, 8517604, 8255461, 8517605, 8255462, 8517606, 8255463, 8517607, 8255464, 8517608, 8255465, 8517609, 8255466, 8517610, 8255467, 8517611, 8255468, 8517612, 8255469, 8517613, 8255470, 8517614, 8255471, 8517615, 8255472, 8517616, 8255473, 8517617, 8255474, 8517618, 8255475, 8517619, 8255476, 8517620, 8255477, 8517621, 8255478, 8517622, 8255479, 8353783, 8357879, 8361975, 8366071, 8370167, 8374263, 8378359, 8382455, 8386551, 8390647, 8394743, 8398839, 8402935, 8407031, 8411127, 8415223, 8419319, 8423415, 8427511, 8431607, 8435703, 8439799, 8443895, 8447991, 8452087, 8456183, 8460279, 8464375, 8468471, 8472567, 8476663, 8480759, 8484855, 8488951, 8493047, 8497143, 8501239, 8505335, 8509431, 8513527, 8517623, 8255480, 8353784, 8255481, 8353785, 8255482, 8353786, 8255483, 8353787, 8255484, 8353788, 8255485, 8353789, 8255486, 8353790, 8255487, 8353791, 8255488, 8353792, 8255489, 8353793, 8255490, 8353794, 8255491, 8353795, 8255492, 8353796, 8255493, 8353797, 8255494, 8353798, 8255495, 8353799, 8255496, 8353800, 8255497, 8353801, 8255498, 8353802, 8255499, 8353803, 8255500, 8353804, 8255501, 8353805, 8255502, 8353806, 8255503, 8353807, 8255504, 8353808, 8456208, 8460304, 8464400, 8468496, 8472592, 8476688, 8480784, 8484880, 8488976, 8493072, 8497168, 8501264, 8505360, 8509456, 8513552, 8517648, 8255505, 8353809, 8456209, 8517649, 8255506, 8353810, 8456210, 8517650, 8255507, 8353811, 8456211, 8517651, 8255508, 8353812, 8456212, 8517652, 8255509, 8353813, 8456213, 8517653, 8255510, 8353814, 8456214, 8517654, 8255511, 8353815, 8456215, 8517655, 8255512, 8353816, 8456216, 8517656, 8255513, 8353817, 8456217, 8517657, 8255514, 8353818, 8456218, 8517658, 8255515, 8353819, 8456219, 8517659, 8255516, 8353820, 8456220, 8517660, 8255517, 8353821, 8456221, 8517661, 8255518, 8353822, 8456222, 8517662, 8255519, 8259615, 8263711, 8267807, 8271903, 8275999, 8280095, 8284191, 8288287, 8292383, 8296479, 8300575, 8304671, 8308767, 8312863, 8316959, 8321055, 8325151, 8329247, 8333343, 8337439, 8341535, 8345631, 8349727, 8353823, 8456223, 8460319, 8464415, 8468511, 8472607, 8476703, 8480799, 8484895, 8488991, 8493087, 8497183, 8501279, 8505375, 8509471, 8513567, 8517663]
SparseBitmap.LargeHeatMax = [8255455, 8259551, 8263647, 8267743, 8271839, 8275935, 8280031, 8284127, 8288223, 8292319, 8296415, 8300511, 8304607, 8308703, 8312799, 8316895, 8320991, 8325087, 8456159, 8460255, 8464351, 8468447, 8472543, 8476639, 8480735, 8484831, 8488927, 8493023, 8497119, 8501215, 8505311, 8509407, 8513503, 8517599, 8255456, 8329184, 8456160, 8517600, 8255457, 8333281, 8456161, 8517601, 8255458, 8337378, 8456162, 8517602, 8255459, 8341475, 8456163, 8517603, 8255460, 8345572, 8456164, 8517604, 8255461, 8349669, 8456165, 8517605, 8255462, 8353766, 8456166, 8517606, 8255463, 8357863, 8456167, 8517607, 8255464, 8361960, 8456168, 8517608, 8255465, 8366057, 8456169, 8517609, 8255466, 8370154, 8456170, 8517610, 8255467, 8374251, 8456171, 8517611, 8255468, 8378348, 8456172, 8517612, 8255469, 8382445, 8456173, 8517613, 8255470, 8386542, 8456174, 8517614, 8255471, 8390639, 8456175, 8517615, 8255472, 8394736, 8456176, 8517616, 8255473, 8398833, 8456177, 8517617, 8255474, 8402930, 8456178, 8517618, 8255475, 8407027, 8456179, 8517619, 8255476, 8411124, 8456180, 8517620, 8255477, 8415221, 8456181, 8517621, 8255478, 8419318, 8456182, 8517622, 8255479, 8259575, 8263671, 8267767, 8271863, 8275959, 8280055, 8284151, 8288247, 8292343, 8419319, 8456183, 8517623, 8292344, 8419320, 8456184, 8517624, 8292345, 8419321, 8456185, 8517625, 8292346, 8419322, 8456186, 8517626, 8292347, 8419323, 8456187, 8517627, 8292348, 8419324, 8456188, 8517628, 8292349, 8419325, 8456189, 8517629, 8292350, 8419326, 8456190, 8517630, 8292351, 8419327, 8456191, 8517631, 8292352, 8419328, 8456192, 8517632, 8292353, 8419329, 8456193, 8517633, 8292354, 8419330, 8456194, 8517634, 8292355, 8419331, 8456195, 8517635, 8292356, 8419332, 8456196, 8517636, 8292357, 8419333, 8456197, 8517637, 8292358, 8419334, 8456198, 8517638, 8255495, 8259591, 8263687, 8267783, 8271879, 8275975, 8280071, 8284167, 8288263, 8292359, 8419335, 8456199, 8517639, 8255496, 8419336, 8456200, 8517640, 8255497, 8415241, 8456201, 8517641, 8255498, 8411146, 8456202, 8517642, 8255499, 8407051, 8456203, 8517643, 8255500, 8402956, 8456204, 8517644, 8255501, 8398861, 8456205, 8517645, 8255502, 8394766, 8456206, 8517646, 8255503, 8390671, 8456207, 8517647, 8255504, 8386576, 8456208, 8517648, 8255505, 8382481, 8456209, 8517649, 8255506, 8378386, 8456210, 8517650, 8255507, 8374291, 8456211, 8517651, 8255508, 8370196, 8456212, 8517652, 8255509, 8366101, 8456213, 8517653, 8255510, 8362006, 8456214, 8517654, 8255511, 8357911, 8456215, 8517655, 8255512, 8353816, 8456216, 8517656, 8255513, 8349721, 8456217, 8517657, 8255514, 8345626, 8456218, 8517658, 8255515, 8341531, 8456219, 8517659, 8255516, 8337436, 8456220, 8517660, 8255517, 8333341, 8456221, 8517661, 8255518, 8329246, 8456222, 8517662, 8255519, 8259615, 8263711, 8267807, 8271903, 8275999, 8280095, 8284191, 8288287, 8292383, 8296479, 8300575, 8304671, 8308767, 8312863, 8316959, 8321055, 8325151, 8456223, 8460319, 8464415, 8468511, 8472607, 8476703, 8480799, 8484895, 8488991, 8493087, 8497183, 8501279, 8505375, 8509471, 8513567, 8517663]
SparseBitmap.LargeThruster = [8292319, 8296415, 8300511, 8304607, 8308703, 8312799, 8316895, 8320991, 8325087, 8329183, 8333279, 8337375, 8341471, 8345567, 8349663, 8353759, 8357855, 8361951, 8366047, 8370143, 8374239, 8378335, 8382431, 8386527, 8390623, 8394719, 8398815, 8402911, 8407007, 8411103, 8415199, 8419295, 8423391, 8427487, 8431583, 8435679, 8439775, 8443871, 8447967, 8452063, 8456159, 8460255, 8464351, 8468447, 8472543, 8476639, 8480735, 8292320, 8480736, 8292321, 8480737, 8292322, 8480738, 8292323, 8480739, 8292324, 8480740, 8292325, 8480741, 8292326, 8480742, 8292327, 8480743, 8292328, 8480744, 8292329, 8480745, 8292330, 8480746, 8292331, 8480747, 8292332, 8480748, 8292333, 8480749, 8292334, 8353774, 8357870, 8361966, 8366062, 8370158, 8374254, 8378350, 8382446, 8386542, 8390638, 8394734, 8398830, 8402926, 8407022, 8411118, 8415214, 8419310, 8423406, 8427502, 8431598, 8435694, 8439790, 8443886, 8447982, 8452078, 8456174, 8460270, 8464366, 8468462, 8472558, 8476654, 8480750, 8292335, 8353775, 8292336, 8353776, 8292337, 8353777, 8292338, 8353778, 8292339, 8353779, 8292340, 8353780, 8292341, 8353781, 8292342, 8353782, 8292343, 8353783, 8357879, 8361975, 8366071, 8370167, 8374263, 8378359, 8382455, 8386551, 8390647, 8394743, 8398839, 8402935, 8407031, 8411127, 8415223, 8419319, 8423415, 8427511, 8431607, 8435703, 8439799, 8443895, 8447991, 8452087, 8456183, 8460279, 8464375, 8468471, 8472567, 8476663, 8480759, 8484855, 8488951, 8493047, 8497143, 8501239, 8505335, 8509431, 8513527, 8517623, 8292344, 8517624, 8292345, 8517625, 8292346, 8517626, 8292347, 8517627, 8292348, 8517628, 8292349, 8517629, 8292350, 8517630, 8292351, 8517631, 8292352, 8517632, 8292353, 8517633, 8292354, 8517634, 8292355, 8517635, 8292356, 8517636, 8292357, 8517637, 8292358, 8517638, 8292359, 8353799, 8357895, 8361991, 8366087, 8370183, 8374279, 8378375, 8382471, 8386567, 8390663, 8394759, 8398855, 8402951, 8407047, 8411143, 8415239, 8419335, 8423431, 8427527, 8431623, 8435719, 8439815, 8443911, 8448007, 8452103, 8456199, 8460295, 8464391, 8468487, 8472583, 8476679, 8480775, 8484871, 8488967, 8493063, 8497159, 8501255, 8505351, 8509447, 8513543, 8517639, 8292360, 8456200, 8292361, 8456201, 8292362, 8456202, 8292363, 8456203, 8292364, 8456204, 8292365, 8456205, 8292366, 8456206, 8292367, 8456207, 8292368, 8456208, 8292369, 8456209, 8292370, 8456210, 8292371, 8456211, 8292372, 8456212, 8292373, 8456213, 8255510, 8259606, 8263702, 8267798, 8271894, 8275990, 8280086, 8284182, 8288278, 8292374, 8296470, 8300566, 8304662, 8308758, 8312854, 8316950, 8321046, 8325142, 8329238, 8333334, 8337430, 8341526, 8345622, 8349718, 8353814, 8357910, 8362006, 8366102, 8370198, 8374294, 8378390, 8382486, 8386582, 8390678, 8394774, 8398870, 8402966, 8407062, 8411158, 8415254, 8419350, 8423446, 8427542, 8431638, 8435734, 8439830, 8443926, 8448022, 8452118, 8456214, 8255511, 8292375, 8255512, 8292376, 8255513, 8292377, 8255514, 8292378, 8255515, 8292379, 8255516, 8292380, 8255517, 8292381, 8255518, 8292382, 8255519, 8259615, 8263711, 8267807, 8271903, 8275999, 8280095, 8284191, 8288287, 8292383]
Space.Aliens = [[0, Vec2.new(14, -64), SparseBitmap.SymbolHuman, SparseBitmap.PictureHuman, -1], [1, Vec2.new(-4, 94), SparseBitmap.SymbolEndo, SparseBitmap.PictureEndo, 2], [2, Vec2.new(-78, -67), SparseBitmap.SymbolAlien1, SparseBitmap.PictureAlien1, 1], [3, Vec2.new(-38, -46), SparseBitmap.SymbolAlien2, SparseBitmap.PictureAlien2, -1], [4, Vec2.new(44, -34), SparseBitmap.SymbolAlien3, SparseBitmap.PictureAlien3, -1], [5, Vec2.new(60, -30), SparseBitmap.SymbolAlien4, SparseBitmap.PictureAlien4, 3], [6, Vec2.new(-81, 11), SparseBitmap.SymbolAlien5, SparseBitmap.PictureAlien5, 0], [7, Vec2.new(-49, 34), SparseBitmap.SymbolAlien6, SparseBitmap.PictureAlien6, -1], [8, Vec2.new(52, 27), SparseBitmap.SymbolAlien7, SparseBitmap.PictureAlien7, -1], [9, Vec2.new(99, 15), SparseBitmap.SymbolAlien8, SparseBitmap.PictureAlien8, -1], [10, Vec2.new(96, 35), SparseBitmap.SymbolAlien9, SparseBitmap.PictureAlien9, -1]]
Bitmap.Laser = [5, 14711822]
Bitmap.Split = [5, 18404913]
Bitmap.Game = [7, 560819095462143]
Bitmap.Attacker1 = [3, 256]
Bitmap.Attacker2 = [4, 42144]
Bitmap.Attacker3 = [5, 18299345]
Bitmap.Attacker4 = [5, 29342715]
Bitmap.Defender1 = [3, 256]
Bitmap.Defender2 = [4, 19008]
Bitmap.Defender3 = [5, 4681156]
Bitmap.Defender4 = [5, 15724526]
Machine.Attackers = [Bitmap.Attacker1, Bitmap.Attacker2, Bitmap.Attacker3, Bitmap.Attacker4]
Machine.Defenders = [Bitmap.Defender1, Bitmap.Defender2, Bitmap.Defender3, Bitmap.Defender4]
Bitmap.SplitClose = [5, 18411057]
:1096 = Image.fill_rect(-16, -16, 33, 33)
Bitmap.Energy = [5, 22369621]
Bitmap.LaserMax = [5, 32537631]
Bitmap.Cooldown = [5, 22730421]
Bitmap.Life = [5, 33084991]
Bitmap.Heat = [5, 1538126]
Machine.Params = [Bitmap.Energy, Bitmap.LaserMax, Bitmap.Cooldown, Bitmap.Life]
SparseBitmap.Space1 = [8349576, 8210316, 8320911, 8292240, 8296337, 8378257, 8341394, 8529820, 8038301, 8042397, 8574879, 8300448, 8542112, 8578976, 8312737, 8615841, 8259491, 8398755, 7976868, 8259492, 8365988, 8148901, 8218533, 8263589, 8275877, 8279973, 8312741, 8325029, 8329125, 8349605, 8214438, 8226726, 8267686, 8271782, 8316838, 8320934, 8357798, 8198055, 8214439, 8275879, 8296359, 8353703, 8357799, 8189864, 8193960, 8325032, 8349608, 8357800, 8382376, 8198057, 8382377, 8394665, 8120234, 8153002, 8157098, 8423338, 8587178, 8595370, 8177579, 8382379, 8386475, 8492971, 8497067, 8120236, 8177580, 8185772, 8386476, 8402860, 8419244, 8529836, 8599468, 8144813, 8153005, 8398765, 8415149, 8435629, 8423342, 8439726, 8439727, 8443824, 8611760, 8112049, 8120241, 8611761, 8091570, 8103858, 8112050, 8312754, 8316850, 8320946, 8443826, 8062899, 8071091, 8320947, 8325043, 8464307, 8517555, 8071092, 8079284, 8464308, 8513460, 8075189, 8509365, 8402870, 8406966, 8492982, 8529846, 8058807, 8402871, 8406967, 8427447, 8492983, 8497079, 8157112, 8382392, 8427448, 8492984, 8497080, 8492985, 8525753, 8665017, 8038330, 8386490, 8525754, 8550330, 8038331, 8411067, 8533947, 8533948, 8550332, 8566716, 8677308, 8517565, 8521661, 8562621, 8026046, 8435646, 8521662, 8673214, 8566719, 8517568, 8566720, 8304577, 8464321, 8558529, 8296386, 8443842, 8566722, 8312772, 8320965, 8566725, 8570821, 8566726, 8693702, 8697798, 8202183, 8206279, 8566727, 8697799, 8202184, 8210376, 8488904, 8579016, 8738760, 8742856, 8193993, 8742857, 8599498, 8488907, 8140748, 8144844, 8320972, 8493004, 8599500, 8697804, 8701900, 8136653, 8144845, 8148941, 8443853, 8611789, 8497102, 8591310, 8595406, 8366031, 8374223, 8431567, 8443855, 8591311, 8595407, 8599503, 8603599, 8607695, 8611791, 8427472, 8431568, 8591312, 8599504, 8603600, 8607696, 8308689, 8431569, 8435665, 8353746, 8366034, 8370130, 8595410, 8267731, 8271827, 8275923, 8316883, 8333267, 8353747, 8370131, 8374227, 8378323, 8386515, 8595411, 8599507, 8112084, 8251348, 8296404, 8308692, 8333268, 8337364, 8345556, 8361940, 8366036, 8374228, 8390612, 8464340, 8472532, 8624084, 8636372, 8243157, 8255445, 8271829, 8296405, 8312789, 8333269, 8357845, 8366037, 8370133, 8378325, 8394709, 8398805, 8611797, 8271830, 8378326, 8390614, 8595414, 8234967, 8239063, 8247255, 8263639, 8271831, 8378327, 8398807, 8226776, 8234968, 8255448, 8275928, 8288216, 8411096, 8423384, 8435672, 8607704, 8230873, 8259545, 8267737, 8497113, 8218586, 8226778, 8234970, 8316890, 8603610, 8611802, 8710106, 8222683, 8226779, 8439771, 8452059, 8517595, 8624091, 8710107, 8624092, 8198109, 8226781, 8443869, 8460253, 8472541, 8194014, 8214494, 8255454, 8468446, 8476638, 8218591, 8255455, 8447967, 8468447, 8476639, 8488927, 8497119, 8546271, 8153056, 8210400, 8218592, 8472544, 8476640, 8488928, 8493024, 8636384, 8640480, 8706016, 8710112, 8095713, 8099809, 8153057, 8157153, 8206305, 8218593, 8460257, 8632289, 8640481, 8091618, 8095714, 8181730, 8206306, 8210402, 8484834, 8632290, 8636386, 8202211, 8206307, 8476643, 8632291, 8636387, 8640483, 8202212, 8206308, 8214500, 8353764, 8488932, 8505316, 8550372, 8640484, 8144869, 8165349, 8423397, 8427493, 8464357, 8501221, 8505317, 8554469, 8038374, 8079334, 8337382, 8415206, 8419302, 8435686, 8460262, 8484838, 8493030, 8505318, 8513510, 8546278, 8550374, 8558566, 8333287, 8407015, 8460263, 8558567, 8169448, 8415208, 8423400, 8439784, 8443880, 8452072, 8464360, 8493032, 8497128, 8513512, 8521704, 8533992, 8546280, 8550376, 8558568, 8636392, 8644584, 8161257, 8173545, 8415209, 8431593, 8456169, 8464361, 8476649, 8488937, 8497129, 8509417, 8517609, 8521705, 8525801, 8546281, 8632297, 8660969, 8058858, 8169450, 8177642, 8378346, 8398826, 8407018, 8439786, 8460266, 8493034, 8521706, 8525802, 8550378, 8165355, 8386539, 8402923, 8407019, 8439787, 8464363, 8480747, 8501227, 8509419, 8513515, 8529899, 8542187, 8644587, 8665067, 8161260, 8169452, 8275948, 8280044, 8361964, 8398828, 8402924, 8411116, 8415212, 8419308, 8439788, 8447980, 8488940, 8505324, 8509420, 8517612, 8525804, 8554476, 8263661, 8267757, 8284141, 8394733, 8488941, 8501229, 8513517, 8521709, 8525805, 8554477, 8161262, 8263662, 8353774, 8386542, 8390638, 8419310, 8468462, 8497134, 8501230, 8525806, 8554478, 8632302, 8140783, 8255471, 8259567, 8349679, 8357871, 8382447, 8419311, 8423407, 8480751, 8488943, 8497135, 8505327, 8509423, 8513519, 8644591, 8845295, 8140784, 8255472, 8259568, 8329200, 8341488, 8349680, 8374256, 8431600, 8443888, 8488944, 8513520, 8636400, 8640496, 8648688, 8140785, 8161265, 8165361, 8259569, 8263665, 8321009, 8398833, 8439793, 8476657, 8493041, 8497137, 8525809, 8644593, 8726513, 8337394, 8443890, 8632306, 8636402, 8132595, 8325107, 8345587, 8361971, 8501235, 8509427, 8517619, 8738803, 8128500, 8132596, 8157172, 8308724, 8316916, 8333300, 8341492, 8353780, 8505332, 8513524, 8648692, 8128501, 8493045, 8505333, 8632309, 8046582, 8124406, 8128502, 8304630, 8337398, 8378358, 8407030, 8509430, 8517622, 8120311, 8308727, 8562679, 8644599, 8116216, 8124408, 8132600, 8312824, 8419320, 8484856, 8517624, 8112121, 8136697, 8321017, 8325113, 8349689, 8419321, 8484857, 8501241, 8632313, 8656889, 8116218, 8124410, 8153082, 8316922, 8419322, 8480762, 8656890, 8136699, 8292347, 8304635, 8325115, 8382459, 8558587, 8718331, 8738811, 8128508, 8329212, 8382460, 8390652, 8394748, 8398844, 8124413, 8128509, 8296445, 8370173, 8386557, 8128510, 8132606, 8280062, 8304638, 8316926, 8366078, 8386558, 8452094, 8468478, 8280063, 8292351, 8296447, 8361983, 8370175, 8402943, 8419327, 8468479, 8476671, 8480767, 8558591, 8628223, 8648703, 8271872, 8300544, 8325120, 8341504, 8374272, 8402944, 8411136, 8419328, 8460288, 8558592, 8390657, 8452097, 8640513, 8120322, 8284162, 8308738, 8370178, 8386562, 8394754, 8398850, 8476674, 8480770, 8112131, 8116227, 8386563, 8390659, 8484867, 8628227, 8284164, 8353796, 8374276, 8443908, 8615940, 8628228, 8112133, 8263685, 8275973, 8378373, 8624133, 8628229, 8632325, 8271878, 8353798, 8357894, 8448006, 8460294, 8628230, 8112135, 8267783, 8349703, 8353799, 8427527, 8456199, 8632327, 8267784, 8280072, 8615944, 8108041, 8222729, 8263689, 8284169, 8288265, 8411145, 8431625, 8456201, 8611849, 8128522, 8247306, 8255498, 8275978, 8284170, 8312842, 8329226, 8378378, 8456202, 8607754, 8611850, 8624138, 8628234, 8124427, 8247307, 8259595, 8280075, 8464395, 8615947, 8751115, 8124428, 8251404, 8259596, 8275980, 8280076, 8284172, 8337420, 8349708, 8370188, 8624140, 8132621, 8255501, 8263693, 8280077, 8284173, 8329229, 8374285, 8390669, 8407053, 8423437, 8435725, 8607757, 8611853, 8615949, 8284174, 8288270, 8292366, 8378382, 8443918, 8620046, 8116239, 8214543, 8288271, 8386575, 8398863, 8423439, 8427535, 8448015, 8218640, 8255504, 8292368, 8312848, 8398864, 8407056, 8509456, 8116241, 8255505, 8263697, 8280081, 8296465, 8333329, 8362001, 8386577, 8394769, 8398865, 8411153, 8423441, 8591377, 8255506, 8259602, 8288274, 8296466, 8321042, 8329234, 8341522, 8353810, 8357906, 8370194, 8386578, 8407058, 8435730, 8591378, 8595474, 8624146, 8243219, 8251411, 8263699, 8275987, 8284179, 8292371, 8304659, 8316947, 8321043, 8333331, 8353811, 8378387, 8427539, 8124436, 8243220, 8259604, 8267796, 8275988, 8280084, 8288276, 8325140, 8329236, 8345620, 8579092, 8599572, 8611860, 8615956, 8677396, 8681492, 8251413, 8271893, 8284181, 8288277, 8304661, 8325141, 8337429, 8583189, 8587285, 8681493, 8128534, 8243222, 8259606, 8263702, 8341526, 8493078, 8562710, 8124439, 8275991, 8357911, 8583191, 8128536, 8255512, 8284184, 8296472, 8587288, 8603672, 8255513, 8275993, 8280089, 8288281, 8579097, 8599577, 8677401, 8091674, 8124442, 8128538, 8226842, 8300570, 8292379, 8308763, 8435739, 8558619, 8591387, 8095772, 8128540, 8292380, 8398876, 8402972, 8550428, 8575004, 8583196, 8665116, 8288285, 8292381, 8407069, 8546333, 8550429, 8558621, 8570909, 8575005, 8579101, 8136734, 8280094, 8284190, 8292382, 8296478, 8300574, 8407070, 8575006, 8230943, 8296479, 8300575, 8550431, 8644639, 8026144, 8296480, 8329248, 8333344, 8538144, 8136737, 8312865, 8321057, 8538145, 8554529, 8562721, 8575009, 8128546, 8136738, 8312866, 8321058, 8333346, 8341538, 8345634, 8534050, 8325155, 8333347, 8349731, 8357923, 8362019, 8501283, 8529955, 8112164, 8132644, 8345636, 8493092, 8497188, 8501284, 8513572, 8534052, 8321061, 8341541, 8349733, 8378405, 8394789, 8415269, 8493093, 8513573, 8341542, 8349734, 8370214, 8374310, 8398886, 8452134, 8632358, 8144935, 8329255, 8398887, 8427559, 8501287, 8521767, 8632359, 8816679, 8276008, 8329256, 8386600, 8394792, 8427560, 8452136, 8456232, 8464424, 8505384, 8144937, 8353833, 8431657, 8439849, 8460329, 8501289, 8656937, 8661033, 8665129, 8276010, 8419370, 8435754, 8448042, 8632362, 8636458, 8640554, 8140843, 8144939, 8308779, 8419371, 8472619, 8615979, 8140844, 8362028, 8415276, 8140845, 8149037, 8460333, 8132654, 8136750, 8140846, 8144942, 8157230, 8136751, 8140847, 8140848, 8321072, 8144945, 8333361, 8140850, 8144946, 8161330, 8300594, 8304690, 8304691, 8337459, 8538163, 8542259, 8144948, 8161333, 8165430, 8169527, 8370231, 8390711, 8783927, 8165432, 8419384, 8161337, 8423481, 8185914, 8763451, 8173628, 8169533, 8173629, 8177725, 8734784, 8726593, 8194114, 8742978, 8190019, 8194115, 8202307, 8734787, 8738883, 8742979, 8771651, 8198212, 8202308, 8521796, 8734788, 8738884, 8435781, 8730695, 8214600, 8489032, 8091721, 8226890, 8685643, 8226892, 8669262, 8255568, 8656976, 8652881, 8648786, 8656978, 8218707, 8280147, 8259669, 8263765, 8288341, 8288342, 8296534, 8288343, 8292439, 8296535, 8611927, 8247384, 8292440, 8599640, 8607832, 8632408, 8304729, 8308825, 8304730, 8308826, 8579162, 8378459, 8435803, 8439899, 8489051, 8501339, 8554587, 8570971, 8591451, 8628315, 8308828, 8382556, 8439900, 8456284, 8489052, 8513628, 8550492, 8558684, 8562780, 8583260, 8595548, 8599644, 8603740, 8149085, 8386653, 8407133, 8415325, 8419421, 8480861, 8493149, 8505437, 8550493, 8333406, 8386654, 8415326, 8464478, 8476766, 8415327, 8472671, 8476767, 8517727, 8530015, 8521824, 8530016, 8497249, 8476773]
SparseBitmap.Space2 = [8181640, 8222600, 8169357, 8402830, 8173455, 8222608, 8288144, 8374160, 8378257, 8312722, 8341394, 8431506, 8337300, 8357780, 8214421, 8308629, 8361877, 8050585, 8538009, 8353691, 8587163, 8247196, 8288156, 8337308, 8345500, 8353692, 8587164, 7964573, 7989149, 8333213, 8361885, 8247198, 8259486, 8271774, 8308638, 8374174, 8230815, 8239007, 8255391, 8263583, 8333215, 8198048, 8267680, 8300448, 8341408, 8398752, 8542112, 8578976, 8607648, 8193953, 8206241, 8234913, 8275873, 8316833, 8357793, 8181666, 8202146, 8288162, 8300450, 8169379, 8177571, 8226723, 8259491, 8288163, 8325027, 8406947, 8505251, 7976868, 8169380, 8239012, 8243108, 8255396, 8292260, 8361892, 8378276, 8546212, 8103845, 8185765, 8198053, 8263589, 8312741, 8329125, 8361893, 8365989, 8382373, 8488869, 8550309, 7952294, 8091558, 8140710, 8161190, 8452006, 8136615, 8140711, 8152999, 8161191, 8210343, 8255399, 8288167, 8296359, 8333223, 8353703, 8365991, 8394663, 8423335, 8435623, 8525735, 8136616, 8165288, 8189864, 8316840, 8320936, 8365992, 8370088, 8419240, 8443816, 8447912, 8578984, 8169385, 8255401, 8304553, 8337321, 8468393, 8116138, 8279978, 8284074, 8325034, 8378282, 8406954, 8452010, 8480682, 8538026, 8574890, 8095659, 8103851, 8116139, 8218539, 8288171, 8333227, 8476587, 8144812, 8198060, 8325036, 8370092, 8386476, 8402860, 8456108, 8488876, 8599468, 8165293, 8251309, 8316845, 8398765, 8460205, 8472493, 8095662, 8157102, 8185774, 8206254, 8267694, 8288174, 8329134, 8423342, 8439726, 8501166, 8128431, 8157103, 8161199, 8177583, 8271791, 8378287, 8411055, 8439727, 8472495, 8484783, 8521647, 8132528, 8169392, 8185776, 8230832, 8402864, 8431536, 8452016, 8460208, 8542128, 8546224, 8054705, 8075185, 8124337, 8128433, 8210353, 8267697, 8423345, 8497073, 8079282, 8157106, 8366002, 8374194, 8390578, 8427442, 8439730, 8554418, 8046515, 8054707, 8062899, 8112051, 8165299, 8341427, 8378291, 8435635, 8517555, 8288180, 8357812, 8386484, 8406964, 8497076, 8513460, 8529844, 8017845, 8066997, 8075189, 8091573, 8243125, 8370101, 8079286, 8087478, 8349622, 8415158, 8423350, 8505270, 8517558, 8525750, 8558518, 8566710, 8091575, 8361911, 8435639, 8464311, 8468407, 8497079, 8595383, 8042424, 8087480, 8107960, 8128440, 8157112, 8275896, 8349624, 8366008, 8427448, 8476600, 8484792, 8574904, 8656824, 8005561, 8058809, 8079289, 8103865, 8132537, 8251321, 8394681, 8439737, 8525753, 7993274, 8075194, 8218554, 8374202, 8435642, 8472506, 8513466, 8562618, 8644538, 8107963, 8255419, 8308667, 8435643, 8447931, 8476603, 8525755, 8558523, 8021948, 8136636, 8390588, 8484796, 8505276, 8533948, 8619964, 8030141, 8198077, 8357821, 8378301, 8492989, 8558525, 7993278, 8124350, 8292286, 8435646, 8574910, 8148927, 8423359, 8583103, 8591295, 8071104, 8120256, 8333248, 8517568, 8533952, 8570816, 8583104, 8075201, 8103873, 8341441, 8370113, 8464321, 8505281, 8517569, 8529857, 8554433, 8591297, 8636353, 8280002, 8296386, 8320962, 8386498, 8431554, 8550338, 8009667, 8042435, 8173507, 8370115, 8443843, 8546243, 8550339, 8554435, 8583107, 8185796, 8349636, 8382404, 8390596, 8415172, 8419268, 8439748, 8472516, 8206277, 8214469, 8325061, 8447941, 8505285, 8529861, 8579013, 8603589, 8050630, 8181702, 8435654, 8439750, 8447942, 8525766, 8546246, 8587206, 8615878, 8632262, 8640454, 8234951, 8361927, 8378311, 8394695, 8419271, 8476615, 8554439, 8566727, 8587207, 8595399, 8611783, 8669127, 8202184, 8210376, 8329160, 8402888, 8427464, 8488904, 8140745, 8185801, 8239049, 8263625, 8345545, 8427465, 8497097, 8505289, 8509385, 8525769, 8562633, 8579017, 8599497, 8001482, 8218570, 8378314, 8546250, 8562634, 8591306, 8603594, 8665034, 8148939, 8189899, 8222667, 8275915, 8325067, 8366027, 8370123, 8427467, 8566731, 8591307, 8619979, 8746955, 8206284, 8304588, 8320972, 8329164, 8599500, 8644556, 7956429, 8148941, 8320973, 8353741, 8443853, 8509389, 8603597, 8673229, 8693709, 8214478, 8280014, 8300494, 8333262, 8337358, 8357838, 8378318, 8402894, 8423374, 8484814, 8517582, 8562638, 8583118, 8628174, 8644558, 8153039, 8218575, 8226767, 8333263, 8337359, 8370127, 8374223, 8431567, 8460239, 8484815, 8488911, 8493007, 8529871, 8570831, 8591311, 8628175, 8644559, 8693711, 8103888, 8181712, 8234960, 8320976, 8345552, 8374224, 8423376, 8431568, 8509392, 8628176, 8689616, 8693712, 8259537, 8296401, 8333265, 8386513, 8488913, 8591313, 8611793, 8697809, 8140754, 8177618, 8345554, 8349650, 8366034, 8386514, 8415186, 8443858, 8484818, 8493010, 8505298, 8562642, 8587218, 8607698, 8615890, 8710098, 8234963, 8267731, 8288211, 8345555, 8353747, 8390611, 8497107, 8517587, 8542163, 8595411, 8619987, 8718291, 8726483, 8091604, 8161236, 8165332, 8218580, 8267732, 8329172, 8333268, 8382420, 8415188, 8427476, 8574932, 8632276, 7989205, 8099797, 8202197, 8222677, 8243157, 8255445, 8275925, 8349653, 8378325, 8402901, 8447957, 8513493, 8538069, 8570837, 8587221, 8628181, 8148950, 8226774, 8312790, 8337366, 8341462, 8456150, 8468438, 8472534, 8497110, 8517590, 8529878, 8554454, 8579030, 8583126, 8607702, 8619990, 8644566, 8648662, 8656854, 8103895, 8116183, 8185815, 8222679, 8308695, 8316887, 8349655, 8353751, 8357847, 8501207, 8517591, 8521687, 8550359, 8554455, 8591319, 8628183, 8701911, 8222680, 8239064, 8325080, 8345560, 8378328, 8411096, 8468440, 8529880, 8595416, 8615896, 8640472, 8185817, 8189913, 8214489, 8275929, 8288217, 8292313, 8366041, 8468441, 8619993, 8628185, 8689625, 8140762, 8218586, 8226778, 8234970, 8349658, 8366042, 8407002, 8472538, 8505306, 8701914, 8116187, 8177627, 8202203, 8214491, 8226779, 8251355, 8259547, 8284123, 8345563, 8415195, 8447963, 8476635, 8480731, 8484827, 8546267, 8554459, 8583131, 8587227, 8595419, 8624091, 8710107, 8161244, 8189916, 8202204, 8210396, 8226780, 8243164, 8267740, 8271836, 8284124, 8308700, 8353756, 8370140, 8374236, 8382428, 8456156, 8472540, 8493020, 8513500, 8554460, 8624092, 8628188, 8124381, 8198109, 8247261, 8267741, 8304605, 8320989, 8390621, 8517597, 8521693, 8652765, 8185822, 8218590, 8259550, 8329182, 8419294, 8435678, 8464350, 8476638, 8488926, 8521694, 8558558, 8599518, 8603614, 8615902, 8177631, 8181727, 8234975, 8255455, 8435679, 8497119, 8611807, 8636383, 8644575, 8665055, 7890912, 8112096, 8124384, 8165344, 8173536, 8202208, 8210400, 8263648, 8333280, 8398816, 8513504, 8591328, 8624096, 8640480, 8710112, 8161249, 8169441, 8173537, 8202209, 8370145, 8386529, 8407009, 8423393, 8431585, 8615905, 8620001, 8640481, 8652769, 8730593, 8181730, 8189922, 8210402, 8230882, 8234978, 8288226, 8337378, 8349666, 8382434, 8447970, 8513506, 8517602, 8538082, 8607714, 8620002, 8644578, 8161251, 8234979, 8259555, 8267747, 8300515, 8361955, 8366051, 8370147, 8415203, 8480739, 8505315, 8513507, 8517603, 8529891, 8550371, 8558563, 8562659, 8566755, 8583139, 8640483, 8648675, 8652771, 8087524, 8132580, 8165348, 8214500, 8259556, 8288228, 8353764, 8378340, 8452068, 8472548, 8488932, 8509412, 8550372, 8624100, 8644580, 8067045, 8173541, 8194021, 8202213, 8407013, 8423397, 8460261, 8468453, 8480741, 8488933, 8517605, 8525797, 8533989, 8562661, 8574949, 8587237, 8615909, 8620005, 8112102, 8140774, 8144870, 8173542, 8337382, 8345574, 8398822, 8423398, 8456166, 8468454, 8472550, 8480742, 8550374, 8579046, 8624102, 8218599, 8230887, 8353767, 8402919, 8407015, 8435687, 8452071, 8488935, 8529895, 8566759, 8611815, 8009704, 8140776, 8161256, 8198120, 8345576, 8349672, 8366056, 8382440, 8394728, 8427496, 8443880, 8476648, 8484840, 8497128, 8509416, 8513512, 8529896, 8550376, 8583144, 8587240, 8124393, 8144873, 8157161, 8161257, 8202217, 8214505, 8353769, 8382441, 8460265, 8476649, 8521705, 8525801, 8533993, 8538089, 8542185, 8566761, 8591337, 8636393, 8640489, 8660969, 8046570, 8132586, 8198122, 8226794, 8255466, 8402922, 8443882, 8452074, 8468458, 8472554, 8476650, 8484842, 8497130, 8505322, 8533994, 8075243, 8144875, 8198123, 8206315, 8296427, 8337387, 8509419, 8533995, 8632299, 8665067, 8673259, 8181740, 8402924, 8415212, 8427500, 8431596, 8439788, 8468460, 8484844, 8493036, 8525804, 8546284, 8562668, 8628204, 8128493, 8202221, 8267757, 8374253, 8378349, 8419309, 8452077, 8464365, 8493037, 8533997, 8607725, 8611821, 8620013, 8108014, 8161262, 8189934, 8198126, 8210414, 8267758, 8275950, 8333294, 8337390, 8341486, 8353774, 8361966, 8447982, 8472558, 8521710, 8542190, 8574958, 8607726, 8624110, 8665070, 8021999, 8189935, 8255471, 8259567, 8288239, 8312815, 8325103, 8398831, 8402927, 8407023, 8439791, 8452079, 8476655, 8484847, 8505327, 8533999, 8546287, 8615919, 8628207, 8112112, 8132592, 8255472, 8308720, 8325104, 8349680, 8370160, 8382448, 8456176, 8472560, 8546288, 8554480, 8677360, 8087537, 8161265, 8169457, 8198129, 8218609, 8263665, 8284145, 8325105, 8386545, 8394737, 8407025, 8411121, 8415217, 8443889, 8509425, 8529905, 8644593, 8648689, 8726513, 8091634, 8103922, 8128498, 8144882, 8181746, 8275954, 8308722, 8337394, 8349682, 8357874, 8366066, 8423410, 8435698, 8439794, 8443890, 8460274, 8517618, 8534002, 8542194, 8550386, 8574962, 8169459, 8284147, 8292339, 8304627, 8337395, 8349683, 8361971, 8370163, 8378355, 8390643, 8415219, 8456179, 8464371, 8472563, 8480755, 8484851, 8542195, 8591347, 8611827, 8644595, 8665075, 8738803, 8120308, 8144884, 8263668, 8288244, 8357876, 8386548, 8402932, 8407028, 8431604, 8456180, 8460276, 8464372, 8480756, 8521716, 8534004, 8587252, 8665076, 8095733, 8169461, 8284149, 8292341, 8333301, 8370165, 8398837, 8415221, 8497141, 8615925, 8632309, 8640501, 8005622, 8325110, 8337398, 8357878, 8386550, 8415222, 8435702, 8456182, 8468470, 8476662, 8493046, 8521718, 8542198, 8017911, 8034295, 8095735, 8169463, 8173559, 8177655, 8243191, 8284151, 8349687, 8374263, 8394743, 8431607, 8443895, 8464375, 8468471, 8493047, 8501239, 8521719, 8562679, 8566775, 8644599, 8718327, 8013816, 8198136, 8275960, 8280056, 8292344, 8296440, 8361976, 8386552, 8394744, 8427512, 8435704, 8460280, 8476664, 8493048, 8497144, 8550392, 8603640, 8615928, 8697848, 8800248, 8136697, 8161273, 8165369, 8169465, 8222713, 8226809, 8267769, 8316921, 8341497, 8394745, 8402937, 8407033, 8456185, 8472569, 8501241, 8513529, 8517625, 8030202, 8058874, 8230906, 8251386, 8280058, 8370170, 8382458, 8402938, 8415226, 8513530, 8656890, 8087547, 8091643, 8280059, 8337403, 8353787, 8382459, 8398843, 8407035, 8411131, 8415227, 8419323, 8431611, 8476667, 8587259, 8005628, 8038396, 8050684, 8148988, 8153084, 8185852, 8202236, 8263676, 8316924, 8353788, 8370172, 8382460, 8394748, 8398844, 8402940, 8411132, 8435708, 8447996, 8472572, 8595452, 8636412, 8714236, 8050685, 8108029, 8116221, 8165373, 8247293, 8312829, 8349693, 8366077, 8374269, 8378365, 8394749, 8407037, 8435709, 8443901, 8447997, 8484861, 8521725, 8636413, 8669181, 8013822, 8087550, 8132606, 8173566, 8210430, 8275966, 8321022, 8341502, 8349694, 8353790, 8435710, 8452094, 8472574, 8505342, 8517630, 8521726, 8538110, 8562686, 8570878, 8583166, 8607742, 8624126, 8636414, 8079359, 8271871, 8316927, 8329215, 8341503, 8370175, 8423423, 8443903, 8501247, 8570879, 8620031, 8656895, 8730623, 8038400, 8124416, 8181760, 8218624, 8316928, 8337408, 8366080, 8394752, 8402944, 8411136, 8443904, 8448000, 8460288, 8484864, 8505344, 8574976, 8595456, 8615936, 8026113, 8071169, 8124417, 8198145, 8239105, 8280065, 8292353, 8296449, 8341505, 8353793, 8366081, 8370177, 8407041, 8415233, 8464385, 8480769, 8525825, 8538113, 8570881, 8599553, 8665089, 8734721, 8009730, 8120322, 8132610, 8136706, 8148994, 8251394, 8263682, 8345602, 8349698, 8353794, 8361986, 8370178, 8378370, 8423426, 8456194, 8529922, 8562690, 8611842, 8615938, 8665090, 8038403, 8108035, 8128515, 8206339, 8255491, 8288259, 8296451, 8304643, 8329219, 8333315, 8345603, 8353795, 8361987, 8370179, 8398851, 8402947, 8484867, 8497155, 8501251, 8562691, 8087556, 8177668, 8284164, 8300548, 8325124, 8378372, 8407044, 8411140, 8431620, 8439812, 8497156, 8591364, 8611844, 8648708, 8136709, 8222725, 8316933, 8321029, 8353797, 8361989, 8370181, 8402949, 8435717, 8443909, 8591365, 8624133, 8112134, 8292358, 8321030, 8329222, 8353798, 8366086, 8378374, 8386566, 8402950, 8427526, 8439814, 8452102, 8529926, 8611846, 8640518, 8644614, 8648710, 8706054, 8034311, 8222727, 8230919, 8251399, 8288263, 8308743, 8312839, 8345607, 8357895, 8378375, 8382471, 8390663, 8394759, 8439815, 8452103, 8460295, 8468487, 8603655, 8730631, 8009736, 8079368, 8239112, 8255496, 8296456, 8357896, 8366088, 8374280, 8378376, 8390664, 8419336, 8431624, 8452104, 8472584, 8529928, 8562696, 8603656, 8697864, 8112137, 8132617, 8255497, 8280073, 8292361, 8304649, 8325129, 8366089, 8411145, 8480777, 8566793, 8648713, 8017930, 8112138, 8308746, 8312842, 8345610, 8370186, 8374282, 8382474, 8386570, 8435722, 8443914, 8468490, 8505354, 8607754, 8624138, 8628234, 8636426, 8103947, 8214539, 8280075, 8300555, 8325131, 8357899, 8460299, 8464395, 8796171, 8128524, 8157196, 8185868, 8230924, 8329228, 8345612, 8353804, 8394764, 8435724, 8448012, 8603660, 8648716, 8796172, 8136717, 8144909, 8267789, 8292365, 8304653, 8308749, 8337421, 8345613, 8357901, 8382477, 8407053, 8415245, 8566797, 8607757, 8665101, 8689677, 8034318, 8108046, 8124430, 8235022, 8288270, 8308750, 8333326, 8345614, 8361998, 8566798, 8632334, 8661006, 8800270, 8058895, 8116239, 8189967, 8210447, 8235023, 8267791, 8308751, 8357903, 8382479, 8435727, 8538127, 8607759, 8624143, 8132624, 8173584, 8235024, 8243216, 8267792, 8284176, 8304656, 8308752, 8542224, 8615952, 8624144, 8673296, 8022033, 8112145, 8116241, 8124433, 8132625, 8198161, 8226833, 8251409, 8263697, 8284177, 8321041, 8341521, 8345617, 8357905, 8386577, 8423441, 8431633, 8443921, 8529937, 8603665, 8636433, 8013842, 8120338, 8247314, 8251410, 8271890, 8308754, 8341522, 8353810, 8370194, 8517650, 8529938, 8574994, 8206355, 8251411, 8325139, 8337427, 8362003, 8374291, 8402963, 8427539, 8484883, 8521747, 8534035, 8574995, 8591379, 8603667, 8628243, 8644627, 8030228, 8083476, 8185876, 8222740, 8235028, 8267796, 8321044, 8325140, 8337428, 8345620, 8349716, 8366100, 8427540, 8448020, 8484884, 8501268, 8521748, 8542228, 8579092, 8628244, 8677396, 8701972, 8017941, 8140821, 8177685, 8214549, 8235029, 8312853, 8362005, 8407061, 8566805, 8128534, 8140822, 8222742, 8235030, 8243222, 8271894, 8292374, 8337430, 8362006, 8448022, 8493078, 8525846, 8574998, 8607766, 8681494, 8828950, 8038423, 8112151, 8198167, 8222743, 8271895, 8296471, 8300567, 8382487, 8554519, 8583191, 8632343, 8083480, 8247320, 8292376, 8308760, 8325144, 8333336, 8357912, 8378392, 8509464, 8550424, 8558616, 8566808, 8026137, 8136729, 8149017, 8214553, 8230937, 8296473, 8341529, 8349721, 8411161, 8529945, 8534041, 8562713, 8599577, 8603673, 8706073, 8058906, 8091674, 8128538, 8153114, 8157210, 8239130, 8280090, 8312858, 8325146, 8345626, 8357914, 8484890, 8570906, 8595482, 8636442, 8103963, 8194075, 8218651, 8226843, 8280091, 8288283, 8312859, 8321051, 8345627, 8464411, 8542235, 8550427, 8558619, 8624155, 8124444, 8239132, 8255516, 8271900, 8300572, 8304668, 8402972, 8419356, 8501276, 8603676, 8681500, 8173597, 8202269, 8251421, 8275997, 8280093, 8284189, 8288285, 8292381, 8316957, 8345629, 8353821, 8374301, 8464413, 8538141, 8575005, 8669213, 7997470, 8001566, 8067102, 8099870, 8144926, 8149022, 8239134, 8288286, 8308766, 8321054, 8325150, 8333342, 8353822, 8357918, 8374302, 8460318, 8505374, 8591390, 8112159, 8140831, 8280095, 8284191, 8345631, 8357919, 8493087, 8517663, 8570911, 8620063, 8824863, 8865823, 8153120, 8271904, 8276000, 8292384, 8333344, 8394784, 8402976, 8427552, 8484896, 8534048, 8550432, 8304673, 8312865, 8349729, 8366113, 8407073, 8439841, 8464417, 8472609, 8538145, 8554529, 8575009, 8583201, 8595489, 8603681, 8611873, 7997474, 8099874, 8136738, 8153122, 8222754, 8239138, 8243234, 8247330, 8271906, 8292386, 8300578, 8312866, 8316962, 8341538, 8509474, 8554530, 8595490, 8144931, 8165411, 8308771, 8333347, 8366115, 8390691, 8411171, 8456227, 8480803, 8501283, 8599587, 8656931, 8861731, 8034340, 8140836, 8181796, 8345636, 8357924, 8382500, 8402980, 8419364, 8456228, 8476708, 8501284, 8505380, 8509476, 8570916, 8157221, 8263717, 8288293, 8312869, 8460325, 8484901, 8583205, 8607781, 8632357, 8230950, 8337446, 8349734, 8370214, 8374310, 8411174, 8476710, 8513574, 8538150, 8542246, 8554534, 8611878, 8640550, 8136743, 8247335, 8312871, 8415271, 8505383, 8513575, 8562727, 8017960, 8189992, 8280104, 8308776, 8329256, 8362024, 8415272, 8456232, 8484904, 8505384, 8521768, 8575016, 8022057, 8128553, 8153129, 8198185, 8251433, 8255529, 8271913, 8374313, 8419369, 8439849, 8452137, 8476713, 8566825, 8620073, 8800297, 8099882, 8112170, 8165418, 8337450, 8341546, 8349738, 8390698, 8423466, 8431658, 8513578, 8640554, 8808490, 8112171, 8177707, 8189995, 8267819, 8312875, 8390699, 8398891, 8415275, 8431659, 8439851, 8468523, 8472619, 8497195, 8534059, 8599595, 8730667, 8116268, 8132652, 8153132, 8157228, 8206380, 8226860, 8280108, 8284204, 8308780, 8341548, 8378412, 8390700, 8398892, 8558636, 8575020, 8624172, 8644652, 8218669, 8341549, 8402989, 8407085, 8443949, 8525869, 8542253, 8546349, 8603693, 8808493, 8820781, 8120366, 8128558, 8144942, 8271918, 8288302, 8325166, 8407086, 8415278, 8456238, 8468526, 8493102, 8534062, 8591406, 8112175, 8132655, 8181807, 8321071, 8341551, 8386607, 8398895, 8427567, 8468527, 8472623, 8476719, 8538159, 8280112, 8329264, 8333360, 8386608, 8402992, 8505392, 8595504, 8599600, 8615984, 8144945, 8169521, 8362033, 8632369, 8263730, 8288306, 8300594, 8366130, 8460338, 8595506, 8636466, 8706098, 8128563, 8194099, 8206387, 8214579, 8329267, 8374323, 8378419, 8456243, 8489011, 8529971, 8583219, 8607795, 8665139, 8153140, 8161332, 8173620, 8316980, 8337460, 8599604, 8603700, 8792116, 8177717, 8194101, 8312885, 8333365, 8468533, 8493109, 8779829, 8312886, 8337462, 8329271, 8370231, 8562743, 8157240, 8157241, 8202297, 8210489, 8341561, 8370233, 8521785, 8816697, 8820793, 8144954, 8382522, 8435770, 8759354, 8140859, 8181819, 8198203, 8222779, 8407099, 8468539, 8079420, 8144956, 8181820, 8194108, 8210492, 8239164, 8337468, 8382524, 8403004, 8448060, 8759356, 8054845, 8190013, 8411197, 8464445, 8132670, 8161342, 8198206, 8411198, 8443966, 8730686, 8734782, 8165439, 8190015, 8222783, 8054848, 8198208, 8403008, 8132673, 8243265, 8259649, 8419393, 8620097, 8702017, 8714305, 8161346, 8190018, 8226882, 8243266, 8742978, 8796226, 8702019, 8185924, 8198212, 8734788, 8046661, 8194117, 8235077, 8255557, 8706117, 8742981, 8104006, 8202310, 8239174, 8251462, 8255558, 8681542, 8202311, 8267847, 8271943, 8456263, 8587335, 8714311, 8726599, 8730695, 8779847, 8255560, 8697928, 8714312, 8783944, 8661065, 8730697, 8194122, 8202314, 8210506, 8431690, 8632394, 8706122, 8722506, 8230987, 8243275, 8259659, 8263755, 8292427, 8427595, 8669259, 8759371, 8763467, 8198220, 8235084, 8349772, 8374348, 8390732, 8570956, 8632396, 8460365, 8517709, 8648781, 8681549, 8759373, 8214606, 8259662, 8296526, 8390734, 8415310, 8644686, 8681550, 8734798, 8239183, 8439887, 8603727, 8616015, 8673359, 8202320, 8239184, 8251472, 8300624, 8317008, 8579152, 8656976, 8669264, 8083537, 8214609, 8230993, 8296529, 8357969, 8517713, 8583249, 8591441, 8661073, 8722513, 8091730, 8210514, 8255570, 8267858, 8345682, 8542290, 8591442, 8624210, 8661074, 8116307, 8206419, 8247379, 8255571, 8284243, 8374355, 8570963, 8632403, 8656979, 8693843, 8247380, 8255572, 8276052, 8300628, 8357972, 8411220, 8423508, 8689748, 8714324, 8263765, 8345685, 8280150, 8296534, 8521814, 8656982, 8280151, 8304727, 8403031, 8542295, 8656983, 8276056, 8308824, 8349784, 8382552, 8489048, 8493144, 8599640, 8607832, 8624216, 8648792, 8652888, 8251481, 8276057, 8288345, 8308825, 8489049, 8521817, 8525913, 8534105, 8562777, 8587353, 8611929, 8661081, 8292442, 8300634, 8341594, 8362074, 8448090, 8460378, 8489050, 8591450, 8374363, 8407131, 8415323, 8427611, 8435803, 8439899, 8452187, 8579163, 8636507, 8337500, 8390748, 8407132, 8480860, 8489052, 8558684, 8583260, 8616028, 8644700, 8222813, 8493149, 8521821, 8575069, 8583261, 8300638, 8501342, 8505438, 8562782, 8575070, 8673374, 8312927, 8452191, 8517727, 8538207, 8542303, 8587359, 8603743, 8611935, 8337504, 8456288, 8476768, 8509536, 8566880, 8611936, 8415329, 8427617, 8497249, 8505441, 8546401, 8370274, 8513634, 8325219, 8415331, 8472675, 8558691, 8231012, 8484964, 8530020, 8513637, 8517733, 8583269, 8595557, 8378470, 8431718, 8497254, 8530022, 8267884]
SparseBitmap.Space3 = [8345479, 8234891, 8378256, 8382355, 8419223, 8042395, 8574878, 8337312, 8386465, 8251298, 8406946, 8587170, 8198051, 8390563, 8394659, 8214436, 8226724, 8312740, 8316836, 8206245, 8210341, 8251301, 8284069, 8345509, 8165286, 8259494, 8275878, 8279974, 8284070, 8279975, 8595367, 8243112, 8333224, 8353704, 8120233, 8132521, 8153001, 8177577, 8181673, 8353705, 8357801, 8361897, 8374185, 8583081, 8599465, 8402858, 8431530, 8525738, 8591274, 8599466, 8603562, 8185771, 8189867, 8370091, 8533931, 8398764, 8587180, 8120237, 8148909, 8443821, 8120238, 8153006, 8415150, 8431534, 8505262, 8148911, 8435631, 8447919, 8607663, 8083376, 8091568, 8513456, 8079281, 8099761, 8300465, 8443825, 8460209, 8468401, 8513457, 8083378, 8292274, 8308658, 8468402, 8050611, 8075187, 8083379, 8103859, 8329139, 8456115, 8075188, 8279988, 8316852, 8333236, 8398772, 8468404, 8472500, 8484788, 8492980, 8509364, 8087477, 8480693, 8521654, 8533942, 8062903, 8071095, 8390583, 8394679, 8517559, 8521655, 8411064, 8415160, 8525752, 8538040, 8669112, 8398777, 8505273, 8501178, 8517562, 8521658, 8542138, 8546234, 8554426, 8398779, 8509371, 8669115, 8673211, 8030140, 8681404, 8710076, 8439741, 8509373, 8546237, 8669117, 8673213, 8677309, 8681405, 8697789, 8464319, 8714175, 8452032, 8452033, 8566721, 8300482, 8312770, 8452034, 8570818, 8574914, 8374211, 8435651, 8472515, 8562627, 8574915, 8558532, 8382405, 8480709, 8701893, 8206278, 8214470, 8562630, 8570822, 8579014, 8353735, 8574919, 8214472, 8464328, 8198089, 8316873, 8734665, 8746953, 8189898, 8193994, 8705994, 8435660, 8140749, 8456141, 8140750, 8144846, 8325070, 8443854, 8447950, 8505294, 8587214, 8587215, 8366032, 8435664, 8468432, 8267729, 8353745, 8357841, 8472529, 8603601, 8320978, 8341458, 8361938, 8374226, 8378322, 8284115, 8292307, 8296403, 8300499, 8325075, 8361939, 8398803, 8402899, 8431571, 8255444, 8304596, 8353748, 8370132, 8378324, 8394708, 8398804, 8468436, 8226773, 8288213, 8304597, 8329173, 8361941, 8382421, 8406997, 8427477, 8468437, 8632277, 8644565, 8239062, 8243158, 8267734, 8275926, 8374230, 8406998, 8591318, 8710102, 8226775, 8230871, 8259543, 8292311, 8382423, 8402903, 8427479, 8439767, 8488919, 8251352, 8263640, 8267736, 8292312, 8386520, 8402904, 8460248, 8619992, 8718296, 8234969, 8239065, 8255449, 8415193, 8423385, 8427481, 8607705, 8714201, 8718297, 8230874, 8251354, 8325082, 8419290, 8423386, 8431578, 8480730, 8615898, 8619994, 8632282, 8714202, 8718298, 8263643, 8394715, 8423387, 8427483, 8468443, 8509403, 8714203, 8222684, 8431580, 8468444, 8218589, 8439773, 8456157, 8464349, 8468445, 8484829, 8488925, 8222686, 8452062, 8460254, 8493022, 8206303, 8214495, 8222687, 8439775, 8480735, 8484831, 8628191, 8087520, 8091616, 8095712, 8206304, 8378336, 8517600, 8632288, 8087521, 8144865, 8472545, 8484833, 8488929, 8501217, 8214498, 8472546, 8493026, 8501218, 8505314, 8509410, 8562658, 8624098, 8628194, 8071139, 8095715, 8198115, 8210403, 8452067, 8497123, 8628195, 8194020, 8636388, 8038373, 8046565, 8185829, 8280037, 8443877, 8493029, 8497125, 8550373, 8632293, 8636389, 8034278, 8181734, 8185830, 8210406, 8488934, 8509414, 8521702, 8636390, 8038375, 8173543, 8177639, 8480743, 8501223, 8517607, 8632295, 8640487, 8181736, 8185832, 8378344, 8460264, 8517608, 8525800, 8624104, 8169449, 8398825, 8419305, 8423401, 8447977, 8472553, 8484841, 8505321, 8513513, 8665065, 8157162, 8181738, 8423402, 8427498, 8513514, 8517610, 8538090, 8636394, 8644586, 8169451, 8284139, 8411115, 8423403, 8427499, 8443883, 8456171, 8488939, 8493035, 8521707, 8538091, 8173548, 8423404, 8464364, 8476652, 8521708, 8538092, 8648684, 8656876, 8665068, 8140781, 8148973, 8337389, 8345581, 8349677, 8390637, 8407021, 8423405, 8435693, 8468461, 8484845, 8517613, 8529901, 8644589, 8140782, 8157166, 8357870, 8366062, 8402926, 8427502, 8431598, 8484846, 8505326, 8517614, 8529902, 8370159, 8374255, 8378351, 8386543, 8390639, 8394735, 8456175, 8460271, 8493039, 8501231, 8525807, 8538095, 8640495, 8169456, 8271856, 8484848, 8493040, 8505328, 8509424, 8644592, 8153073, 8431601, 8447985, 8480753, 8488945, 8501233, 8517617, 8148978, 8345586, 8390642, 8456178, 8493042, 8501234, 8513522, 8538098, 8546290, 8644594, 8153075, 8251379, 8316915, 8402931, 8460275, 8493043, 8529907, 8337396, 8345588, 8349684, 8394740, 8017909, 8124405, 8132597, 8136693, 8316917, 8337397, 8382453, 8509429, 8636405, 8030198, 8132598, 8361974, 8431606, 8628214, 8640502, 8644598, 8329207, 8497143, 8628215, 8308728, 8333304, 8431608, 8509432, 8640504, 8742904, 8108025, 8329209, 8357881, 8386553, 8468473, 8480761, 8734713, 8112122, 8300538, 8378362, 8390650, 8398842, 8460282, 8493050, 8624122, 8640506, 8714234, 8726522, 8734714, 8284155, 8308731, 8374267, 8386555, 8402939, 8460283, 8501243, 8505339, 8722427, 8734715, 8304636, 8325116, 8374268, 8378364, 8468476, 8484860, 8497148, 8644604, 8734716, 8136701, 8230909, 8361981, 8382461, 8402941, 8624125, 8390654, 8484862, 8644606, 8648702, 8128511, 8357887, 8366079, 8374271, 8378367, 8382463, 8386559, 8390655, 8394751, 8398847, 8472575, 8640511, 8120320, 8280064, 8292352, 8304640, 8308736, 8370176, 8386560, 8398848, 8423424, 8456192, 8472576, 8476672, 8554496, 8648704, 8382465, 8386561, 8398849, 8443905, 8460289, 8488961, 8554497, 8558593, 8624129, 8280066, 8321026, 8374274, 8443906, 8464386, 8468482, 8628226, 8636418, 8271875, 8284163, 8407043, 8472579, 8603651, 8620035, 8030212, 8267780, 8292356, 8296452, 8308740, 8312836, 8394756, 8456196, 8636420, 8251397, 8267781, 8271877, 8284165, 8292357, 8439813, 8448005, 8452101, 8472581, 8550405, 8636421, 8280070, 8345606, 8361990, 8411142, 8468486, 8615942, 8620038, 8624134, 8259591, 8263687, 8271879, 8620039, 8259592, 8263688, 8271880, 8292360, 8300552, 8411144, 8443912, 8120329, 8128521, 8243209, 8251401, 8345609, 8378377, 8443913, 8448009, 8615945, 8116234, 8120330, 8239114, 8267786, 8280074, 8300554, 8366090, 8620042, 8120331, 8263691, 8267787, 8284171, 8407051, 8415243, 8423435, 8603659, 8607755, 8611851, 8620043, 8624139, 8693771, 8112140, 8116236, 8120332, 8239116, 8263692, 8316940, 8357900, 8423436, 8468492, 8611852, 8615948, 8120333, 8230925, 8247309, 8251405, 8259597, 8624141, 8742925, 8759309, 8267790, 8296462, 8304654, 8370190, 8382478, 8419342, 8603662, 8607758, 8001551, 8124431, 8222735, 8259599, 8280079, 8284175, 8292367, 8312847, 8361999, 8394767, 8411151, 8501263, 8615951, 8263696, 8288272, 8296464, 8357904, 8411152, 8419344, 8423440, 8501264, 8505360, 8595472, 8599568, 8271889, 8275985, 8337425, 8353809, 8374289, 8521745, 8103954, 8263698, 8267794, 8292370, 8300562, 8304658, 8312850, 8325138, 8337426, 8345618, 8349714, 8374290, 8378386, 8394770, 8415250, 8579090, 8583186, 8615954, 8112147, 8239123, 8255507, 8271891, 8280083, 8288275, 8296467, 8308755, 8398867, 8599571, 8681491, 8255508, 8263700, 8271892, 8284180, 8296468, 8300564, 8304660, 8312852, 8333332, 8431636, 8591380, 8693780, 8259605, 8280085, 8292373, 8296469, 8300565, 8398869, 8493077, 8595477, 8599573, 8095766, 8284182, 8353814, 8579094, 8583190, 8587286, 8599574, 8259607, 8267799, 8284183, 8292375, 8304663, 8345623, 8615959, 8132632, 8275992, 8280088, 8312856, 8579096, 8239129, 8271897, 8284185, 8300569, 8308761, 8566809, 8271898, 8284186, 8292378, 8296474, 8304666, 8562714, 8128539, 8132635, 8136731, 8251419, 8259611, 8275995, 8296475, 8329243, 8443931, 8284188, 8308764, 8439836, 8521756, 8579100, 8591388, 8120349, 8296477, 8308765, 8312862, 8329246, 8542238, 8566814, 8570910, 8026143, 8136735, 8292383, 8304671, 8308767, 8312863, 8316959, 8534047, 8538143, 8554527, 8136736, 8542240, 8570912, 8292385, 8296481, 8300577, 8325153, 8329249, 8333345, 8337441, 8525857, 8529953, 8550433, 8013858, 8337442, 8353826, 8357922, 8521762, 8546338, 8566818, 8136739, 8296483, 8321059, 8329251, 8476707, 8509475, 8521763, 8525859, 8534051, 8628259, 8128548, 8316964, 8321060, 8325156, 8337444, 8349732, 8390692, 8632356, 8214565, 8325157, 8329253, 8345637, 8357925, 8427557, 8443941, 8452133, 8120358, 8316966, 8325158, 8386598, 8472614, 8484902, 8497190, 8505382, 8521766, 8624166, 8628262, 8333351, 8337447, 8341543, 8394791, 8419367, 8423463, 8448039, 8456231, 8468519, 8484903, 8624167, 8325160, 8345640, 8349736, 8423464, 8439848, 8472616, 8480808, 8509480, 8411177, 8423465, 8427561, 8443945, 8448041, 8489001, 8632361, 8411178, 8427562, 8443946, 8464426, 8501290, 8661034, 8353835, 8624171, 8136748, 8386604, 8136749, 8144941, 8378413, 8378414, 8153135, 8149040, 8153136, 8292400, 8362032, 8140849, 8337457, 8345649, 8149042, 8153138, 8312882, 8329266, 8538162, 8149043, 8157235, 8136756, 8140852, 8165428, 8300596, 8341556, 8534068, 8546356, 8169525, 8161334, 8173622, 8181815, 8177720, 8194111, 8755264, 8202306, 8210498, 8747074, 8210499, 8206404, 8210500, 8198213, 8206405, 8214597, 8751173, 8763461, 8222790, 8763462, 8218696, 8226888, 8759368, 8218697, 8767561, 8235083, 8214604, 8689742, 8099921, 8673361, 8292436, 8251477, 8296533, 8317015, 8300632, 8317016, 8366168, 8292441, 8321113, 8378457, 8312923, 8337499, 8484955, 8517723, 8341596, 8374364, 8423516, 8464476, 8472668, 8497244, 8505436, 8570972, 8300637, 8321117, 8329309, 8378461, 8464477, 8378462, 8419422, 8472670, 8403039, 8419423, 8489055, 8333408, 8427616, 8517728, 8411233, 8509537, 8538210, 8468579, 8505443, 8259692]
Print.thurster_range = fun(_x0) -> Vec2List.map_add(Image.from_image_list_with_mergin([Image.from_bitmap(Bitmap.Thruster), [cons(0, 0), cons(1, 0), cons(2, 0), cons(0, 1), cons(0, 2), cons(1, 2), cons(2, 2)], [cons(1, 0), cons(0, 1), cons(1, 1)], [cons(0, 1), cons(2, 1), cons(4, 1), cons(6, 1)], Image.from_int(2)], 0, [2, 2, 0, 0, 0]), _x0)
Print.heat_range = fun(_x0) -> Vec2List.map_add(Image.from_image_list_with_mergin([Image.from_bitmap(Bitmap.Heat), [cons(0, 0), cons(1, 0), cons(2, 0), cons(0, 1), cons(0, 2), cons(1, 2), cons(2, 2)], [cons(1, 0), cons(0, 1)], [cons(0, 1), cons(2, 1), cons(4, 1), cons(6, 1)], Image.from_int(64)], 0, [2, 2, 0, 0, 0]), _x0)
Msg.error = [0]
Msg.create = fun(_x0) -> [1, _x0]
Msg.join = fun(_x0, _x1) -> [2, _x0, _x1]
Msg.start = fun(_x0, _x1) -> [3, _x0, _x1]
Msg.command = fun(_x0, _x1) -> [4, _x0, _x1]
Msg.history = fun(_x0) -> [5, _x0]
cons = cons
List.hd = fun(_x0, _x1) -> if isnil(_x0) { _x1 } else { car(_x0) }
Int.pow2 = fun(_x0) -> if 0 == _x0 { 1 } else { 2 * Int.pow2(_x0 - 1) }
Int.log2 = fun(_x0) -> if _x0 < 2 { 0 } else { 1 + Int.log2(_x0 / 2) }
Int.log_x_y = fun(_x0, _x1) -> if _x0 < _x1 { 0 } else { 1 + Int.log_x_y(_x0 / _x1, _x1) }
Int.abs = fun(_x0) -> if 0 < _x0 || 0 == _x0 { _x0 } else { -_x0 }
Int.max = fun(_x0, _x1) -> if _x0 < _x1 { _x1 } else { _x0 }
Int.min = fun(_x0, _x1) -> if _x0 < _x1 { _x0 } else { _x1 }
List.mem = fun(_x0, _x1) -> match _x0 { [] => false, _x2::_x3 => _x2 == _x1 || List.mem(_x3, _x1) }
List.map = fun(_x0, _x1) -> match _x0 { [] => [], _x2::_x3 => cons(_x1(_x2), List.map(_x3, _x1)) }
List.mapi = fun(_x0, _x1, _x2) -> match _x0 { [] => [], _x3::_x4 => cons(_x1(_x3, _x2), List.mapi(_x4, _x1, _x2 + 1)) }
List.len = fun(_x0) -> if isnil(_x0) { 0 } else { 1 + List.len(cdr(_x0)) }
List.concat = fun(_x0, _x1) -> match _x0 { [] => _x1, _x2::_x3 => cons(_x2, List.concat(_x3, _x1)) }
List.foldl = fun(_x0, _x1, _x2) -> match _x0 { [] => _x1, _x3::_x4 => List.foldl(_x4, _x2(_x1, _x3), _x2) }
List.foldr = fun(_x0, _x1, _x2) -> match _x0 { [] => _x1, _x3::_x4 => _x2(List.foldr(_x4, _x1, _x2), _x3) }
List.flatten = fun(_x0) -> List.foldr(_x0, [], fun(_x1, _x2) -> List.concat(_x2, _x1))
List.filter = fun(_x0, _x1) -> List.foldr(_x0, [], fun(_x2, _x3) -> _x1(_x3, cons(_x3, _x2), _x2))
List.filteri = fun(_x0, _x1) -> List.map(List.filter(List.mapi(_x0, cons, 0), fun(_x2) -> _x1(car(_x2), cdr(_x2))), car)
List.exists = fun(_x0, _x1) -> !isnil(List.filter(_x0, _x1))
IntList.make_rev = fun(_x0) -> if _x0 < 0 || _x0 == 0 { [] } else { cons(_x0 - 1, IntList.make_rev(_x0 - 1)) }
IntList.make = fun(_x0) -> List.map(IntList.make_rev(_x0), fun(_x1) -> _x0 - _x1 - 1)
List.nth = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> if 0 == _x1 { _x2 } else { List.nth(_x3, _x1 - 1) })
List.nth_list = fun(_x0, _x1) -> match _x0 { [] => [], _x2::_x3 => if 0 == _x1 { _x2 } else { List.nth_list(_x3, _x1 - 1) } }
IntList.sum = fun(_x0) -> List.foldl(_x0, 0, add)
List.replace_nth = fun(_x0, _x1, _x2) -> _x0(fun(_x3, _x4) -> if 0 == _x1 { cons(_x2, _x4) } else { cons(_x3, List.replace_nth(_x4, _x1 - 1, _x2)) })
IntList.max = fun(_x0) -> _x0(fun(_x1, _x2) -> List.foldl(_x2, _x1, fun(_x3, _x4) -> if _x3 < _x4 { _x4 } else { _x3 }))
List.select = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> List.foldl(_x3, _x2, fun(_x4, _x5) -> _x1(_x4, _x5, _x5, _x4)))
IntList.min = fun(_x0) -> _x0(fun(_x1, _x2) -> List.foldl(_x2, _x1, fun(_x3, _x4) -> if _x4 < _x3 { _x4 } else { _x3 }))
List.map_sort = fun(_x0, _x1) -> List.sort(_x0, fun(_x2, _x3) -> _x1(_x2) < _x1(_x3))
List.sort = fun(_x0, _x1) -> match _x0 { [] => [], _x2::_x3 => let _x4 = List.sort(List.filter(_x3, fun(_x5) -> _x1(_x5, _x2)), _x1) in List.concat(List.concat(_x4, List.filter(_x0, fun(_x6) -> !(_x1(_x2, _x6) || _x1(_x6, _x2)))), List.sort(List.filter(_x3, fun(_x7) -> _x1(_x2, _x7)), _x1)) }
List.filter2 = fun(_x0, _x1) -> match _x0 { [] => _x0, _x2::_x3 => if isnil(_x3) { _x0 } else { _x3(fun(_x4) -> true(_x1(_x2, _x4, cons(_x2, List.filter2(_x3, _x1)), List.filter2(_x3, _x1)))) } }
IntList.unique = fun(_x0) -> List.filter2(List.sort(_x0, <), <)
Vec2.new = cons
Rect.new = fun(_x0, _x1, _x2, _x3) -> cons(Vec2.new(_x0, _x1), Vec2.new(_x2, _x3))
Rect.from_vecs = cons
Rect.from_center = fun(_x0, _x1) -> cons(Vec2.add(_x0, Vec2.new(-_x1, -_x1)), Vec2.new(2 * _x1 + 1, 2 * _x1 + 1))
Rect.move = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> Rect.from_vecs(Vec2.add(_x2, _x1), _x3))
Vec2.add = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> _x1(fun(_x4, _x5) -> Vec2.new(_x2 + _x4, _x3 + _x5)))
Vec2.add_x_y = fun(_x0, _x1, _x2) -> _x0(fun(_x3, _x4) -> Vec2.new(_x3 + _x1, _x4 + _x2))
Vec2.add_x = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> Vec2.new(_x2 + _x1, _x3))
Vec2.x = fun(_x0) -> _x0(true)
Vec2.x_list = fun(_x0) -> IntList.max(List.map(_x0, Vec2.y))
Vec2.y = fun(_x0) -> _x0(false)
Vec2.add_y = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> Vec2.new(_x2, _x3 + _x1))
Vec2.mul = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> Vec2.new(_x2 * _x1, _x3 * _x1))
Vec2.distance = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> _x1(fun(_x4, _x5) -> let _x6 = if _x5 < _x3 { _x3 - _x5 } else { _x5 - _x3 } in (let _x7 = _x6 in let _x8 = if _x4 < _x2 { _x2 - _x4 } else { _x4 - _x2 } in (_x7 < _x8)(_x8))(_x6)))
Vec2List.map_add = fun(_x0, _x1) -> List.map(_x0, fun(_x2) -> Vec2.add(_x2, _x1))
Vec2List.map_add_x = fun(_x0, _x1) -> List.map(_x0, fun(_x2) -> Vec2.add(_x2, Vec2.new(_x1, 0)))
Vec2List.map_add_y = fun(_x0, _x1) -> List.map(_x0, fun(_x2) -> Vec2.add(_x2, Vec2.new(0, _x1)))
Result.no_data = fun(_x0) -> [0, _x0, []]
Result.to_render = fun(_x0, _x1) -> [0, _x0, _x1]
Result.to_send = fun(_x0, _x1) -> [1, _x0, _x1]
Image.dot_line = fun(_x0, _x1, _x2) -> List.filteri(Image.line(_x0, _x1), true(fun(_x3) -> 0 == _x3 % _x2 || Vec2.distance(_x0, _x1) == _x3))
Image.line = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> _x1(fun(_x4, _x5) -> let _x6 = _x4 - _x2 in let _x7 = _x5 - _x3 in let _x8 = Int.max(Int.abs(_x6), Int.abs(_x7)) in if 0 == _x8 { [_x0] } else { List.map(IntList.make(_x8 + 1), fun(_x9) -> Vec2.new(_x2 + _x9 * _x6 / _x8, _x3 + _x9 * _x7 / _x8)) }))
Image.x_line = fun(_x0, _x1, _x2) -> List.map(IntList.make_rev(_x2), fun(_x3) -> Vec2.new(_x0 + _x3, _x1))
Image.x_dot_line = fun(_x0, _x1, _x2) -> List.map(List.filter(IntList.make_rev(_x2), fun(_x3) -> 0 == _x3 % 2), fun(_x4) -> Vec2.new(_x0 + _x4, _x1))
Image.y_line = fun(_x0, _x1, _x2) -> List.map(IntList.make_rev(_x2), fun(_x3) -> Vec2.new(_x0, _x1 + _x3))
Image.center_rect_bound = fun(_x0) -> Image.rect_bound(-_x0, -_x0, 2 * _x0 + 1, 2 * _x0 + 1)
Image.center_fill_rect = fun(_x0) -> Image.fill_rect(-_x0, -_x0, 2 * _x0 + 1, 2 * _x0 + 1)
Image.rect_bound = fun(_x0, _x1, _x2, _x3) -> List.concat(List.concat(List.concat(Image.x_line(_x0, _x1, _x2), Image.x_line(_x0, _x1 + _x3 - 1, _x2)), Image.y_line(_x0, _x1, _x3)), Image.y_line(_x0 + _x2 - 1, _x1, _x3 - 1))
Image.fill_rect = fun(_x0, _x1, _x2, _x3) -> Image.fill_rect_aux(_x0, _x1, _x3, _x2 * _x3 - 1)
Image.fill_rect_aux = fun(_x0, _x1, _x2, _x3) -> if _x3 < 0 { [] } else { cons(Vec2.new(_x0 + _x3 / _x2, _x1 + _x3 % _x2), Image.fill_rect_aux(_x0, _x1, _x2, _x3 - 1)) }
Int.in_range = fun(_x0, _x1, _x2) -> (_x1 < _x0 || _x1 == _x0) && _x0 < _x2
Image.contained_rect = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> _x1(fun(_x4, _x5) -> _x4(fun(_x6, _x7) -> _x5(fun(_x8, _x9) -> Int.in_range(_x2, _x6, _x6 + _x8) && Int.in_range(_x3, _x7, _x7 + _x9)))))
Image.make_bound = fun(_x0) -> List.concat(List.map(IntList.make_rev(_x0), fun(_x1) -> Vec2.new(1 + _x1, 0)), List.map(IntList.make_rev(_x0), fun(_x2) -> Vec2.new(0, 1 + _x2)))
Image.from_uint = fun(_x0, _x1) -> cdr(List.foldl(_x0, cons(0, Image.make_bound(_x1)), fun(_x2, _x3) -> _x2(fun(_x4, _x5) -> cons(_x4 + 1, if 0 == _x3 { _x5 } else { cons(Vec2.new(1 + _x4 % _x1, 1 + _x4 / _x1), _x5) }))))
Bit.make = fun(_x0) -> if 0 == _x0 { [] } else { cons(_x0 % 2, Bit.make(_x0 / 2)) }
Bit.make_n = fun(_x0, _x1) -> if 0 == _x1 { [] } else { cons(_x0 % 2, Bit.make_n(_x0 / 2, _x1 - 1)) }
Bit.from_int = fun(_x0) -> if 0 == _x0 { [0] } else { Bit.make(_x0) }
Int.ceil_sqr = fun(_x0) -> if _x0 < 0 || _x0 == 0 { 0 } else { car(List.filter(IntList.make(_x0 + 1), fun(_x1) -> let _x2 = _x1 * _x1 in _x0 < _x2 || _x0 == _x2)) }
Image.from_int_or_symbol = fun(_x0, _x1) -> let _x2 = Bit.from_int(if 0 < _x1 || 0 == _x1 { _x1 } else { -_x1 }) in let _x3 = Int.ceil_sqr(List.len(_x2)) in let _x4 = List.concat(Image.from_uint(_x2, _x3), if _x1 < 0 { [Vec2.new(0, _x3 + 1)] } else { [] }) in _x0(cons(Vec2.new(0, 0), _x4), _x4)
Image.from_int_or_symbol_with_size = fun(_x0, _x1, _x2) -> let _x3 = Bit.from_int(if 0 < _x1 || 0 == _x1 { _x1 } else { -_x1 }) in let _x4 = List.concat(Image.from_uint(_x3, _x2), if _x1 < 0 { [Vec2.new(0, _x2 + 1)] } else { [] }) in _x0(cons(Vec2.new(0, 0), _x4), _x4)
Image.from_int = Image.from_int_or_symbol(false)
Image.from_int_left = fun(_x0) -> let _x1 = Image.from_int_or_symbol(false, _x0) in Vec2List.map_add(_x1, Vec2.new(-IntList.max(List.map(_x1, Vec2.x)), 0))
Image.from_int_left_top = fun(_x0) -> let _x1 = Image.from_int_or_symbol(false, _x0) in Vec2List.map_add(_x1, let _x2 = IntList.max(List.map(_x1, Vec2.x)) in Vec2.new(-_x2, -_x2))
Image.from_int_with_size = Image.from_int_or_symbol_with_size(false)
Image.from_int_list = fun(_x0) -> Image.from_image_list(List.map(_x0, Image.from_int), 0)
Image.from_image_list = fun(_x0, _x1) -> match _x0 { [] => [], _x2::_x3 => let _x4 = Vec2List.map_add(_x2, Vec2.new(_x1, 0)) in List.concat(_x4, Image.from_image_list(_x3, IntList.max(List.map(_x4, fun(_x5) -> car(_x5))) + 3)) }
Image.from_image_list_with_mergin = fun(_x0, _x1, _x2) -> match _x0 { [] => [], _x3::_x4 => _x2(fun(_x5, _x6) -> let _x7 = Vec2List.map_add(_x3, Vec2.new(_x1, 0)) in List.concat(_x7, Image.from_image_list_with_mergin(_x4, IntList.max(List.map(_x7, fun(_x8) -> car(_x8))) + 3 + _x5, _x6))) }
Image.from_bitmap_list = fun(_x0) -> if isnil(_x0) { [] } else { Image.from_image_list(List.map(_x0, Image.from_bitmap), 0) }
Image.bounding_box = fun(_x0) -> let _x1 = IntList.min(List.map(_x0, car)) in let _x2 = IntList.min(List.map(_x0, cdr)) in Rect.new(_x1, _x2, IntList.max(List.map(_x0, car)) - _x1 + 1, IntList.max(List.map(_x0, cdr)) - _x2 + 1)
Image.from_bitmap = fun(_x0) -> _x0(fun(_x1, _x2) -> List.map(List.map(List.filter(List.mapi(List.flatten(List.map(_x2, fun(_x3) -> Bit.make_n(_x3, 63))), cons, 0), fun(_x4) -> 1 == car(_x4)), cdr), fun(_x5) -> Vec2.new(_x5 % _x1, _x5 / _x1)))
Image.from_sparse_bitmap = fun(_x0) -> List.map(_x0, fun(_x1) -> Vec2.new(_x1 / 4096 - 2048, _x1 % 4096 - 2048))
Opening.Scene = [Opening.run, [-1]]
Opening.run = fun(_x0, _x1) -> List.nth(_x0, 1, fun(_x2) -> true(_x1(fun(_x3, _x4) -> let _x5 = if Image.contained_rect(Vec2.new(_x3, _x4), Rect.new(-3, -3, 7, 7)) { _x2 + 1 } else { _x2 } in if 4 < _x5 || 4 == _x5 { Garaxy.next_scene(_x0, Garaxy.ModeCariblation, List.nth(Cariblation.Scene, 1)) } else { Result.to_render(List.replace_nth(_x0, 1, [_x5]), Opening.draw_count_down(_x5)) })))
Opening.draw_count_down = fun(_x0) -> let _x1 = Vec2.new(-3, -3) in [Vec2List.map_add(Image.from_bitmap(Bitmap.Galaxy), _x1), Vec2List.map_add(Vec2List.map_add(Image.from_int(_x0), Vec2.new(-5, 0)), _x1), Vec2List.map_add(:1230(_x0), _x1)]
:1230 = fun(_x0) -> if _x0 < 4 { [] } else { if 4 == _x0 { List.concat(Image.rect_bound(-1, -1, 9, 9), Image.rect_bound(-6, -1, 5, 5)) } else { List.concat(Image.fill_rect(-1, -1, 9, 9), Image.fill_rect(-6, -1, 5, 5)) } }
History.InitSceneState = [0, 0, [], [], [], [], [], 0]
History.Scene = [History.run, History.InitSceneState]
:1233 = 0
:1234 = 1
:1235 = 2
:1236 = 3
:1237 = 4
:1238 = 5
:1239 = 6
:1240 = 7
:1241 = 8
:1242 = 9
:1243 = 10
:1244 = 11
:1245 = 12
:1246 = 13
History.HistoryList = [[0, 206919795632185305, 1, 10, 0, -17782320571, false], [1, 5505453539124369704, 2, 10, 1, -41425561822, true], [2, 1453706522611801003, 2, 6, 0, -62144478180, false], [3, 1002667954424443802, 4, 6, 0, -63611317023, true], [4, 6401706522611801001, 5, 6, 1, -69073892261, false], [5, 270608505102339400, 5, 8, 0, -71253615015, false]]
:1248 = -14
:1249 = 19
:1250 = -2 - :1249
:1251 = :1249 - 2
:1252 = [1, 4, 12, 2]
History.run = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 1) in if 0 == List.nth(_x2, 0) { :1287(_x0, _x2) } else { if 1 == List.nth(_x2, 0) { :1254(_x0, _x2, _x1) } else { if 5 == List.nth(_x2, 0) { :1281(_x0, _x2, _x1) } else { if 9 == List.nth(_x2, 0) { :1283(_x0, _x2, _x1) } else { if 10 == List.nth(_x2, 0) { :1282(_x0, _x2, _x1) } else { :1255(_x0, _x2, _x1) } } } } }
:1254 = fun(_x0, _x1, _x2) -> :1284(_x0, List.replace_nth(List.replace_nth(_x1, 7, List.nth(_x2, 1)), 0, 2))
:1255 = fun(_x0, _x1, _x2) -> let _x3 = Interact.find_clicked(:1256(_x0, _x1), _x2) in if isnil(_x3) { :1284(_x0, _x1) } else { if :1245 == List.nth(_x3, 1) { :1287(List.replace_nth(_x0, 2, Int.min(List.nth(_x0, 2) + 1, Int.max(List.nth(_x0, 2), List.len(History.HistoryList) + 2))), _x1) } else { if :1234 == List.nth(_x3, 1) { :1284(_x0, List.replace_nth(List.replace_nth(_x1, 0, 3), 6, :1266(-3))) } else { if :1246 == List.nth(_x3, 1) { Garaxy.next_scene(_x0, Garaxy.ModeTutorial, List.nth(Tutorial.Scene, 1)) } else { if :1233 == List.nth(_x3, 1) { :1287(_x0, List.replace_nth(_x1, 1, 0)) } else { if :1235 == List.nth(_x3, 1) { :1286(_x0, _x1) } else { if :1236 == List.nth(_x3, 1) { :1284(_x0, List.replace_nth(List.replace_nth(_x1, 1, 0), 0, 4)) } else { if :1237 == List.nth(_x3, 1) { :1284(_x0, List.replace_nth(_x1, 1, List.nth(_x3, 2))) } else { if :1239 == List.nth(_x3, 1) { :1288(_x0, List.replace_nth(_x1, 1, List.nth(_x3, 2))) } else { if :1244 == List.nth(_x3, 1) { let _x4 = List.nth(_x3, 2) in :1288(_x0, List.replace_nth(List.replace_nth(_x1, 1, List.nth(List.nth(History.HistoryList, _x4), 1)), 6, :1266(_x4))) } else { if :1240 == List.nth(_x3, 1) { Garaxy.next_scene(_x0, Garaxy.ModeTutorial, :1348(List.nth(_x1, 1), List.nth(List.nth(_x1, 5), 5))) } else { if :1238 == List.nth(_x3, 1) { :1289(_x0, List.replace_nth(_x1, 1, List.nth(_x3, 2))) } else { if :1241 == List.nth(_x3, 1) { :1285(_x0, _x1, List.nth(_x3, 2), fun(_x5) -> if 0 == _x5 { 1 } else { 2 * _x5 }) } else { if :1242 == List.nth(_x3, 1) { :1285(_x0, _x1, List.nth(_x3, 2), fun(_x6) -> _x6 / 2) } else { if :1243 == List.nth(_x3, 1) { Garaxy.next_scene(_x0, Garaxy.ModeTutorial, let _x7 = List.replace_nth(_x1, 1, List.nth(_x3, 2)) in :1349(List.nth(_x7, 1), List.nth(List.nth(_x7, 4), 2), List.nth(_x7, 2))) } else { :1340(_x0, :1256, _x1) } } } } } } } } } } } } } } }
:1256 = fun(_x0, _x1) -> let _x2 = Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Galaxy), :1245, 0) in let _x3 = :1261(_x0, _x1) in let _x4 = :1259(_x0, _x1) in let _x5 = :1279(_x0, _x1) in let _x6 = List.nth(_x1, 0) in if 2 == _x6 { if List.len(History.HistoryList) + 2 == List.nth(_x0, 2) { Interact.seq3(_x2, :1485(_x4, :1266(-2)), _x3) } else { if List.len(History.HistoryList) + 3 == List.nth(_x0, 2) { Interact.seq4(_x2, :1485(_x5, :1266(-3)), :1485(_x4, :1266(-2)), _x3) } else { Interact.seq2(_x2, _x3) } } } else { let _x7 = Interact.push_image(Interact.push_image(_x3)) in let _x8 = List.nth(_x1, 6) in let _x9 = :1277(_x0, _x1) in if 3 == _x6 { Interact.seq2(_x7, :1485(_x9, _x8)) } else { if 4 == _x6 { Interact.seq3(:1485(:1290(_x0, _x1), _x8), _x7, :1485(Interact.push_image(_x9), _x8)) } else { if 6 == _x6 { Interact.seq3(:1485(:1276(_x0, _x1), _x8), :1485(_x5, _x8), _x7) } else { if 8 == _x6 { Interact.seq3(:1485(:1270(_x0, _x1), _x8), :1485(_x5, _x8), _x7) } else { if 7 == _x6 { let _x10 = :1485(:1278(_x1), _x8) in (let _x11 = :1257(List.nth(_x1, 1)) in Interact.seq4(:1485(:1267(_x1), _x8), _x11(Interact.push_image(_x10), _x10), :1485(_x5, _x8)))(_x7) } else { :1483(Vec2.new(0, 0), Image.from_bitmap(Bitmap.VarX0)) } } } } } }
:1257 = fun(_x0) -> !isnil(List.filter(History.HistoryList, fun(_x1) -> _x0 == List.nth(_x1, 1)))
:1258 = fun(_x0) -> let _x1 = List.filter(History.HistoryList, fun(_x2) -> _x0 == List.nth(_x2, 1)) in if isnil(_x1) { [] } else { car(_x1) }
:1259 = true(true(Interact.seq([Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Game), :1246, 0), :1482(Vec2.new(-2, -9), Image.from_bitmap(Bitmap.VarX0))])))
:1260 = fun(_x0) -> let _x1 = List.filter(History.HistoryList, fun(_x2) -> _x0 == List.nth(_x2, 1)) in if isnil(_x1) { cons(-2, -1) } else { let _x3 = car(_x1) in cons(List.nth(_x3, 2), List.nth(_x3, 3)) }
:1261 = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 2) in let _x3 = List.len(History.HistoryList) in let _x4 = :1262(_x2, List.len(History.HistoryList), List.nth(_x1, 7)) in let _x5 = if 0 < _x2 { :1482(Vec2.add_x(:1266(_x3), -3), Image.from_bitmap([7, 10880])) } else { [[], []] } in let _x6 = cons(_x5, cons(_x4, List.map(List.filter(History.HistoryList, fun(_x7) -> let _x8 = List.nth(_x7, 0) in let _x9 = _x3 - _x2 in _x9 < _x8 || _x9 == _x8), fun(_x10) -> :1265(List.nth(_x10, 0), List.nth(_x10, 1), 0 == List.nth(_x10, 4))))) in if _x3 < _x2 { Interact.seq(cons(:1263(List.nth(car(History.HistoryList), 3)), _x6)) } else { Interact.seq(_x6) }
:1262 = fun(_x0, _x1, _x2) -> :1266(_x1 - 1, fun(_x3) -> true(:1266(-5, fun(_x4) -> true(let _x5 = _x3 - 12 in let _x6 = List.len(History.HistoryList) in let _x7 = _x4 + 3 in let _x8 = List.flatten(List.map(List.filter(History.HistoryList, fun(_x9) -> let _x10 = List.nth(_x9, 0) in let _x11 = _x6 - _x0 in _x11 < _x10 || _x11 == _x10), fun(_x12) -> Vec2List.map_add(Image.from_int(List.nth(_x12, 5) - _x2), Vec2.new(Vec2.x(:1266(List.nth(_x12, 0))) - 3, 51)))) in :1482(Vec2.new(0, 0), List.concat(List.concat(List.concat(List.concat(Image.x_line(_x5, 48, -_x5), Image.x_dot_line(_x5 - 1 - 8, 48, 8)), Vec2List.map_add(Image.from_int(0), Vec2.new(0, 51))), _x8), if _x0 < _x6 || _x0 == _x6 { [] } else { List.concat(Image.x_dot_line(1, 48, _x7 - 1), Vec2List.map_add(Image.from_int(_x2), Vec2.new(_x4 - 3, 51))) }))))))
:1263 = fun(_x0) -> :1266(-5, fun(_x1, _x2) -> :1266(0, fun(_x3) -> true(Interact.seq([:1482(Vec2.new(_x1 - 3, _x2 - 3), Image.from_bitmap(Bitmap.Game)), :1482(Vec2.new(_x1 - 3, _x2 - 12), Image.from_sparse_bitmap(SparseBitmap.SymbolHuman)), :1482(Vec2.new(_x3 + 5, _x2 + 8), Image.from_bitmap(Bitmap.FourDots)), :1482(Vec2.new(_x1 - 11, _x2 + 8), Image.from_bitmap(Bitmap.FourDots)), :1482(Vec2.new(_x1 - 3, _x2 + 6), Image.from_sparse_bitmap(List.nth(List.nth(Space.Aliens, _x0), 2)))]))))
:1264 = fun(_x0) -> if -2 == _x0 { Image.from_bitmap(Bitmap.VarX0) } else { if -1 == _x0 { Image.from_bitmap(Bitmap.VarX1) } else { Image.from_sparse_bitmap(List.nth(List.nth(Space.Aliens, _x0), 2)) } }
:1265 = fun(_x0, _x1, _x2) -> :1260(_x1, fun(_x3, _x4) -> let _x5 = _x2(9, -10) in let _x6 = _x4 in let _x7 = _x3 in let _x8 = :1266(_x0) in Interact.seq4(Interact.draw_clickable_at(Vec2.add_x_y(_x8, -3, -3), Image.from_bitmap(Bitmap.Game), :1244, _x0), :1482(Vec2.add_x_y(_x8, -3, -12), :1264(_x7)), :1482(Vec2.add_x_y(_x8, -3, 6), :1264(_x6)), :1482(_x8, Image.x_line(-7 - 5, _x5, 7))))
:1266 = fun(_x0) -> Vec2.new(-18 * (_x0 + 1), 0)
:1267 = fun(_x0) -> let _x1 = List.nth(List.nth(_x0, 5), 5) in let _x2 = car(List.nth(List.nth(_x0, 5), 4)) in let _x3 = if 3 == List.nth(_x2, 2) { List.nth(_x2, 0) } else { List.nth(car(cdr(List.nth(List.nth(_x0, 5), 4))), 0) } in let _x4 = car(List.nth(_x1, 1)) in let _x5 = List.nth(car(List.filter(List.nth(_x4, 1), fun(_x6) -> 0 == List.nth(List.nth(_x6, 0), 0))), 0) in let _x7 = List.nth(car(List.filter(List.nth(_x4, 1), fun(_x8) -> 1 == List.nth(List.nth(_x8, 0), 0))), 0) in let _x9 = :1258(List.nth(_x0, 1)) in :1260(List.nth(_x0, 1), fun(_x10, _x11) -> let _x12 = :1269(_x9, 1) in let _x13 = _x12(:1250, :1251) in Interact.seq(cons(Interact.draw_clickable_at(Vec2.new(7, -3), Image.from_bitmap(Bitmap.Galaxy), :1240, List.nth(_x0, 1)), let _x14 = _x12(:1251, :1250) in [:1273(Vec2.new(-2, _x13), 1, _x12, List.nth(_x7, 4), List.nth(_x7, 6), List.nth(_x7, 7)), :1273(Vec2.new(-2, _x14), 0, fun(_x15, _x16) -> _x12(_x16, _x15), List.nth(_x5, 4), List.nth(_x5, 6), List.nth(_x5, 7)), :1482(Vec2.new(16, 0), Image.x_line(0, 0, 32)), :1482(Vec2.new(50, 0), Image.from_image_list([Image.from_int(List.len(List.nth(_x1, 1))), :1264(:1268(_x9, _x3, _x10, _x11))], 0))])))
:1268 = fun(_x0, _x1, _x2, _x3) -> if isnil(_x0) || fun(_x4, _x5) -> List.nth(_x0, 6, _x5, _x4) { if 1 == _x1 { _x2 } else { _x3 } } else { if 0 == _x1 { _x2 } else { _x3 } }
:1269 = fun(_x0, _x1) -> if isnil(_x0) || fun(_x2, _x3) -> List.nth(_x0, 6, _x3, _x2) { 1 == _x1 } else { 0 == _x1 }
:1270 = true(fun(_x0) -> let _x1 = if 0 == List.nth(_x0, 1) { [[], []] } else { :1482(Vec2.new(:1248, -4), Image.from_int(List.nth(_x0, 1))) } in Interact.seq(cons(_x1, let _x2 = if 0 == List.nth(List.nth(List.nth(_x0, 4), 2), 1) { :1251 - 1 } else { :1250 - 1 } in [:1275(Vec2.new(-2, :1250), 1, _x0), :1275(Vec2.new(-2, :1251), 0, _x0), Interact.draw_clickable_at(Vec2.new(37, _x2), Image.from_bitmap(Bitmap.Galaxy), :1243, List.nth(_x0, 1)), :1271(Vec2.new(7, -2), _x0)])))
:1271 = fun(_x0, _x1) -> let _x2 = if 0 == List.nth(List.nth(List.nth(_x1, 4), 2), 1) { 1 } else { -1 } in Interact.seq4(:1272(_x0, Bitmap.Energy, List.nth(List.nth(_x1, 2), 0), 0, _x2), :1272(Vec2.add_x(_x0, 7), Bitmap.LaserMax, List.nth(List.nth(_x1, 2), 1), 1, _x2), :1272(Vec2.add_x(_x0, 14), Bitmap.Cooldown, List.nth(List.nth(_x1, 2), 2), 2, _x2), :1272(Vec2.add_x(_x0, 21), Bitmap.Life, List.nth(List.nth(_x1, 2), 3), 3, _x2))
:1272 = fun(_x0, _x1, _x2, _x3, _x4) -> _x0(fun(_x5, _x6) -> let _x7 = 1 + (if 0 == _x2 { 0 } else { Int.log2(_x2) + 1 }) in let _x8 = if _x4 < 0 { :1250 } else { :1251 } in let _x9 = if _x4 < 0 { _x6 - 2 - _x7 } else { _x6 + 6 + _x7 } in Interact.seq3(Interact.draw_clickable_at(Vec2.add(_x0, Vec2.new(0, _x8 + 2)), Image.from_int(_x2), :1241, _x3), [[], [Image.x_line(_x5, _x9, 5)]], Interact.draw_clickable_at(_x0, Image.from_bitmap(_x1), :1242, _x3)))
:1273 = fun(_x0, _x1, _x2, _x3, _x4, _x5) -> let _x6 = if 1 == _x1 { Bitmap.Defender4 } else { Bitmap.Attacker4 } in let _x7 = :1274(_x0, _x2, _x4, _x5) in if isnil(_x3) { Interact.seq2(_x7, :1482(_x0, Image.from_bitmap(_x6))) } else { Interact.seq([_x7, :1482(_x0, Image.from_bitmap(_x6)), :1482(Vec2.add_x(_x0, 9), Image.from_int(List.nth(_x3, 0))), :1482(Vec2.add_x(_x0, 16), Image.from_int(List.nth(_x3, 1))), :1482(Vec2.add_x(_x0, 23), Image.from_int(List.nth(_x3, 2))), :1482(Vec2.add_x(_x0, 30), Image.from_int(List.nth(_x3, 3)))]) }
:1274 = fun(_x0, _x1, _x2, _x3) -> let _x4 = if 64 < _x2 { Print.heat_range(Vec2.new(0, 0)) } else { [] } in let _x5 = List.concat(_x4, if 1 < _x3 { Print.thurster_range(Vec2.new(0, if isnil(_x4) { 0 } else { 7 })) } else { [] }) in _x1(:1480(Vec2.add_y(_x0, -16), _x5), :1481(Vec2.add_y(_x0, 16 + 5), _x5))
:1275 = fun(_x0, _x1, _x2) -> let _x3 = List.nth(List.nth(_x2, 4), 2) in let _x4 = if 1 == _x1 && 0 == List.nth(_x3, 1) { List.nth(_x3, 4) } else { [] } in let _x5 = _x1 == List.nth(_x3, 1) in :1273(_x0, _x1, 1 == _x1, _x4, _x5(List.nth(List.nth(_x3, 2), 2), 64), _x5(List.nth(List.nth(_x3, 2), 1), 1))
:1276 = true(fun(_x0) -> let _x1 = List.filter(List.nth(List.nth(_x0, 3), 1), fun(_x2) -> 1 == List.nth(_x2, 0)) in let _x3 = List.filter(List.nth(List.nth(_x0, 3), 1), fun(_x4) -> 0 == List.nth(_x4, 0)) in Interact.seq4(if isnil(_x1) { [[], []] } else { :1280(Vec2.new(-2, :1250), car(_x1)) }, if isnil(_x3) { [[], []] } else { :1280(Vec2.new(-2, :1251), car(_x3)) }, if isnil(_x1) { [[], []] } else { :1482(Vec2.new(:1248, -10), Image.from_int(List.nth(car(_x1), 1))) }, if isnil(_x3) { [[], []] } else { :1482(Vec2.new(:1248, 2), Image.from_int(List.nth(car(_x3), 1))) }))
:1277 = fun(_x0, _x1) -> Interact.seq3(:1279(_x0, _x1), :1278(_x1), Interact.draw_clickable_at(Vec2.new(6, -3), Image.from_bitmap(Bitmap.Galaxy), :1235, 0))
:1278 = fun(_x0) -> Interact.draw_clickable_at(Vec2.new(-14, -4), Image.from_int_with_size(List.nth(_x0, 1), 8), :1236, 0)
:1279 = true(fun(_x0) -> :1260(List.nth(_x0, 1), fun(_x1, _x2) -> let _x3 = if _x1 < 0 { 4 } else { 7 } in Interact.seq([Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Game), if 2 == List.nth(_x0, 0) { :1234 } else { :1233 }, 0), :1482(Vec2.new(-(_x3 / 2), -5 - _x3), :1264(_x1)), :1482(Vec2.new(-((if _x2 < 0 { 4 } else { 7 }) / 2), 6), :1264(_x2))])))
:1280 = fun(_x0, _x1) -> Interact.seq2(:1482(_x0, if 1 == List.nth(_x1, 0) { Image.from_bitmap(Bitmap.Defender4) } else { Image.from_bitmap(Bitmap.Attacker4) }), Interact.draw_clickable_at(Vec2.add(_x0, Vec2.new(8, -1)), Image.from_bitmap(Bitmap.Galaxy), :1238, List.nth(_x1, 1)))
:1281 = fun(_x0, _x1, _x2) -> if List.nth(_x2, 0) == 1 { :1284(_x0, List.replace_nth(List.replace_nth(_x1, 0, 6), 3, _x2)) } else { :1341(_x0) }
:1282 = fun(_x0, _x1, _x2) -> if 0 == List.nth(_x2, 0) { :1284(_x0, [3, 0, [], [], [], [], List.nth(_x1, 6), List.nth(_x1, 7)]) } else { let _x3 = List.nth(_x2, 2) in let _x4 = List.replace_nth(_x1, 5, _x2) in if 3 == _x3 { :1284(_x0, List.replace_nth(_x4, 0, 7)) } else { :1289(_x0, _x4) } }
:1283 = fun(_x0, _x1, _x2) -> if List.nth(_x2, 0) == 1 { let _x3 = List.nth(List.nth(List.nth(_x2, 2), 2), 0) in let _x4 = List.replace_nth(List.replace_nth(_x1, 4, _x2), 2, [_x3 - 2, 0, 0, 1]) in if 0 == List.nth(_x2, 1) { :1284(_x0, List.replace_nth(_x4, 0, 8)) } else { Garaxy.next_scene(_x0, Garaxy.ModeTutorial, :1347(List.nth(_x4, 1), _x2)) } } else { :1341(_x0) }
:1284 = fun(_x0) -> :1340(_x0, :1256)
:1285 = fun(_x0, _x1, _x2, _x3) -> let _x4 = List.nth(_x1, 2) in let _x5 = List.nth(_x4, _x2) in let _x6 = _x3(_x5) in let _x7 = List.nth(List.nth(List.nth(List.nth(_x1, 4), 2), 2), 0) in let _x8 = List.nth(:1252, _x2) in let _x9 = _x7 - 4 * List.nth(_x4, 1) - 12 * List.nth(_x4, 2) - 2 * List.nth(_x4, 3) + _x5 * _x8 - _x6 * _x8 in if 0 == _x2 || _x9 < 0 || 3 == _x2 && 0 == _x6 { :1284(_x0, _x1) } else { :1284(_x0, List.replace_nth(_x1, 2, List.replace_nth(List.replace_nth(_x4, 0, _x9), _x2, _x6))) }
:1286 = fun(_x0, _x1) -> Result.to_send(List.replace_nth(_x0, 1, List.replace_nth(_x1, 0, 5)), Msg.create(0))
:1287 = fun(_x0, _x1) -> Result.to_send(List.replace_nth(_x0, 1, List.replace_nth(_x1, 0, 1)), Msg.error)
:1288 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x1, 0, 10) in Result.to_send(List.replace_nth(_x0, 1, _x2), Msg.history(List.nth(_x2, 1)))
:1289 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x1, 0, 9) in let _x3 = List.replace_nth(_x0, 1, _x2) in Result.to_send(_x3, Msg.join(List.nth(_x2, 1), List.nth(_x3, 3)))
:1290 = true(fun(_x0) -> :1492(Vec2.new(-14, -4), List.nth(_x0, 1), :1237, :1239))
Pelmanism.size = 8
Pelmanism.tiles = [122, 203, 410, 164, 444, 484, 202, 77, 251, 56, 456, 435, 28, 329, 257, 265, 501, 18, 190, 423, 384, 434, 266, 69, 34, 437, 203, 152, 160, 425, 245, 428, 99, 107, 192, 372, 346, 344, 169, 478, 393, 502, 201, 497, 313, 32, 281, 510, 436, 22, 237, 80, 325, 405, 184, 358, 57, 276, 359, 189, 284, 277, 198, 244]
Pelmanism.Scene = [Pelmanism.run, [0, Pelmanism.tiles, -1, 0, []]]
Pelmanism.rotation_table = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [7, 4, 1, 8, 5, 2, 9, 6, 3], [9, 8, 7, 6, 5, 4, 3, 2, 1], [3, 6, 9, 2, 5, 8, 1, 4, 7], [3, 2, 1, 6, 5, 4, 9, 8, 7], [7, 8, 9, 4, 5, 6, 1, 2, 3], [1, 4, 7, 2, 5, 8, 3, 6, 9], [9, 6, 3, 8, 5, 2, 7, 4, 1]]
Pelmanism.KindTile = 0
Pelmanism.KindGalaxy = 1
Pelmanism.run = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 1) in if 0 == List.nth(_x2, 0) { Pelmanism.update(_x0, List.replace_nth(_x2, 0, 1)) } else { Pelmanism.update_game(_x0, _x1, _x2) }
Pelmanism.update_game = fun(_x0, _x1, _x2) -> let _x3 = Interact.find_clicked(Pelmanism.draw(_x2), _x1) in if isnil(_x3) { Pelmanism.update(_x0, _x2) } else { let _x4 = List.nth(_x3, 2) in let _x5 = List.nth(_x3, 1) in if Pelmanism.KindGalaxy == _x5 { Garaxy.next_scene(_x0, Garaxy.ModeSpace, List.nth(Space.Scene, 1)) } else { if Pelmanism.KindTile == _x5 { if -1 == List.nth(_x2, 2) { Pelmanism.update(_x0, List.replace_nth(_x2, 2, _x4)) } else { let _x6 = List.nth(List.nth(_x2, 1), List.nth(_x2, 2)) in let _x7 = List.nth(List.nth(_x2, 1), _x4) in let _x8 = List.replace_nth(_x2, 2, -1) in let _x9 = Pelmanism.solution_index(_x6, _x7) in if -1 == _x9 { Pelmanism.update(_x0, List.replace_nth(List.replace_nth(_x8, 4, []), 3, 0)) } else { let _x10 = let _x11 = List.replace_nth(_x8, 4, cons(_x6, cons(_x7, List.nth(_x8, 4)))) in List.replace_nth(_x11, 3, List.nth(_x11, 3) + (_x6 + _x7) * Int.pow2(_x9 * 4)) in let _x12 = let _x13 = List.replace_nth(_x10, 0, 2) in Pelmanism.update(List.replace_nth(_x0, 3, cons(List.nth(_x13, 3), List.nth(_x0, 3))), _x13) in if List.len(List.nth(_x10, 4)) == 16 { _x12 } else { Pelmanism.update(_x0, _x10) } } } } else { Pelmanism.update(_x0, _x2) } } }
Pelmanism.solution_index = fun(_x0, _x1) -> let _x2 = List.filter(List.mapi(Pelmanism.rotation_table, fun(_x3, _x4) -> cons(_x4, Pelmanism.is_solved(Bit.make_n(_x0, 9), Bit.make_n(_x1, 9), _x3)), 0), cdr) in if isnil(_x2) { -1 } else { car(car(_x2)) }
Pelmanism.is_solved = fun(_x0, _x1, _x2) -> isnil(List.filter(IntList.make(9), fun(_x3) -> !(List.nth(_x0, _x3) == List.nth(_x1, List.nth(_x2, _x3) - 1))))
Pelmanism.update = fun(_x0, _x1) -> Result.to_render(List.replace_nth(_x0, 1, _x1), List.nth(Pelmanism.draw(_x1), 1))
Pelmanism.draw = fun(_x0) -> if 1 == List.nth(_x0, 0) { Interact.seq(List.mapi(List.nth(_x0, 1), fun(_x1, _x2) -> Pelmanism.draw_tile(_x1, _x2, Vec2.new(6 * (_x2 % Pelmanism.size), 6 * (_x2 / Pelmanism.size)), _x0), 0)) } else { Interact.seq3(Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Galaxy), Pelmanism.KindGalaxy, 0), [[], [Print.heat_range(Vec2.new(35, -2))]], :1482(Vec2.new(0, 0), Image.from_sparse_bitmap(SparseBitmap.LargeThruster))) }
Pelmanism.draw_tile = fun(_x0, _x1, _x2, _x3) -> if List.mem(List.nth(_x3, 4), _x0) { [[], []] } else { let _x4 = Interact.draw_clickable_at(_x2, Image.from_int(_x0), Pelmanism.KindTile, _x1) in if _x1 == List.nth(_x3, 2) { Interact.push_image(_x4) } else { _x4 } }
Garaxy.ModeOpening = 0
Garaxy.ModeCariblation = 1
Garaxy.ModeSpace = 2
Garaxy.ModeTictactoe = 3
Garaxy.ModePelmanism = 4
Garaxy.ModeHistory = 5
Garaxy.ModeTutorial = 6
Garaxy.ModeError = 10
Garaxy.Scenes = [Opening.Scene, Cariblation.Scene, Space.Scene, TicTacToe.Scene, Pelmanism.Scene, History.Scene, Tutorial.Scene, [], [], [], [Error.run, []]]
Error.run = fun(_x0) -> true(Result.to_render(_x0, [[cons(0, 0), cons(1, 0), cons(2, 0), cons(3, 0), cons(0, 1), cons(1, 1), cons(3, 1), cons(0, 2), cons(2, 2), cons(3, 2), cons(0, 3), cons(1, 3), cons(2, 3), cons(3, 3)]]))
Garaxy.run = fun(_x0, _x1) -> Garaxy.run_internal(_x0, _x1, Garaxy.ModeOpening, Garaxy.Scenes)
Garaxy.next_scene = fun(_x0, _x1, _x2) -> Result.no_data(List.replace_nth(List.replace_nth(_x0, 0, _x1), 1, _x2))
:1340 = fun(_x0, _x1, _x2) -> let _x3 = List.replace_nth(_x0, 1, _x2) in Result.to_render(_x3, List.nth(_x1(_x3, _x2), 1))
:1341 = fun(_x0) -> Result.no_data(List.replace_nth(List.replace_nth(_x0, 0, Garaxy.ModeError), 1, []))
Garaxy.run_internal = fun(_x0, _x1, _x2, _x3) -> Garaxy.dispatch(if isnil(_x0) { [_x2, List.nth(List.nth(_x3, _x2), 1), 0, []] } else { _x0 }, _x1, _x3)
Garaxy.dispatch = fun(_x0, _x1, _x2) -> let _x3 = List.nth(_x0, 0) in let _x4 = List.nth(List.nth(_x2, _x3), 0) in let _x5 = _x4(_x0, _x1) in let _x6 = _x5 in let _x7 = List.nth(_x5, 1) in if List.nth(_x7, 0) == _x3 { _x6 } else { Garaxy.dispatch(_x7, _x1, _x2) }
Tutorial.Scene = [Tutorial.run, [1, 0, 0, 1, 0, 0, [], [], 4, [], [], [], []]]
:1345 = 13
Tutorial.run = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 1) in if 0 == List.nth(_x2, 1) { :1352(_x0, _x2) } else { if 1 == List.nth(_x2, 1) { :1350(_x0, _x2) } else { if 2 == List.nth(_x2, 1) { :1370(_x0, _x2) } else { if 3 == List.nth(_x2, 1) { :1369(_x0, List.replace_nth(_x2, 1, 8)) } else { if 5 == List.nth(_x2, 1) { :1372(_x0, _x1, _x2) } else { if 6 == List.nth(_x2, 1) { :1371(_x0, _x1, _x2) } else { if 7 == List.nth(_x2, 1) || 10 == List.nth(_x2, 1) { :1368(_x0, _x1, _x2) } else { if 11 == List.nth(_x2, 1) { :1351(_x0, _x1, _x2) } else { :1353(_x0, _x1, _x2) } } } } } } } }
:1347 = fun(_x0, _x1) -> [0, 3, _x0, List.nth(List.nth(_x1, 2), 1), 0, 2, [], [], 4, List.nth(_x1, 3), List.nth(_x1, 2), [], []]
:1348 = fun(_x0, _x1) -> [0, 1, _x0, 2, 0, 2, [], [], 4, [0, List.nth(_x1, 0), List.nth(car(List.nth(_x1, 1)), 1)], [], _x1, []]
:1349 = fun(_x0, _x1, _x2) -> [0, 2, _x0, List.nth(_x1, 1), 0, 2, [], [], 4, [], _x1, [], _x2]
:1350 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x1, 1, 12) in :1369(_x0, let _x3 = car(List.nth(List.nth(_x2, 11), 1)) in List.replace_nth(_x2, 9, [0, List.nth(List.nth(_x2, 11), 0), List.nth(_x3, 1)]))
:1351 = fun(_x0, _x1, _x2) -> if 0 == List.nth(_x1, 0) { :1341(_x0) } else { let _x3 = List.replace_nth(_x2, 11, List.nth(_x1, 5)) in let _x4 = let _x5 = List.replace_nth(_x3, 1, 12) in :1369(_x0, let _x6 = car(List.nth(List.nth(_x5, 11), 1)) in List.replace_nth(_x5, 9, [0, List.nth(List.nth(_x5, 11), 0), List.nth(_x6, 1)])) in if isnil(List.nth(_x3, 9)) { _x4 } else { let _x7 = List.nth(_x1, 4) in let _x8 = car(List.filter(_x7, fun(_x9) -> List.nth(_x3, 3) == List.nth(_x9, 0))) in :1369(_x0, List.replace_nth(List.replace_nth(List.replace_nth(_x3, 4, List.nth(_x8, 1) + List.nth(_x3, 4)), 5, List.nth(_x8, 2)), 1, 9)) } }
:1352 = :1374
:1353 = fun(_x0, _x1, _x2) -> let _x3 = :1392(_x2) in let _x4 = Interact.find_clicked(_x3, _x1) in if isnil(_x4) { :1369(_x0, _x2) } else { let _x5 = List.nth(_x4, 1) in if :1378 == _x5 { :1365(_x0, _x2) } else { if 4 + 1 == _x5 { :1364(_x0, _x2) } else { if 1 + 1 == _x5 { :1357(_x0, _x2) } else { if 0 + 1 == _x5 { :1363(_x0, _x2, 0) } else { if 2 + 1 == _x5 { :1363(_x0, _x2, 2) } else { if 3 + 1 == _x5 { :1358(_x0, _x2) } else { if :1379 == _x5 { :1367(_x0, _x2, _x1) } else { if :1380 == _x5 { :1360(_x0, _x2, List.nth(_x4, 2)) } else { if :1381 == _x5 { :1359(_x0, _x2, _x1) } else { if :1382 == _x5 { :1355(_x0, _x2, List.nth(_x4, 2), fun(_x6) -> _x6 / 2) } else { if :1383 == _x5 { :1355(_x0, _x2, List.nth(_x4, 2), fun(_x7) -> if 0 == _x7 { 1 } else { 2 * _x7 }) } else { if :1384 == _x5 { :1354(_x0, _x2) } else { if :1385 == _x5 { :1370(_x0, _x2) } else { :1369(_x0, _x2) } } } } } } } } } } } } } }
:1354 = fun(_x0, _x1) -> :1369(_x0, :1366(_x1))
:1355 = fun(_x0, _x1, _x2, _x3) -> let _x4 = List.nth(_x1, 6) in let _x5 = car(List.filter(List.nth(_x1, 7), fun(_x6) -> List.nth(_x4, 1) == List.nth(_x6, 1) && 3 == List.nth(_x6, 0))) in let _x7 = List.filter(List.nth(_x1, 7), fun(_x8) -> !(List.nth(_x8, 0) == 3) || !(List.nth(_x8, 1) == List.nth(_x4, 1))) in let _x9 = List.nth(_x5, 2) in let _x10 = List.nth(_x4, 4) in let _x11 = List.replace_nth(_x9, _x2, Int.min(_x3(List.nth(_x9, _x2)), List.nth(_x10, _x2))) in :1356(_x11, _x10, :1369(_x0, _x1), :1369(_x0, List.replace_nth(_x1, 7, cons([3, List.nth(_x4, 1), _x11], _x7))))
:1356 = fun(_x0, _x1) -> IntList.sum(_x1) < 2 * IntList.sum(_x0) || List.nth(_x1, 3) == List.nth(_x0, 3) || 0 == List.nth(_x0, 3)
:1357 = fun(_x0, _x1) -> let _x2 = List.nth(_x1, 6) in :1369(_x0, :1366(List.replace_nth(let _x3 = :1362(List.nth(_x1, 7), List.nth(_x2, 1), 1) in List.replace_nth(_x1, 7, _x3(:1361(List.nth(_x1, 7), List.nth(_x2, 1), 1), cons([1, List.nth(_x2, 1)], List.nth(_x1, 7)))), 8, 4)))
:1358 = fun(_x0, _x1) -> let _x2 = List.nth(_x1, 6) in let _x3 = :1362(List.nth(_x1, 7), List.nth(_x2, 1), 3) in let _x4 = [3, List.nth(_x2, 1), [0, 0, 0, 1]] in let _x5 = List.replace_nth(_x1, 7, _x3(:1361(List.nth(_x1, 7), List.nth(_x2, 1), 3), cons(_x4, List.nth(_x1, 7)))) in _x3(:1369(_x0, :1366(_x5)), :1369(_x0, List.replace_nth(_x5, 8, 3)))
:1359 = fun(_x0, _x1, _x2) -> let _x3 = List.nth(_x1, 6) in :1369(_x0, :1366(let _x4 = [2, List.nth(_x3, 1), _x2, List.nth(List.nth(_x3, 4), 1)] in List.replace_nth(_x1, 7, cons(_x4, List.filter(List.nth(_x1, 7), fun(_x5) -> !(List.nth(_x5, 0) == 2) || !(List.nth(_x5, 1) == List.nth(_x3, 1)))))))
:1360 = fun(_x0, _x1, _x2) -> let _x3 = List.nth(_x1, 6) in :1369(_x0, :1366(let _x4 = _x2 / 16 - 8 in let _x5 = _x2 % 16 - 8 in List.replace_nth(_x1, 7, cons([0, List.nth(_x3, 1), Vec2.new(_x5, _x4)], List.nth(_x1, 7)))))
:1361 = fun(_x0, _x1, _x2) -> List.filter(_x0, fun(_x3) -> !(List.nth(_x3, 1) == _x1) || !(List.nth(_x3, 0) == _x2))
:1362 = fun(_x0, _x1, _x2) -> !isnil(List.filter(_x0, fun(_x3) -> _x1 == List.nth(_x3, 1) && _x2 == List.nth(_x3, 0)))
:1363 = fun(_x0, _x1, _x2) -> let _x3 = List.nth(_x1, 6) in let _x4 = :1362(List.nth(_x1, 7), List.nth(_x3, 1), _x2) in _x4(:1369(_x0, :1366(List.replace_nth(_x1, 7, :1361(List.nth(_x1, 7), List.nth(_x3, 1), _x2)))), :1369(_x0, List.replace_nth(_x1, 8, _x2)))
:1364 = fun(_x0, _x1) -> :1369(_x0, :1366(_x1))
:1365 = fun(_x0, _x1) -> if 4 == List.nth(_x1, 1) { :1374(_x0, _x1) } else { if 9 == List.nth(_x1, 1) { if :1345 == List.nth(_x1, 0) && 3 == List.nth(_x1, 5) { Garaxy.next_scene(List.replace_nth(_x0, 2, List.len(History.HistoryList) + 3), Garaxy.ModeHistory, History.InitSceneState) } else { if 0 == List.nth(_x1, 0) { Garaxy.next_scene(_x0, Garaxy.ModeHistory, History.InitSceneState) } else { :1352(_x0, [if 3 == List.nth(_x1, 5) { List.nth(_x1, 0) + 1 } else { List.nth(_x1, 0) }, 4, 0, 1, List.nth(_x1, 4), 0, [], [], 4, [], [], [], []]) } } } else { if 12 == List.nth(_x1, 1) { let _x2 = let _x3 = List.nth_list(List.nth(List.nth(_x1, 11), 1), List.nth(List.nth(_x1, 9), 0) + 1) in List.replace_nth(_x1, 9, [List.nth(_x3, 0), List.nth(List.nth(_x1, 11), 0), List.nth(_x3, 1)]) in if List.len(List.nth(List.nth(_x2, 11), 1)) - 1 == List.nth(List.nth(_x2, 9), 0) { :1369(_x0, List.replace_nth(_x2, 1, 9)) } else { :1369(_x0, _x2) } } else { :1375(_x0, :1366(List.replace_nth(List.replace_nth(_x1, 7, []), 1, 10)), Msg.command(List.nth(_x1, 2), List.nth(_x1, 7))) } } }
:1366 = fun(_x0) -> List.replace_nth(List.replace_nth(_x0, 6, []), 8, 4)
:1367 = fun(_x0, _x1, _x2) -> let _x3 = List.nth(List.nth(_x1, 9), 2) in let _x4 = List.map_sort(List.filter(_x3, fun(_x5) -> Vec2.distance(List.nth(List.nth(_x5, 0), 2), _x2) < 2), fun(_x6) -> List.nth(List.nth(_x6, 0), 1)) in if isnil(List.nth(_x1, 6)) || 1 < Vec2.distance(List.nth(List.nth(_x1, 6), 2), _x2) { :1369(_x0, List.replace_nth(List.replace_nth(_x1, 6, List.nth(car(_x4), 0)), 8, 4)) } else { :1369(_x0, List.replace_nth(List.replace_nth(_x1, 6, let _x7 = List.filter(_x4, fun(_x8) -> List.nth(List.nth(_x1, 6), 1) < List.nth(List.nth(_x8, 0), 1)) in if isnil(_x7) { [] } else { List.nth(car(_x7), 0) }), 8, 4)) }
:1368 = fun(_x0, _x1, _x2) -> if 0 == List.nth(_x1, 0) { :1341(_x0) } else { let _x3 = List.replace_nth(_x2, 9, List.nth(_x1, 3)) in if 2 == List.nth(_x1, 1) { let _x4 = List.replace_nth(_x3, 1, 11) in :1375(_x0, _x4, Msg.history(List.nth(_x4, 2))) } else { :1369(_x0, List.replace_nth(_x3, 1, 8)) } }
:1369 = fun(_x0, _x1) -> :1376(_x0, _x1, List.nth(:1392(_x1), 1))
:1370 = fun(_x0, _x1) -> let _x2 = List.nth(_x1, 2) in :1375(_x0, List.replace_nth(_x1, 1, 7), Msg.start(_x2, List.nth(_x1, 12)))
:1371 = fun(_x0, _x1, _x2) -> if 0 == List.nth(_x1, 0) { :1341(_x0) } else { :1370(_x0, List.replace_nth(List.replace_nth(List.replace_nth(_x2, 10, List.nth(_x1, 2)), 3, List.nth(List.nth(_x1, 2), 1)), 12, [])) }
:1372 = fun(_x0, _x1, _x2) -> if 0 == List.nth(_x1, 0) { :1377(List.replace_nth(_x0, 0, Garaxy.ModeError), []) } else { List.nth(_x1, 1, fun(_x3) -> true(:1373(_x0, List.replace_nth(_x2, 2, List.nth(_x3, 1))))) }
:1373 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x1, 1, 6) in :1375(_x0, _x2, Msg.join(List.nth(_x2, 2), List.nth(_x0, 3)))
:1374 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x1, 1, 5) in :1375(_x0, :1366(_x2), Msg.create(List.nth(_x2, 0)))
:1375 = fun(_x0, _x1, _x2) -> Result.to_send(List.replace_nth(_x0, 1, _x1), _x2)
:1376 = fun(_x0, _x1, _x2) -> Result.to_render(List.replace_nth(_x0, 1, _x1), _x2)
:1377 = fun(_x0, _x1) -> Result.no_data(List.replace_nth(_x0, 1, _x1))
:1378 = 0
:1379 = 8
:1380 = 13
:1381 = 14
:1382 = 16
:1383 = 17
:1384 = 18
:1385 = 20
:1386 = 7
:1387 = Vec2.new(-:1386, 0)
:1388 = Vec2.new(:1386, 0)
:1389 = Vec2.new(0, -:1386)
:1390 = Vec2.new(0, :1386)
:1391 = [[], [[Bitmap.Galaxy], false, -1], [[Bitmap.Bomb], false, -1], [[Bitmap.Thruster], false, 0], [[Bitmap.Thruster], true, 0], [[Bitmap.Cooldown], true, 2], [[Bitmap.Laser], true, 1], [[Bitmap.Laser], true, -1], [[Bitmap.Laser], false, -1], [[Bitmap.Thruster, Bitmap.Laser], false, -1], [[Bitmap.Split], false, 3], [[Bitmap.Thruster], false, -1], [], []]
:1392 = fun(_x0) -> if 4 == List.nth(_x0, 1) { :1393(_x0) } else { :1394(_x0) }
:1393 = fun(_x0) -> if 0 == List.nth(_x0, 0) { :1398 } else { Interact.seq2(:1398, :1419(_x0, [])) }
:1394 = fun(_x0) -> let _x1 = :1402(_x0, 2 == List.nth(_x0, 3)) in if isnil(List.nth(_x0, 6)) { _x1 } else { let _x2 = Interact.seq([:1407(_x0), :1400(List.nth(_x0, 6)), Interact.push_image(_x1)]) in if 0 == List.nth(_x0, 8) { Interact.seq([Interact.push_image(_x2), :1405(_x0)]) } else { if 2 == List.nth(_x0, 8) { Interact.seq([Interact.push_image(_x2), :1401]) } else { if 3 == List.nth(_x0, 8) { Interact.seq([Interact.push_image(_x2), :1395(_x0)]) } else { _x2 } } } }
:1395 = fun(_x0) -> let _x1 = List.nth(_x0, 6) in let _x2 = car(List.filter(List.nth(_x0, 7), fun(_x3) -> List.nth(_x1, 1) == List.nth(_x3, 1) && 3 == List.nth(_x3, 0))) in :1485(Interact.seq(cons(Interact.draw_clickable_at(Vec2.new(-7, -2), Image.from_bitmap(Bitmap.Split), 3 + 1, 0), let _x4 = List.nth(_x2, 2) in let _x5 = List.nth(_x1, 4) in [:1396(Vec2.new(0, 0), List.nth(_x5, 0), List.nth(_x4, 0), 0), :1396(Vec2.new(6, 0), List.nth(_x5, 1), List.nth(_x4, 1), 1), :1396(Vec2.new(12, 0), List.nth(_x5, 2), List.nth(_x4, 2), 2), :1396(Vec2.new(18, 0), List.nth(_x5, 3), List.nth(_x4, 3), 3), Interact.draw_clickable_at(Vec2.new(26, -2), Image.from_bitmap(Bitmap.SplitClose), :1384, 0)])), Vec2.add(Vec2.add(List.nth(_x1, 2), :1388), Vec2.new(5, 0)))
:1396 = fun(_x0, _x1, _x2, _x3) -> _x0(fun(_x4, _x5) -> Interact.seq(let _x6 = if 0 == _x2 { 0 } else { Int.log2(_x2) + 1 } in [:1397(Vec2.add(_x0, Vec2.new(0, -8)), _x2, :1383, _x3), :1397(Vec2.add(_x0, Vec2.new(0, 8)), _x1 - _x2, :1382, _x3), [[], [Image.x_line(_x4, _x5 + 4 - _x6, 5)]]]))
:1397 = fun(_x0, _x1, _x2, _x3) -> Interact.draw_clickable_at(_x0, Image.from_int(_x1), _x2, _x3)
:1398 = Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Galaxy), :1378, 0)
:1399 = fun(_x0) -> Interact.seq(List.map(_x0, :1400))
:1400 = fun(_x0) -> [[[Rect.from_center(List.nth(_x0, 2), 1), :1379, List.nth(_x0, 1)]], [Vec2List.map_add(:1413(_x0), List.nth(_x0, 2))]]
:1401 = [[[Rect.new(-2048, -2048, 4096, 4096), :1381, 0]], []]
:1402 = fun(_x0, _x1) -> let _x2 = List.map(List.filter(List.nth(List.nth(_x0, 9), 2), fun(_x3) -> List.nth(_x0, 3) == List.nth(List.nth(_x3, 0), 0)), fun(_x4) -> List.nth(_x4, 0)) in let _x5 = List.map(List.filter(List.nth(List.nth(_x0, 9), 2), fun(_x6) -> !(List.nth(List.nth(_x6, 0), 0) == List.nth(_x0, 3))), fun(_x7) -> List.nth(_x7, 0)) in let _x8 = :1398 in let _x9 = :1399(_x5) in let _x10 = :1399(_x2) in let _x11 = :1483(Vec2.new(0, 0), :1411(List.nth(List.nth(_x0, 9), 2))) in let _x12 = if isnil(List.nth(_x0, 10)) { List.len(List.nth(List.nth(_x0, 11), 1)) } else { List.nth(List.nth(_x0, 10), 0) } in let _x13 = Vec2List.map_add(Image.from_int(_x12 - List.nth(List.nth(_x0, 9), 0)), Vec2.new(6, 0)) in let _x14 = :1483(Vec2.new(0, -3), List.concat(_x13, Vec2List.map_add(Image.from_int_left(List.nth(_x0, 4)), Vec2.new(-6, 0)))) in let _x15 = [[], [:1418(List.nth(List.nth(_x0, 9), 1)), :1403(List.nth(List.nth(_x0, 9), 1))]] in let _x16 = Interact.seq2(_x11, :1479(_x15)) in let _x17 = Interact.seq(List.map(List.nth(_x0, 7), fun(_x18) -> :1406(_x18, _x0))) in let _x19 = _x1(_x16, Interact.seq2(_x9, :1479(_x16))) in Interact.seq(let _x20 = [_x10, _x8, _x14, if !(List.nth(_x0, 1) == 9) || 2 == List.nth(_x0, 3) { [[], []] } else { :1482(Vec2.new(0, 0), Image.from_sparse_bitmap(if 3 == List.nth(_x0, 5) { SparseBitmap.LargeTrue } else { SparseBitmap.LargeFalse })) }, if 0 == List.nth(_x0, 0) || (let _x21 = List.nth(_x0, 0) in 12 < _x21 || 12 == _x21) { Interact.empty } else { :1419(_x0, car(_x2)) }, :1479(_x17), :1479(:1479(_x19))] in _x1(cons(_x9, _x20), _x20))
:1403 = fun(_x0) -> if isnil(_x0) { [] } else { Image.center_rect_bound(List.nth(_x0, 1)) }
:1404 = fun(_x0, _x1) -> List.map(Image.fill_rect(-_x0, -_x0, _x0 * 2 + 1, _x0 * 2 + 1), fun(_x2) -> _x2(fun(_x3, _x4) -> :1489(Vec2.mul(_x2, _x1), :1380, _x3 + 8 + 16 * (_x4 + 8))))
:1405 = fun(_x0) -> :1485(Interact.seq(cons(:1410(Vec2.new(-2, -2), Bitmap.Thruster, 4), :1404(List.nth(List.nth(List.nth(_x0, 10), 2), 1), 5))), Vec2.add(List.nth(List.nth(_x0, 6), 2), :1389))
:1406 = fun(_x0, _x1) -> let _x2 = List.nth(car(List.filter(List.nth(List.nth(_x1, 9), 2), fun(_x3) -> List.nth(_x0, 1) == List.nth(List.nth(_x3, 0), 1))), 0) in let _x4 = Vec2.add(List.nth(_x2, 2), Vec2.new(-2, -2)) in if 1 == List.nth(_x0, 0) { :1483(Vec2.add(_x4, :1387), Image.from_bitmap(Bitmap.Bomb)) } else { if 0 == List.nth(_x0, 0) { List.nth(_x0, 2, fun(_x5, _x6) -> :1483(Vec2.add(_x4, :1389), List.concat(Image.from_bitmap(Bitmap.Thruster), Image.from_image_list([Image.from_int(_x5), Image.from_int(_x6)], 6)))) } else { if 2 == List.nth(_x0, 0) { List.nth(_x0, 2, fun(_x7, _x8) -> Interact.seq([:1483(Vec2.new(0, 0), Image.dot_line(List.nth(_x2, 2), List.nth(_x0, 2), 4)), :1483(Vec2.add(_x4, :1390), List.concat(Image.from_bitmap(Bitmap.Laser), Image.from_image_list([Image.from_int(_x7), Image.from_int(_x8), Image.from_int(List.nth(_x0, 3))], 6)))])) } else { if 3 == List.nth(_x0, 0) { if !isnil(List.nth(_x1, 6)) && List.nth(_x2, 1) == List.nth(List.nth(_x1, 6), 1) { [[], []] } else { :1483(Vec2.add(_x4, :1388), List.concat(Image.from_bitmap(Bitmap.Split), Image.from_image_list(List.map(List.nth(_x0, 2), Image.from_int), :1386))) } } else { :1482(Vec2.new(0, 0), []) } } } }
:1407 = fun(_x0) -> let _x1 = List.nth(_x0, 6) in let _x2 = List.nth(_x0, 3) == List.nth(_x1, 0) && !(List.nth(_x0, 1) == 9) in :1485(:1408(_x1, _x2, false), Vec2.add(List.nth(_x1, 2), Vec2.new(-2, -2)))
:1408 = fun(_x0, _x1, _x2) -> Interact.seq(List.concat([:1483(Vec2.new(-3, -3), Image.from_int_left_top(List.nth(_x0, 1))), :1483(Vec2.new(-3, 7), _x2(Vec2List.map_add_x(Image.from_bitmap(Bitmap.Heat), -4), Image.from_int_left(List.nth(_x0, 5)))), :1409(_x0, _x1, _x2)], _x1(cons(:1410(:1387, Bitmap.Bomb, 1), let _x3 = List.nth(_x0, 4) in let _x4 = :1483(Vec2.new(0, 0), []) in [if 0 < List.nth(_x3, 0) { :1410(:1389, Bitmap.Thruster, 0) } else { _x4 }, if 0 < List.nth(_x3, 1) { :1410(:1390, Bitmap.Laser, 2) } else { _x4 }, if 1 < List.nth(_x3, 3) { :1410(:1388, Bitmap.Split, 3) } else { _x4 }]), [])))
:1409 = fun(_x0, _x1, _x2) -> :1483(Vec2.new(:1386 * (if 1 < List.nth(List.nth(_x0, 4), 3) && _x1 { 2 } else { 1 }), 0), _x2(Image.from_bitmap_list([Bitmap.Energy, Bitmap.LaserMax, Bitmap.Cooldown, Bitmap.Life]), Image.from_int_list(List.nth(_x0, 4))))
:1410 = fun(_x0, _x1, _x2) -> Interact.draw_clickable_at(_x0, Image.from_bitmap(_x1), _x2 + 1, 0)
:1411 = fun(_x0) -> List.flatten(List.map(_x0, :1412))
:1412 = fun(_x0) -> List.flatten(List.map(List.nth(_x0, 1), :1414(List.nth(_x0, 0))))
:1413 = fun(_x0) -> Vec2List.map_add(Image.from_bitmap(List.nth(if 0 == List.nth(_x0, 0) { Machine.Attackers } else { Machine.Defenders }, let _x1 = IntList.sum(List.nth(_x0, 4)) in if 256 < _x1 || 256 == _x1 { 3 } else { if 16 < _x1 || 16 == _x1 { 2 } else { if 0 < _x1 { 1 } else { 0 } } })), Vec2.new(-2, -2))
:1414 = fun(_x0, _x1) -> let _x2 = List.nth(_x1, 0) in if 0 == _x2 { :1417(_x0, _x1) } else { if 2 == _x2 { :1416(List.nth(_x0, 2), _x1) } else { if 1 == _x2 { :1415(List.nth(_x0, 2), _x1) } else { [] } } }
:1415 = fun(_x0, _x1) -> _x0(fun(_x2, _x3) -> let _x4 = List.nth(_x1, 1) / List.nth(_x1, 2) in Image.fill_rect(_x2 - _x4, _x3 - _x4, 2 * _x4 + 1, 2 * _x4 + 1))
:1416 = fun(_x0, _x1) -> List.nth(_x1, 1, fun(_x2, _x3) -> List.concat(let _x4 = Int.log_x_y(List.nth(_x1, 3), List.nth(_x1, 4)) in Image.fill_rect(_x2 - _x4, _x3 - _x4, 2 * _x4 + 1, 2 * _x4 + 1), Image.dot_line(List.nth(_x1, 1), _x0, 1)))
:1417 = fun(_x0, _x1) -> List.nth(_x0, 2, fun(_x2, _x3) -> List.nth(_x1, 1, fun(_x4, _x5) -> [Vec2.new(_x2 + 3 * _x4, _x3 + 3 * _x5), Vec2.new(_x2 + 4 * _x4, _x3 + 4 * _x5)]))
:1418 = fun(_x0) -> if isnil(_x0) { [] } else { if 16 == List.nth(_x0, 0) { :1096 } else { let _x1 = List.nth(_x0, 0) in Image.fill_rect(-_x1, -_x1, 2 * _x1 + 1, 2 * _x1 + 1) } }
:1419 = fun(_x0, _x1) -> if 7 == List.nth(_x0, 0) && 0 == List.nth(_x1, 0) { :1419(_x0, List.nth(car(List.filter(List.nth(List.nth(_x0, 9), 2), fun(_x2) -> 1 == List.nth(List.nth(_x2, 0), 0))), 0)) } else { let _x3 = Vec2.new(12, -50) in let _x4 = :1485(:1408(_x1, List.nth(_x1, 0) == List.nth(_x0, 3), true), _x3) in let _x5 = List.nth(:1391, List.nth(_x0, 0)) in let _x6 = Vec2List.map_add(Image.from_bitmap_list(List.nth(_x5, 0)), Vec2.new(4, -68)) in let _x7 = _x5 in let _x8 = Vec2List.map_add(:1413(_x1), Vec2.add(_x3, Vec2.new(2, 2))) in let _x9 = List.nth(_x7, 1, Vec2List.map_add(Image.from_image_list_with_mergin([Image.from_bitmap(Bitmap.Heat), [cons(0, 0), cons(1, 0), cons(2, 0), cons(0, 1), cons(0, 2), cons(1, 2), cons(2, 2)], Image.from_int(List.nth(_x1, 5))], 0, [2, 2, 0]), Vec2.new(4, -30)), []) in Interact.seq3(:1482(Vec2.new(3, -55 - 13), Image.y_line(-3, 0, 55 + 1)), [[], [[], List.concat(_x8, List.concat(_x6, List.concat(_x9, if List.nth(_x7, 2) < 0 { [] } else { Vec2List.map_add(Image.from_image_list_with_mergin([Image.from_bitmap(List.nth(Machine.Params, List.nth(_x7, 2))), [cons(0, 0), cons(1, 0), cons(2, 0), cons(0, 1), cons(0, 2), cons(1, 2), cons(2, 2)], Image.from_int(List.nth(List.nth(_x1, 4), List.nth(_x7, 2)))], 0, [2, 2, 0]), Vec2.new(4, (if isnil(_x9) { 0 } else { 7 }) - 30)) })))]], Interact.push_image(_x4)) }
Space.Scene = [Space.run, [:1421, -1]]
:1421 = 0
:1422 = 1
:1423 = 2
:1424 = 3
:1425 = 4
:1426 = 5
Space.run = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 1) in if 0 == List.nth(_x2, 0) { :1430(_x0, List.replace_nth(_x2, 0, 1)) } else { :1428(_x0, _x2, _x1) }
:1428 = fun(_x0, _x1, _x2) -> let _x3 = Interact.find_clicked(:1432(_x0, _x1), _x2) in if isnil(_x3) { :1430(_x0, _x1) } else { if :1421 == List.nth(_x3, 1) { Garaxy.next_scene(_x0, Garaxy.ModeHistory, List.nth(History.Scene, 1)) } else { if :1422 == List.nth(_x3, 1) { :1430(_x0, List.replace_nth(_x1, 1, List.nth(_x3, 2))) } else { if :1423 == List.nth(_x3, 1) { :1430(_x0, List.replace_nth(List.replace_nth(_x1, 0, 1), 1, -1)) } else { if :1424 == List.nth(_x3, 1) { :1429(_x0, _x1, List.nth(_x3, 2)) } else { if :1425 == List.nth(_x3, 1) { :1430(_x0, List.replace_nth(_x1, 0, 3)) } else { if :1426 == List.nth(_x3, 1) { :1430(_x0, List.replace_nth(_x1, 0, 4)) } else { :1430(_x0, _x1) } } } } } } }
:1429 = fun(_x0, _x1, _x2) -> if 0 == _x2 { Garaxy.next_scene(_x0, Garaxy.ModeTictactoe, List.nth(TicTacToe.Scene, 1)) } else { if 1 == _x2 { Garaxy.next_scene(_x0, Garaxy.ModePelmanism, List.nth(Pelmanism.Scene, 1)) } else { :1430(_x0, _x1) } }
:1430 = fun(_x0, _x1) -> let _x2 = List.replace_nth(_x0, 1, _x1) in Result.to_render(_x2, List.nth(:1432(_x2, _x1), 1))
:1431 = fun(_x0, _x1) -> let _x2 = List.nth(List.nth(Space.Aliens, List.nth(_x0, 0)), 2) in Interact.draw_clickable_at(List.nth(_x0, 1), Image.from_sparse_bitmap(_x2), _x1, List.nth(_x0, 0))
:1432 = true(fun(_x0) -> if 3 == List.nth(_x0, 0) { :1435 } else { if 4 == List.nth(_x0, 0) { :1433 } else { if -1 == List.nth(_x0, 1) { :1437 } else { Interact.seq2(:1438(_x0), Interact.push_image(Interact.push_image(:1437))) } } })
:1433 = [[[Rect.new(-2, -2, 5, 5), :1423, 0]], [Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker4), Vec2.new(-2, -2)), List.concat(Vec2List.map_add(Image.from_bitmap(Bitmap.Bomb), Vec2.new(-9, -2)), List.flatten([Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker2), Vec2.new(32 * 1 - 4, 30 - 2)), Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker2), Vec2.new(32 * 2 - 4, 30 - 2)), Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker2), Vec2.new(32 * 3 - 4, 30 - 2)), Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker2), Vec2.new(32 * 4 - 4, 30 - 2)), Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker4), Vec2.new(32 * 5 - 4, 30 - 2))])), List.concat(Vec2List.map_add(Image.from_image_list_with_mergin(List.map([Bitmap.TotalEnergy, Bitmap.Define, Bitmap.App, Bitmap.App, Bitmap.Sum, Bitmap.Energy, Bitmap.App, Bitmap.App, Bitmap.Sum, Bitmap.LaserMax, Bitmap.App, Bitmap.App, Bitmap.Sum, Bitmap.Cooldown, Bitmap.Life], Image.from_bitmap), 0, [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Vec2.new(-2, 8)), Vec2List.map_add(:1434, Vec2.new(-2, 30)))]]
:1434 = List.flatten(let _x0 = 32 in let _x1 = 15 + 14 in [Vec2List.map_add_y(Image.from_bitmap(Bitmap.TotalEnergy), 15), Vec2List.map_add_y(Image.from_bitmap(Bitmap.Bomb), _x1), Vec2List.map_add(Image.from_int(1), Vec2.new(_x0 * 1, 15)), Vec2List.map_add(Image.from_int(2), Vec2.new(_x0 * 2, 15)), Vec2List.map_add(Image.from_int(3), Vec2.new(_x0 * 3, 15)), Vec2List.map_add(Image.from_int(15), Vec2.new(_x0 * 4, 15)), Vec2List.map_add(Image.from_int(511), Vec2.new(_x0 * 5, 15)), Vec2List.map_add(Image.from_int(128), Vec2.new(_x0 * 1, _x1)), Vec2List.map_add(Image.from_int(161), Vec2.new(_x0 * 2, _x1)), Vec2List.map_add(Image.from_int(181), Vec2.new(_x0 * 3, _x1)), Vec2List.map_add(Image.from_int(256), Vec2.new(_x0 * 4, _x1)), Vec2List.map_add(Image.from_int(384), Vec2.new(_x0 * 5, _x1)), :1415(Vec2.new(_x0 * 1, 0), [1, 128, 32]), :1415(Vec2.new(_x0 * 2, 0), [1, 161, 32]), :1415(Vec2.new(_x0 * 3, 0), [1, 181, 32]), :1415(Vec2.new(_x0 * 4, 0), [1, 256, 32]), :1415(Vec2.new(_x0 * 5, 0), [1, 384, 32]), []])
:1435 = [[[Rect.new(-2, -2, 5, 5), :1423, 0]], [Vec2List.map_add(Image.from_bitmap(Bitmap.Attacker4), Vec2.new(-2, -2)), Vec2List.map_add(Image.from_bitmap(Bitmap.Laser), Vec2.new(-2, 5)), :1436]]
:1436 = List.flatten([:1416(Vec2.new(0, 0), [2, Vec2.new(-64, -64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(0, -64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, -64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-64, 0), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, 0), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-64, 64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(0, 64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, 64), 32, 3 * 32, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-64, -32), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-64, 32), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-32, -64), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(-32, 64), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(32, -64), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(32, 64), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, -32), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, 32), 0, 0, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, -16), 16, 3 * 16 / 2, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, -48), 16, 3 * 16 / 2, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(48, -64), 16, 3 * 16 / 2, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(16, -64), 16, 3 * 16 / 2, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, -8), 8, 3 * 8 / 2, 4]), :1416(Vec2.new(0, 0), [2, Vec2.new(64, 8 - 32), 8, 3 * 8 / 2, 4])])
:1437 = Interact.seq3(Interact.seq(List.map(Space.Aliens, fun(_x0) -> :1431(_x0, :1422))), Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap(Bitmap.Galaxy), :1421, 0), [[], [List.concat(Image.y_line(-120, -108, 19), Vec2List.map_add(Image.from_image_list([Image.from_bitmap(Bitmap.App), Image.from_bitmap(Bitmap.App), Image.from_bitmap(Bitmap.Mul), Image.from_bitmap(Bitmap.Pow2), Image.from_int(66), Image.from_bitmap(Bitmap.TwoSquares)], 0), Vec2.new(-156, -108))), Image.from_sparse_bitmap(SparseBitmap.Space1), Image.from_sparse_bitmap(SparseBitmap.Space2), Image.from_sparse_bitmap(SparseBitmap.Space3)]])
:1438 = fun(_x0) -> let _x1 = List.nth(Space.Aliens, List.nth(_x0, 1)) in let _x2 = :1431(_x1, :1423) in let _x3 = :1483(Vec2.add_x_y(List.nth(_x1, 1), 7, 10), Image.from_sparse_bitmap(List.nth(_x1, 3))) in Interact.seq4(_x2, :1439(Vec2.add_x(List.nth(_x1, 1), 73), List.nth(_x1, 4)), :1483(Vec2.add(List.nth(_x1, 1), Vec2.new(0, 10)), Image.from_bitmap(Bitmap.TwoSquares)), _x3)
:1439 = fun(_x0, _x1) -> if 0 == _x1 { Interact.draw_clickable_at(_x0, Image.from_image_list([Vec2List.map_add_y(Image.from_bitmap(Bitmap.Thruster), 1), Image.from_bitmap(Bitmap.Galaxy)], 0), :1424, _x1) } else { if 1 == _x1 { Interact.draw_clickable_at(_x0, Image.from_image_list([Vec2List.map_add_y(Image.from_bitmap(Bitmap.Heat), 1), Image.from_bitmap(Bitmap.Galaxy)], 0), :1424, _x1) } else { if 2 == _x1 { Interact.draw_clickable_at(_x0, Image.from_image_list([Vec2List.map_add_y(Image.from_bitmap(Bitmap.Laser), 1), Image.from_bitmap(Bitmap.Galaxy)], 0), :1425, 0) } else { if 3 == _x1 { Interact.draw_clickable_at(_x0, Image.from_image_list([Vec2List.map_add_y(Image.from_bitmap(Bitmap.Bomb), 1), Image.from_bitmap(Bitmap.Galaxy)], 0), :1426, 0) } else { [[], []] } } } }
Cariblation.Scene = [Cariblation.run, [0]]
Cariblation.run = fun(_x0, _x1) -> List.nth(_x0, 1, fun(_x2) -> true(if 0 == _x2 { :1449(_x0, 1) } else { if 11 == _x2 { Garaxy.next_scene(_x0, Garaxy.ModeSpace, List.nth(Space.Scene, 1)) } else { let _x3 = Interact.find_clicked(:1447(_x2), _x1) in if isnil(_x3) { :1449(_x0, _x2) } else { :1449(_x0, _x2 + 1) } } }))
:1447 = fun(_x0) -> if 1 == _x0 { Interact.draw_clickable_at(Vec2.new(-3, -3), Image.from_bitmap([7, 561080031143167]), 0, 0) } else { if 2 == _x0 { [[[Rect.new(-3, -3, 7, 7), 0, 0]], [Image.rect_bound(-3, -3, 4, 4), Vec2List.map_add([cons(0, 0), cons(1, 0), cons(2, 0), cons(2, 1), cons(2, 2), cons(0, 3), cons(1, 3), cons(2, 3)], Vec2.new(1, -3)), Vec2List.map_add([cons(0, 0), cons(3, 0), cons(0, 1), cons(3, 1), cons(0, 2), cons(1, 2), cons(2, 2), cons(3, 2)], Vec2.new(0, 1)), Vec2List.map_add([cons(0, 0), cons(0, 1), cons(0, 2), cons(1, 2), cons(2, 2)], Vec2.new(-3, 1))]] } else { if 3 == _x0 { :1448(0, 0, -8, -8, 0, 0) } else { if 4 == _x0 { :1448(8, 4, -7, -9, 0, 0) } else { if 5 == _x0 { :1448(2, -8, -10, -2, 0, 0) } else { if 6 == _x0 { :1448(3, 6, -2, -14, 0, 1) } else { if 7 == _x0 { :1448(0, -14, -5, -13, 2, 0) } else { if 8 == _x0 { :1448(-4, 10, -8, -10, 1, 0) } else { if 9 == _x0 { Interact.seq2(:1448(9, -3, -7, -4, 1, 0), [[], [[], [], Image.fill_rect(2, -7, 16, 16)]]) } else { if 10 == _x0 { Interact.seq2(:1448(-4, 10, -8, -10, 1, 2), [[], [[], [], [], Image.fill_rect(-12, 0, 16, 16)]]) } else { if 11 == _x0 { Interact.seq2(:1448(1, 4, -3, -8, 0, 1), [[], [[], [], [], Image.fill_rect(-2, -4, 16, 16)]]) } else { :1483(Vec2.new(0, 0), Image.from_bitmap([4, 64959])) } } } } } } } } } } }
:1448 = fun(_x0, _x1, _x2, _x3, _x4, _x5) -> let _x6 = [Rect.new(_x0, _x1, 1, 1), 0, 0] in let _x7 = Image.y_line(_x0, _x1 + _x3, 16) in let _x8 = Image.x_line(_x0 + _x2, _x1, 16) in [[_x6], let _x9 = List.replace_nth(List.map(IntList.make(Int.max(_x4, _x5) + 1), true([])), _x4, _x8) in List.replace_nth(_x9, _x5, List.concat(_x7, List.nth(_x9, _x5)))]
:1449 = fun(_x0, _x1) -> Result.to_render(List.replace_nth(_x0, 1, [_x1]), List.nth(:1447(_x1), 1))
:1450 = [0, 0, 0, 0, 0, 0, 0, 0, 0]
TicTacToe.Scene = [TicTacToe.run, [0, :1450, [], 0]]
:1452 = fun(_x0, _x1) -> if (0 < _x0 || 0 == _x0) && (_x0 < 2 || _x0 == 2) && (0 < _x1 || 0 == _x1) && (_x1 < 2 || _x1 == 2) { _x0 + 3 * _x1 } else { -1 }
:1453 = fun(_x0) -> match _x0 { [] => 0, _x1::_x2 => _x1 + 7 * :1453(_x2) }
:1454 = fun(_x0, _x1, _x2, _x3) -> _x3 == List.nth(_x0, _x1) && _x3 == List.nth(_x0, _x1 + _x2) && _x3 == List.nth(_x0, _x1 + _x2 + _x2)
:1455 = fun(_x0, _x1) -> :1456(_x0, _x1) || :1457(_x0, _x1) || :1454(_x0, 0, 4, _x1) || :1454(_x0, 2, 2, _x1)
:1456 = fun(_x0, _x1) -> :1454(_x0, 0, 1, _x1) || :1454(_x0, 3, 1, _x1) || :1454(_x0, 6, 1, _x1)
:1457 = fun(_x0, _x1) -> :1454(_x0, 0, 3, _x1) || :1454(_x0, 1, 3, _x1) || :1454(_x0, 2, 3, _x1)
:1458 = fun(_x0) -> :1455(_x0, 1) || :1455(_x0, 2) || 9 == List.len(List.filter(_x0, fun(_x1) -> !(_x1 == 0)))
:1459 = fun(_x0, _x1) -> IntList.sum(List.mapi(_x0, fun(_x2, _x3) -> if _x2 == _x1 { if 4 == _x3 { 2 } else { 1 - _x3 % 2 } } else { 0 }, 0))
:1460 = fun(_x0, _x1, _x2) -> List.select(List.map(:1462(_x0), fun(_x3) -> let _x4 = List.replace_nth(_x0, _x3, _x1) in :1455(_x4, _x1, cons(10, _x3), :1461(_x4, cons(0, _x3), if 0 == _x2 { cons(:1459(_x4, _x1) - :1459(_x4, 3 - _x1), _x3) } else { cons(-car(:1460(_x4, 3 - _x1, _x2 - 1)), _x3) }))), fun(_x5, _x6) -> car(_x5) < car(_x6))
:1461 = fun(_x0, _x1, _x2) -> List.exists(_x0, ==(0), _x2, _x1)
:1462 = fun(_x0) -> List.map(List.filter(List.mapi(_x0, cons, 0), fun(_x1) -> 0 == car(_x1)), fun(_x2) -> cdr(_x2))
:1463 = fun(_x0, _x1) -> cdr(:1460(_x0, _x1, 3))
:1464 = fun(_x0, _x1, _x2) -> if _x0 < 0 { :1450 } else { if :1458(_x1) || !(List.nth(_x1, _x0) == 0) { _x1 } else { let _x3 = List.replace_nth(_x1, _x0, _x2) in if :1455(_x3, _x2) || isnil(List.filter(_x3, ==(0))) { _x3 } else { List.replace_nth(_x3, :1463(_x3, 3 - _x2), 3 - _x2) } } }
:1465 = fun(_x0) -> Vec2.new(_x0 % 3, _x0 / 3)
:1466 = fun(_x0, _x1) -> if 1 == _x0 { [:1465(_x1)] } else { [] }
:1467 = fun(_x0, _x1) -> if 2 == _x0 { [] } else { [:1465(_x1)] }
:1468 = fun(_x0, _x1) -> let _x2 = List.nth(_x0, 1) in let _x3 = List.nth(_x0, 2) in :1458(_x2, List.replace_nth(_x0, 1, :1450), _x1(fun(_x4, _x5) -> let _x6 = :1464(:1452(_x4, _x5), _x2, 1) in let _x7 = List.replace_nth(_x0, 1, _x6) in let _x8 = :1461(_x6) in _x8(let _x9 = List.replace_nth(_x7, 2, IntList.unique(cons(:1453(_x6), _x3))) in if 12 == List.len(List.nth(_x9, 2)) { let _x10 = List.replace_nth(_x9, 0, 2) in List.replace_nth(_x10, 3, IntList.sum(List.nth(_x10, 2))) } else { _x9 }, _x7)))
:1469 = fun(_x0) -> let _x1 = List.nth(_x0, 1) in if 2 == List.nth(_x0, 0) { [List.concat(Vec2List.map_add(Image.from_bitmap(Bitmap.Galaxy), Vec2.new(-3, -3)), Print.thurster_range(Vec2.new(35, -2))), Image.from_sparse_bitmap(SparseBitmap.LargeHeatMax)] } else { let _x2 = 12 - List.len(List.nth(_x0, 2)) in [List.flatten(List.mapi(_x1, :1466, 0)), List.flatten(List.mapi(_x1, :1467, 0)), Vec2List.map_add(Image.from_int(_x2), Vec2.new(0, -6))] }
TicTacToe.run = fun(_x0, _x1) -> let _x2 = _x1 in let _x3 = List.nth(_x0, 1) in if 2 == List.nth(_x3, 0) { if Image.contained_rect(_x2, Rect.new(-3, -3, 7, 7)) { Garaxy.next_scene(List.replace_nth(_x0, 3, cons(List.nth(_x3, 3), List.nth(_x0, 3))), Garaxy.ModeSpace, List.nth(Space.Scene, 1)) } else { Result.to_render(_x0, :1469(_x3)) } } else { let _x4 = :1468(_x3, _x2) in Result.to_render(List.replace_nth(_x0, 1, _x4), :1469(_x4)) }
Interact.empty = [[], []]
Interact.seq2 = fun(_x0, _x1) -> Interact.seq([_x0, _x1])
Interact.seq3 = fun(_x0, _x1, _x2) -> Interact.seq([_x0, _x1, _x2])
Interact.seq4 = fun(_x0, _x1, _x2, _x3) -> Interact.seq([_x0, _x1, _x2, _x3])
Interact.seq = fun(_x0) -> List.foldl(_x0, [[], []], fun(_x1, _x2) -> [List.concat(List.nth(_x1, 0), List.nth(_x2, 0)), :1488(List.nth(_x1, 1), List.nth(_x2, 1))])
Interact.find_clicked = fun(_x0, _x1) -> List.hd(List.filter(List.nth(_x0, 0), fun(_x2) -> Image.contained_rect(_x1, List.nth(_x2, 0))), [])
Interact.push_image = fun(_x0) -> [[], :1484(List.nth(_x0, 1))]
:1479 = fun(_x0) -> [List.nth(_x0, 0), :1484(List.nth(_x0, 1))]
:1480 = fun(_x0, _x1) -> if isnil(_x1) { Interact.empty } else { _x0(let _x2 = Vec2.x_list(_x1) in fun(_x3, _x4) -> Interact.seq2([[], [[], Image.y_line(_x3, _x4 - _x2, _x2 + 5)]], [[], [[], Vec2List.map_add(_x1, Vec2.new(_x3 + 3, _x4 - _x2))]])) }
:1481 = fun(_x0, _x1) -> if isnil(_x1) { Interact.empty } else { _x0(fun(_x2, _x3) -> Interact.seq2([[], [[], Image.y_line(_x2, _x3 - 4, Vec2.x_list(_x1) + 5)]], [[], [[], Vec2List.map_add(_x1, Vec2.new(_x2 + 3, _x3))]])) }
:1482 = fun(_x0, _x1) -> [[], [[], Vec2List.map_add(_x1, _x0)]]
:1483 = fun(_x0, _x1) -> [[], [Vec2List.map_add(_x1, _x0)]]
:1484 = cons([])
:1485 = fun(_x0, _x1) -> [List.map(List.nth(_x0, 0), fun(_x2) -> :1486(_x2, _x1)), :1487(List.nth(_x0, 1), _x1)]
:1486 = fun(_x0, _x1) -> List.replace_nth(_x0, 0, Rect.move(List.nth(_x0, 0), _x1))
:1487 = fun(_x0, _x1) -> List.map(_x0, fun(_x2) -> Vec2List.map_add(_x2, _x1))
:1488 = fun(_x0, _x1) -> if isnil(_x0) && isnil(_x1) { [] } else { if isnil(_x0) { _x1 } else { if isnil(_x1) { _x0 } else { let _x2::_x3 = _x0 in let _x4::_x5 = _x1 in cons(List.concat(_x2, _x4), :1488(_x3, _x5)) } } }
:1489 = fun(_x0, _x1, _x2) -> _x0(fun(_x3, _x4) -> [[[Rect.from_vecs(Vec2.new(_x3 - 1, _x4 - 1), Vec2.new(3, 3)), _x1, _x2]], [[Vec2.new(_x3 - 1, _x4), Vec2.new(_x3, _x4), Vec2.new(_x3 + 1, _x4), Vec2.new(_x3, _x4 - 1), Vec2.new(_x3, _x4 + 1)]]])
Interact.draw_clickable_at = fun(_x0, _x1, _x2, _x3) -> let _x4 = Vec2List.map_add(_x1, _x0) in [[[Image.bounding_box(_x4), _x2, _x3]], [_x4]]
:1492 = fun(_x0, _x1, _x2, _x3) -> Interact.seq2(Interact.draw_clickable_at(_x0, Image.from_int_with_size(_x1, 8), _x3, _x1), :1493(Vec2.add(_x0, Vec2.new(12, 12)), _x1, _x2))
:1493 = fun(_x0, _x1, _x2) -> let _x3 = Bit.make_n(_x1, 64) in _x0(fun(_x4, _x5) -> Interact.seq(cons([[], [List.concat(List.flatten(List.map(IntList.make(8), fun(_x6) -> Vec2List.map_add(Image.center_fill_rect(1), Vec2.new(_x4 + _x6 * 3, _x5 - 3)))), List.flatten(List.map(IntList.make(8), fun(_x7) -> Vec2List.map_add(Image.center_fill_rect(1), Vec2.new(_x4 - 3, _x5 + _x7 * 3)))))]], List.mapi(_x3, fun(_x8, _x9) -> :1494(_x1, _x0, _x8, _x9, _x2), 0))))
:1494 = fun(_x0, _x1, _x2, _x3, _x4) -> let _x5 = Vec2.add(_x1, Vec2.new(3 * (_x3 % 8), 3 * (_x3 / 8))) in _x5(fun(_x6, _x7) -> if 1 == _x2 { Interact.draw_clickable_at(_x5, Image.center_fill_rect(1), _x4, _x0 - Int.pow2(_x3)) } else { [[[Rect.new(_x6 - 1, _x7 - 1, 3, 3), _x4, _x0 + Int.pow2(_x3)]], [[_x5]]] })
galaxy = Garaxy.run
