LIST = [[
    [[0, 1, 0], [1, 1, 1], [1, 0, 0]],
    [[1, 1, 0], [1, 0, 0], [1, 1, 0]],
    [[0, 1, 0], [1, 1, 0], [0, 1, 1]],
    [[0, 0, 1], [0, 0, 1], [0, 1, 0]],
    [[0, 0, 1], [1, 1, 1], [0, 1, 1]],
    [[0, 0, 1], [0, 0, 1], [1, 1, 1]],
    [[0, 1, 0], [1, 0, 0], [1, 1, 0]],
    [[1, 0, 1], [1, 0, 0], [1, 0, 0]],
], [
    [[1, 1, 0], [1, 1, 1], [1, 1, 0]],
    [[0, 0, 0], [1, 1, 1], [0, 0, 0]],
    [[0, 0, 0], [1, 0, 0], [1, 1, 1]],
    [[1, 1, 0], [0, 1, 1], [0, 1, 1]],
    [[0, 0, 1], [1, 1, 0], [0, 0, 0]],
    [[1, 0, 0], [1, 0, 0], [1, 0, 1]],
    [[1, 0, 0], [0, 0, 0], [0, 0, 1]],
    [[1, 0, 0], [1, 0, 0], [0, 0, 1]],
], [
    [[1, 0, 1], [0, 1, 1], [1, 1, 1]],
    [[0, 1, 0], [0, 1, 0], [0, 0, 0]],
    [[0, 1, 1], [1, 1, 1], [0, 1, 0]],
    [[1, 1, 1], [0, 0, 1], [0, 1, 1]],
    [[0, 0, 0], [0, 0, 0], [0, 1, 1]],
    [[0, 1, 0], [0, 1, 1], [0, 1, 1]],
    [[0, 1, 0], [1, 0, 0], [0, 0, 1]],
    [[1, 0, 1], [0, 0, 0], [1, 0, 0]],
], [
    [[0, 1, 0], [0, 0, 1], [0, 0, 0]],
    [[1, 0, 1], [0, 1, 1], [0, 1, 1]],
    [[1, 1, 0], [1, 0, 0], [1, 1, 0]],
    [[0, 0, 0], [1, 1, 0], [0, 1, 0]],
    [[0, 0, 0], [0, 0, 1], [0, 1, 0]],
    [[1, 0, 0], [1, 0, 1], [0, 1, 1]],
    [[1, 0, 1], [0, 1, 1], [1, 1, 0]],
    [[0, 0, 1], [1, 0, 1], [0, 1, 1]],
], [
    [[1, 1, 0], [0, 0, 1], [1, 0, 0]],
    [[1, 1, 0], [1, 0, 1], [1, 0, 0]],
    [[0, 0, 0], [0, 0, 0], [1, 1, 0]],
    [[0, 0, 1], [0, 1, 1], [1, 0, 1]],
    [[0, 1, 0], [1, 1, 0], [1, 0, 1]],
    [[0, 0, 0], [1, 1, 0], [1, 0, 1]],
    [[1, 0, 0], [1, 0, 1], [0, 1, 0]],
    [[0, 1, 1], [1, 1, 0], [1, 1, 1]],
], [
    [[1, 0, 0], [1, 0, 0], [0, 1, 1]],
    [[0, 1, 1], [0, 1, 1], [1, 1, 1]],
    [[1, 0, 0], [1, 0, 0], [1, 1, 0]],
    [[1, 0, 0], [0, 1, 1], [1, 1, 1]],
    [[1, 0, 0], [1, 1, 1], [0, 0, 1]],
    [[0, 0, 0], [0, 0, 1], [0, 0, 0]],
    [[1, 0, 0], [1, 1, 0], [0, 0, 1]],
    [[0, 1, 1], [1, 1, 1], [1, 1, 1]],
], [
    [[0, 0, 1], [0, 1, 1], [0, 1, 1]],
    [[0, 1, 1], [0, 1, 0], [0, 0, 0]],
    [[1, 0, 1], [1, 0, 1], [1, 1, 0]],
    [[0, 0, 0], [0, 1, 0], [1, 0, 0]],
    [[1, 0, 1], [0, 0, 0], [1, 0, 1]],
    [[1, 0, 1], [0, 1, 0], [0, 1, 1]],
    [[0, 0, 0], [1, 1, 1], [0, 1, 0]],
    [[0, 1, 1], [0, 0, 1], [1, 0, 1]],
], [
    [[1, 0, 0], [1, 1, 1], [0, 0, 0]],
    [[0, 0, 1], [0, 1, 0], [0, 0, 1]],
    [[1, 1, 1], [0, 0, 1], [1, 0, 1]],
    [[1, 0, 1], [1, 1, 1], [0, 1, 0]],
    [[0, 0, 1], [1, 1, 0], [0, 0, 1]],
    [[1, 0, 1], [0, 1, 0], [0, 0, 1]],
    [[0, 1, 1], [0, 0, 0], [1, 1, 0]],
    [[0, 0, 1], [0, 1, 1], [1, 1, 0]]
]]

def rotate90(tile):
    return [[tile[x][2-y] for x in range(3)] for y in range(3)]

def mirror(tile):
    return [[tile[x][y] for x in range(3)] for y in range(3)]

def is_match(x0, y0, x1, y1):
    tile0 = LIST[y0][x0]
    tile1 = LIST[y1][x1]
    for _ in range(2):
        for _ in range(4):
            if tile0 == tile1:
                return True
            tile1 = rotate90(tile1)
        tile1 = mirror(tile1)


def main():
    for y0 in range(8):
        for x0 in range(8):
            for y1 in range(8):
                for x1 in range(8):
                    if (x0, y0) >= (x1, y1):
                        continue
                    if is_match(x0, y0, x1, y1):
                        print("%d,%d, %d,%d" % (x0, y0, x1, y1))
                        break

if __name__ == '__main__':
    main()
